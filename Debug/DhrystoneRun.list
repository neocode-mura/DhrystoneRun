
DhrystoneRun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ddc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  08005f80  08005f80  00015f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d8  080069d8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e0  080069e0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e4  080069e4  000169e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080069e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002888  200001dc  08006bc4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a64  08006bc4  00022a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb2c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a7  00000000  00000000  0002bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000427b  00000000  00000000  0002dfdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000660  00000000  00000000  00032260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  000328c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d0d  00000000  00000000  00033468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a828  00000000  00000000  0004a175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086e3f  00000000  00000000  0005499d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000db7dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000264c  00000000  00000000  000db830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f64 	.word	0x08005f64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08005f64 	.word	0x08005f64

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <Proc_1>:
void Proc_1 (Ptr_Val_Par)
/******************/

REG Rec_Pointer Ptr_Val_Par;
    /* executed once */
{
 8000f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;  
                                        /* == Ptr_Glob_Next */
  /* Local variable, initialized with Ptr_Val_Par->Ptr_Comp,    */
  /* corresponds to "rename" in Ada, "with" in Pascal           */
  
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob); 
 8000f74:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000ff8 <Proc_1+0x88>

{
  if (Ptr_Glob != Null)
    /* then, executed */
    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
 8000f78:	f8df e080 	ldr.w	lr, [pc, #128]	; 8000ffc <Proc_1+0x8c>
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob); 
 8000f7c:	f8d8 c000 	ldr.w	ip, [r8]
 8000f80:	4666      	mov	r6, ip
{
 8000f82:	4604      	mov	r4, r0
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob); 
 8000f84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;  
 8000f86:	6827      	ldr	r7, [r4, #0]
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob); 
 8000f88:	463d      	mov	r5, r7
 8000f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
 8000f94:	6826      	ldr	r6, [r4, #0]
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob); 
 8000f96:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	60e3      	str	r3, [r4, #12]
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
 8000f9e:	603e      	str	r6, [r7, #0]
    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
 8000fa0:	f8dc 2000 	ldr.w	r2, [ip]
 8000fa4:	603a      	str	r2, [r7, #0]
        = Ptr_Val_Par->variant.var_1.Int_Comp;
 8000fa6:	60fb      	str	r3, [r7, #12]
  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
 8000fa8:	f8d8 2000 	ldr.w	r2, [r8]
 8000fac:	f8de 1000 	ldr.w	r1, [lr]
 8000fb0:	320c      	adds	r2, #12
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	f000 fb12 	bl	80015dc <Proc_7>
  if (Next_Record->Discr == Ident_1)
 8000fb8:	793b      	ldrb	r3, [r7, #4]
 8000fba:	b153      	cbz	r3, 8000fd2 <Proc_1+0x62>
    structassign (*Ptr_Val_Par, *Ptr_Val_Par->Ptr_Comp);
 8000fbc:	6825      	ldr	r5, [r4, #0]
 8000fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
} /* Proc_1 */
 8000fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Next_Record->variant.var_1.Int_Comp = 6;
 8000fd2:	2306      	movs	r3, #6
    Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp, 
 8000fd4:	7a20      	ldrb	r0, [r4, #8]
    Next_Record->variant.var_1.Int_Comp = 6;
 8000fd6:	60fb      	str	r3, [r7, #12]
    Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp, 
 8000fd8:	f107 0108 	add.w	r1, r7, #8
 8000fdc:	f000 fae2 	bl	80015a4 <Proc_6>
    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
 8000fe0:	f8d8 3000 	ldr.w	r3, [r8]
    Proc_7 (Next_Record->variant.var_1.Int_Comp, 10, 
 8000fe4:	68f8      	ldr	r0, [r7, #12]
    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	463a      	mov	r2, r7
    Proc_7 (Next_Record->variant.var_1.Int_Comp, 10, 
 8000fea:	210a      	movs	r1, #10
} /* Proc_1 */
 8000fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
 8000ff0:	f842 3b0c 	str.w	r3, [r2], #12
    Proc_7 (Next_Record->variant.var_1.Int_Comp, 10, 
 8000ff4:	f000 baf2 	b.w	80015dc <Proc_7>
 8000ff8:	2000293c 	.word	0x2000293c
 8000ffc:	20002934 	.word	0x20002934

08001000 <dhry_1>:
{
 8001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	ed2d 8b04 	vpush	{d8-d9}
  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
 8001008:	2030      	movs	r0, #48	; 0x30
{
 800100a:	b095      	sub	sp, #84	; 0x54
  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
 800100c:	f001 fb46 	bl	800269c <malloc>
 8001010:	4bbf      	ldr	r3, [pc, #764]	; (8001310 <dhry_1+0x310>)
  strcpy (Ptr_Glob->variant.var_1.Str_Comp, 
 8001012:	4dc0      	ldr	r5, [pc, #768]	; (8001314 <dhry_1+0x314>)
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
 8001014:	f8df b398 	ldr.w	fp, [pc, #920]	; 80013b0 <dhry_1+0x3b0>
  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
 8001018:	4606      	mov	r6, r0
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
 800101a:	2030      	movs	r0, #48	; 0x30
  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
 800101c:	601e      	str	r6, [r3, #0]
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
 800101e:	f001 fb3d 	bl	800269c <malloc>
 8001022:	4604      	mov	r4, r0
  strcpy (Ptr_Glob->variant.var_1.Str_Comp, 
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
 8001026:	6026      	str	r6, [r4, #0]
  Ptr_Glob->Discr                       = Ident_1;
 8001028:	2600      	movs	r6, #0
 800102a:	7126      	strb	r6, [r4, #4]
  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
 800102c:	2602      	movs	r6, #2
 800102e:	7226      	strb	r6, [r4, #8]
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
 8001030:	2628      	movs	r6, #40	; 0x28
 8001032:	60e6      	str	r6, [r4, #12]
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
 8001034:	f8cb 4000 	str.w	r4, [fp]
  strcpy (Ptr_Glob->variant.var_1.Str_Comp, 
 8001038:	3410      	adds	r4, #16
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001040:	c407      	stmia	r4!, {r0, r1, r2}
  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
 8001042:	4db5      	ldr	r5, [pc, #724]	; (8001318 <dhry_1+0x318>)
  strcpy (Ptr_Glob->variant.var_1.Str_Comp, 
 8001044:	f824 3b02 	strh.w	r3, [r4], #2
 8001048:	0c1e      	lsrs	r6, r3, #16
  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
 800104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  strcpy (Ptr_Glob->variant.var_1.Str_Comp, 
 800104c:	7026      	strb	r6, [r4, #0]
  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
 800104e:	ac04      	add	r4, sp, #16
 8001050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001052:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001056:	c407      	stmia	r4!, {r0, r1, r2}
 8001058:	f824 3b02 	strh.w	r3, [r4], #2
 800105c:	0c1b      	lsrs	r3, r3, #16
 800105e:	7023      	strb	r3, [r4, #0]
  Arr_2_Glob [8][7] = 10;
 8001060:	4bae      	ldr	r3, [pc, #696]	; (800131c <dhry_1+0x31c>)
  printf ("\r\n");
 8001062:	48af      	ldr	r0, [pc, #700]	; (8001320 <dhry_1+0x320>)
  Arr_2_Glob [8][7] = 10;
 8001064:	220a      	movs	r2, #10
 8001066:	f8c3 265c 	str.w	r2, [r3, #1628]	; 0x65c
  printf ("\r\n");
 800106a:	f002 f8c1 	bl	80031f0 <puts>
  printf ("Dhrystone Benchmark, Version 2.1 (Language: C)\r\n");
 800106e:	48ad      	ldr	r0, [pc, #692]	; (8001324 <dhry_1+0x324>)
 8001070:	f002 f8be 	bl	80031f0 <puts>
  printf ("\r\n");
 8001074:	48aa      	ldr	r0, [pc, #680]	; (8001320 <dhry_1+0x320>)
 8001076:	f002 f8bb 	bl	80031f0 <puts>
  if (Reg)
 800107a:	4bab      	ldr	r3, [pc, #684]	; (8001328 <dhry_1+0x328>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 8251 	beq.w	8001526 <dhry_1+0x526>
    printf ("Program compiled with 'register' attribute\r\n");
 8001084:	48a9      	ldr	r0, [pc, #676]	; (800132c <dhry_1+0x32c>)
 8001086:	f002 f8b3 	bl	80031f0 <puts>
    printf ("\r\n");
 800108a:	48a5      	ldr	r0, [pc, #660]	; (8001320 <dhry_1+0x320>)
 800108c:	f002 f8b0 	bl	80031f0 <puts>
  printf ("Please give the number of runs through the benchmark: ");
 8001090:	48a7      	ldr	r0, [pc, #668]	; (8001330 <dhry_1+0x330>)
 8001092:	f8df 8320 	ldr.w	r8, [pc, #800]	; 80013b4 <dhry_1+0x3b4>
 8001096:	f8df 9320 	ldr.w	r9, [pc, #800]	; 80013b8 <dhry_1+0x3b8>
 800109a:	4da6      	ldr	r5, [pc, #664]	; (8001334 <dhry_1+0x334>)
 800109c:	f8df a31c 	ldr.w	sl, [pc, #796]	; 80013bc <dhry_1+0x3bc>
 80010a0:	f002 f820 	bl	80030e4 <iprintf>
    scanf ("%d", &n);
 80010a4:	a90c      	add	r1, sp, #48	; 0x30
 80010a6:	48a4      	ldr	r0, [pc, #656]	; (8001338 <dhry_1+0x338>)
 80010a8:	f002 f8ba 	bl	8003220 <iscanf>
    printf("%d\r\n", n);
 80010ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80010ae:	48a3      	ldr	r0, [pc, #652]	; (800133c <dhry_1+0x33c>)
 80010b0:	f002 f818 	bl	80030e4 <iprintf>
    Number_Of_Runs = n;
 80010b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  printf ("\r\n");
 80010b6:	489a      	ldr	r0, [pc, #616]	; (8001320 <dhry_1+0x320>)
    Number_Of_Runs = n;
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	461c      	mov	r4, r3
  printf ("\r\n");
 80010bc:	f002 f898 	bl	80031f0 <puts>
  printf ("Execution starts, %d runs through Dhrystone\r\n", Number_Of_Runs);
 80010c0:	4621      	mov	r1, r4
 80010c2:	489f      	ldr	r0, [pc, #636]	; (8001340 <dhry_1+0x340>)
 80010c4:	f002 f80e 	bl	80030e4 <iprintf>
  Begin_Time = HAL_GetTick();
 80010c8:	f000 fce2 	bl	8001a90 <HAL_GetTick>
 80010cc:	4b9d      	ldr	r3, [pc, #628]	; (8001344 <dhry_1+0x344>)
  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
 80010ce:	2c00      	cmp	r4, #0
  Begin_Time = HAL_GetTick();
 80010d0:	6018      	str	r0, [r3, #0]
  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
 80010d2:	f340 822f 	ble.w	8001534 <dhry_1+0x534>
 80010d6:	1c63      	adds	r3, r4, #1
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2701      	movs	r7, #1
    strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
 80010dc:	4c9a      	ldr	r4, [pc, #616]	; (8001348 <dhry_1+0x348>)
 80010de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e0:	ae0c      	add	r6, sp, #48	; 0x30
 80010e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010e8:	c607      	stmia	r6!, {r0, r1, r2}
 80010ea:	f826 3b02 	strh.w	r3, [r6], #2
 80010ee:	0c1b      	lsrs	r3, r3, #16
{
  Boolean Bool_Loc;

  Bool_Loc = Ch_1_Glob == 'A';
  Bool_Glob = Bool_Loc | Bool_Glob;
  Ch_2_Glob = 'B';
 80010f0:	f04f 0c42 	mov.w	ip, #66	; 0x42
  Bool_Glob = Bool_Loc | Bool_Glob;
 80010f4:	2201      	movs	r2, #1
    strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
 80010f6:	7033      	strb	r3, [r6, #0]
    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
 80010f8:	a90c      	add	r1, sp, #48	; 0x30

void Proc_5 () /* without parameters */
/*******/
    /* executed once */
{
  Ch_1_Glob = 'A';
 80010fa:	2441      	movs	r4, #65	; 0x41
    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
 80010fc:	a804      	add	r0, sp, #16
  Ch_2_Glob = 'B';
 80010fe:	f885 c000 	strb.w	ip, [r5]
  Bool_Glob = Bool_Loc | Bool_Glob;
 8001102:	f8c9 2000 	str.w	r2, [r9]
    Enum_Loc = Ident_2;
 8001106:	f88d 200b 	strb.w	r2, [sp, #11]
  Ch_1_Glob = 'A';
 800110a:	f888 4000 	strb.w	r4, [r8]
    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
 800110e:	f000 fa97 	bl	8001640 <Func_2>
 8001112:	fab0 f380 	clz	r3, r0
 8001116:	095b      	lsrs	r3, r3, #5
      Proc_7 (Int_1_Loc, Int_2_Loc, &Int_3_Loc);
 8001118:	aa03      	add	r2, sp, #12
 800111a:	2103      	movs	r1, #3
 800111c:	2002      	movs	r0, #2
      Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;
 800111e:	2607      	movs	r6, #7
    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
 8001120:	f8c9 3000 	str.w	r3, [r9]
      Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;
 8001124:	9603      	str	r6, [sp, #12]
      Proc_7 (Int_1_Loc, Int_2_Loc, &Int_3_Loc);
 8001126:	f000 fa59 	bl	80015dc <Proc_7>
    Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
 800112a:	9b03      	ldr	r3, [sp, #12]
 800112c:	497b      	ldr	r1, [pc, #492]	; (800131c <dhry_1+0x31c>)
 800112e:	4887      	ldr	r0, [pc, #540]	; (800134c <dhry_1+0x34c>)
 8001130:	2203      	movs	r2, #3
 8001132:	f000 fa57 	bl	80015e4 <Proc_8>
    Proc_1 (Ptr_Glob);
 8001136:	f8db 0000 	ldr.w	r0, [fp]
 800113a:	f7ff ff19 	bl	8000f70 <Proc_1>
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
 800113e:	782b      	ldrb	r3, [r5, #0]
 8001140:	2b40      	cmp	r3, #64	; 0x40
 8001142:	f240 8191 	bls.w	8001468 <dhry_1+0x468>
    Int_2_Loc = 3;
 8001146:	2603      	movs	r6, #3
      if (Enum_Loc == Func_1 (Ch_Index, 'C'))
 8001148:	2143      	movs	r1, #67	; 0x43
 800114a:	4620      	mov	r0, r4
 800114c:	f000 fa6c 	bl	8001628 <Func_1>
 8001150:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001154:	4283      	cmp	r3, r0
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
 8001156:	f104 0201 	add.w	r2, r4, #1
      if (Enum_Loc == Func_1 (Ch_Index, 'C'))
 800115a:	f000 8169 	beq.w	8001430 <dhry_1+0x430>
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
 800115e:	782b      	ldrb	r3, [r5, #0]
 8001160:	b2d4      	uxtb	r4, r2
 8001162:	42a3      	cmp	r3, r4
 8001164:	d2f0      	bcs.n	8001148 <dhry_1+0x148>
 8001166:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    if (Ch_1_Glob == 'A')
 800116a:	f898 3000 	ldrb.w	r3, [r8]
    Int_1_Loc = Int_2_Loc / Int_3_Loc;
 800116e:	9a03      	ldr	r2, [sp, #12]
 8001170:	fb96 f1f2 	sdiv	r1, r6, r2
    if (Ch_1_Glob == 'A')
 8001174:	2b41      	cmp	r3, #65	; 0x41
      *Int_Par_Ref = Int_Loc - Int_Glob;
 8001176:	bf02      	ittt	eq
 8001178:	f8da 3000 	ldreq.w	r3, [sl]
      Int_Loc -= 1;
 800117c:	f101 0009 	addeq.w	r0, r1, #9
      *Int_Par_Ref = Int_Loc - Int_Glob;
 8001180:	1ac3      	subeq	r3, r0, r3
  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
 8001182:	9800      	ldr	r0, [sp, #0]
 8001184:	f107 0701 	add.w	r7, r7, #1
    Int_1_Loc = Int_2_Loc / Int_3_Loc;
 8001188:	bf18      	it	ne
 800118a:	460b      	movne	r3, r1
  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
 800118c:	4287      	cmp	r7, r0
 800118e:	d1a5      	bne.n	80010dc <dhry_1+0xdc>
    Int_2_Loc = 7 * (Int_2_Loc - Int_3_Loc) - Int_1_Loc;
 8001190:	1ab6      	subs	r6, r6, r2
 8001192:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8001196:	1a76      	subs	r6, r6, r1
  End_Time = HAL_GetTick();
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	f000 fc79 	bl	8001a90 <HAL_GetTick>
 800119e:	4c6c      	ldr	r4, [pc, #432]	; (8001350 <dhry_1+0x350>)
 80011a0:	4602      	mov	r2, r0
  printf ("Execution ends\r\n");
 80011a2:	486c      	ldr	r0, [pc, #432]	; (8001354 <dhry_1+0x354>)
  End_Time = HAL_GetTick();
 80011a4:	6022      	str	r2, [r4, #0]
  printf ("Execution ends\r\n");
 80011a6:	f002 f823 	bl	80031f0 <puts>
  printf ("\r\n");
 80011aa:	485d      	ldr	r0, [pc, #372]	; (8001320 <dhry_1+0x320>)
 80011ac:	f002 f820 	bl	80031f0 <puts>
  printf ("Final values of the variables used in the benchmark:\r\n");
 80011b0:	4869      	ldr	r0, [pc, #420]	; (8001358 <dhry_1+0x358>)
 80011b2:	f002 f81d 	bl	80031f0 <puts>
  printf ("\r\n");
 80011b6:	485a      	ldr	r0, [pc, #360]	; (8001320 <dhry_1+0x320>)
 80011b8:	f002 f81a 	bl	80031f0 <puts>
  printf ("Int_Glob:            %d\r\n", Int_Glob);
 80011bc:	f8da 1000 	ldr.w	r1, [sl]
 80011c0:	4866      	ldr	r0, [pc, #408]	; (800135c <dhry_1+0x35c>)
 80011c2:	f001 ff8f 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 5);
 80011c6:	2105      	movs	r1, #5
 80011c8:	4865      	ldr	r0, [pc, #404]	; (8001360 <dhry_1+0x360>)
 80011ca:	f001 ff8b 	bl	80030e4 <iprintf>
  printf ("Bool_Glob:           %d\r\n", Bool_Glob);
 80011ce:	f8d9 1000 	ldr.w	r1, [r9]
 80011d2:	4864      	ldr	r0, [pc, #400]	; (8001364 <dhry_1+0x364>)
 80011d4:	f001 ff86 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 1);
 80011d8:	2101      	movs	r1, #1
 80011da:	4861      	ldr	r0, [pc, #388]	; (8001360 <dhry_1+0x360>)
 80011dc:	f001 ff82 	bl	80030e4 <iprintf>
  printf ("Ch_1_Glob:           %c\r\n", Ch_1_Glob);
 80011e0:	f898 1000 	ldrb.w	r1, [r8]
 80011e4:	4860      	ldr	r0, [pc, #384]	; (8001368 <dhry_1+0x368>)
 80011e6:	f001 ff7d 	bl	80030e4 <iprintf>
  printf ("        should be:   %c\r\n", 'A');
 80011ea:	2141      	movs	r1, #65	; 0x41
 80011ec:	485f      	ldr	r0, [pc, #380]	; (800136c <dhry_1+0x36c>)
 80011ee:	f001 ff79 	bl	80030e4 <iprintf>
  printf ("Ch_2_Glob:           %c\r\n", Ch_2_Glob);
 80011f2:	7829      	ldrb	r1, [r5, #0]
 80011f4:	485e      	ldr	r0, [pc, #376]	; (8001370 <dhry_1+0x370>)
  printf ("  Ptr_Comp:          %d\r\n", (int) Next_Ptr_Glob->Ptr_Comp);
 80011f6:	4d46      	ldr	r5, [pc, #280]	; (8001310 <dhry_1+0x310>)
  printf ("Ch_2_Glob:           %c\r\n", Ch_2_Glob);
 80011f8:	f001 ff74 	bl	80030e4 <iprintf>
  printf ("        should be:   %c\r\n", 'B');
 80011fc:	2142      	movs	r1, #66	; 0x42
 80011fe:	485b      	ldr	r0, [pc, #364]	; (800136c <dhry_1+0x36c>)
 8001200:	f001 ff70 	bl	80030e4 <iprintf>
  printf ("Arr_1_Glob[8]:       %d\r\n", Arr_1_Glob[8]);
 8001204:	4a51      	ldr	r2, [pc, #324]	; (800134c <dhry_1+0x34c>)
 8001206:	485b      	ldr	r0, [pc, #364]	; (8001374 <dhry_1+0x374>)
 8001208:	6a11      	ldr	r1, [r2, #32]
 800120a:	f001 ff6b 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 7);
 800120e:	2107      	movs	r1, #7
 8001210:	4853      	ldr	r0, [pc, #332]	; (8001360 <dhry_1+0x360>)
 8001212:	f001 ff67 	bl	80030e4 <iprintf>
  printf ("Arr_2_Glob[8][7]:    %d\r\n", Arr_2_Glob[8][7]);
 8001216:	4b41      	ldr	r3, [pc, #260]	; (800131c <dhry_1+0x31c>)
 8001218:	4857      	ldr	r0, [pc, #348]	; (8001378 <dhry_1+0x378>)
 800121a:	f8d3 165c 	ldr.w	r1, [r3, #1628]	; 0x65c
 800121e:	f001 ff61 	bl	80030e4 <iprintf>
  printf ("        should be:   Number_Of_Runs + 10\r\n");
 8001222:	4856      	ldr	r0, [pc, #344]	; (800137c <dhry_1+0x37c>)
 8001224:	f001 ffe4 	bl	80031f0 <puts>
  printf ("Ptr_Glob->\r\n");
 8001228:	4855      	ldr	r0, [pc, #340]	; (8001380 <dhry_1+0x380>)
 800122a:	f001 ffe1 	bl	80031f0 <puts>
  printf ("  Ptr_Comp:          %d\r\n", (int) Ptr_Glob->Ptr_Comp);
 800122e:	f8db 2000 	ldr.w	r2, [fp]
 8001232:	4854      	ldr	r0, [pc, #336]	; (8001384 <dhry_1+0x384>)
 8001234:	6811      	ldr	r1, [r2, #0]
 8001236:	f001 ff55 	bl	80030e4 <iprintf>
  printf ("        should be:   (implementation-dependent)\r\n");
 800123a:	4853      	ldr	r0, [pc, #332]	; (8001388 <dhry_1+0x388>)
 800123c:	f001 ffd8 	bl	80031f0 <puts>
  printf ("  Discr:             %d\r\n", Ptr_Glob->Discr);
 8001240:	f8db 2000 	ldr.w	r2, [fp]
 8001244:	4851      	ldr	r0, [pc, #324]	; (800138c <dhry_1+0x38c>)
 8001246:	7911      	ldrb	r1, [r2, #4]
 8001248:	f001 ff4c 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 0);
 800124c:	2100      	movs	r1, #0
 800124e:	4844      	ldr	r0, [pc, #272]	; (8001360 <dhry_1+0x360>)
 8001250:	f001 ff48 	bl	80030e4 <iprintf>
  printf ("  Enum_Comp:         %d\r\n", Ptr_Glob->variant.var_1.Enum_Comp);
 8001254:	f8db 2000 	ldr.w	r2, [fp]
 8001258:	484d      	ldr	r0, [pc, #308]	; (8001390 <dhry_1+0x390>)
 800125a:	7a11      	ldrb	r1, [r2, #8]
 800125c:	f001 ff42 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 2);
 8001260:	2102      	movs	r1, #2
 8001262:	483f      	ldr	r0, [pc, #252]	; (8001360 <dhry_1+0x360>)
 8001264:	f001 ff3e 	bl	80030e4 <iprintf>
  printf ("  Int_Comp:          %d\r\n", Ptr_Glob->variant.var_1.Int_Comp);
 8001268:	f8db 2000 	ldr.w	r2, [fp]
 800126c:	4849      	ldr	r0, [pc, #292]	; (8001394 <dhry_1+0x394>)
 800126e:	68d1      	ldr	r1, [r2, #12]
 8001270:	f001 ff38 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 17);
 8001274:	2111      	movs	r1, #17
 8001276:	483a      	ldr	r0, [pc, #232]	; (8001360 <dhry_1+0x360>)
 8001278:	f001 ff34 	bl	80030e4 <iprintf>
  printf ("  Str_Comp:          %s\r\n", Ptr_Glob->variant.var_1.Str_Comp);
 800127c:	f8db 1000 	ldr.w	r1, [fp]
 8001280:	4845      	ldr	r0, [pc, #276]	; (8001398 <dhry_1+0x398>)
 8001282:	3110      	adds	r1, #16
 8001284:	f001 ff2e 	bl	80030e4 <iprintf>
  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\r\n");
 8001288:	4844      	ldr	r0, [pc, #272]	; (800139c <dhry_1+0x39c>)
 800128a:	f001 ffb1 	bl	80031f0 <puts>
  printf ("Next_Ptr_Glob->\r\n");
 800128e:	4844      	ldr	r0, [pc, #272]	; (80013a0 <dhry_1+0x3a0>)
 8001290:	f001 ffae 	bl	80031f0 <puts>
  printf ("  Ptr_Comp:          %d\r\n", (int) Next_Ptr_Glob->Ptr_Comp);
 8001294:	682a      	ldr	r2, [r5, #0]
 8001296:	483b      	ldr	r0, [pc, #236]	; (8001384 <dhry_1+0x384>)
 8001298:	6811      	ldr	r1, [r2, #0]
 800129a:	f001 ff23 	bl	80030e4 <iprintf>
  printf ("        should be:   (implementation-dependent), same as above\r\n");
 800129e:	4841      	ldr	r0, [pc, #260]	; (80013a4 <dhry_1+0x3a4>)
 80012a0:	f001 ffa6 	bl	80031f0 <puts>
  printf ("  Discr:             %d\r\n", Next_Ptr_Glob->Discr);
 80012a4:	682a      	ldr	r2, [r5, #0]
 80012a6:	4839      	ldr	r0, [pc, #228]	; (800138c <dhry_1+0x38c>)
 80012a8:	7911      	ldrb	r1, [r2, #4]
 80012aa:	f001 ff1b 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 0);
 80012ae:	2100      	movs	r1, #0
 80012b0:	482b      	ldr	r0, [pc, #172]	; (8001360 <dhry_1+0x360>)
 80012b2:	f001 ff17 	bl	80030e4 <iprintf>
  printf ("  Enum_Comp:         %d\r\n", Next_Ptr_Glob->variant.var_1.Enum_Comp);
 80012b6:	682a      	ldr	r2, [r5, #0]
 80012b8:	4835      	ldr	r0, [pc, #212]	; (8001390 <dhry_1+0x390>)
 80012ba:	7a11      	ldrb	r1, [r2, #8]
 80012bc:	f001 ff12 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 1);
 80012c0:	2101      	movs	r1, #1
 80012c2:	4827      	ldr	r0, [pc, #156]	; (8001360 <dhry_1+0x360>)
 80012c4:	f001 ff0e 	bl	80030e4 <iprintf>
  printf ("  Int_Comp:          %d\r\n", Next_Ptr_Glob->variant.var_1.Int_Comp);
 80012c8:	682a      	ldr	r2, [r5, #0]
 80012ca:	4832      	ldr	r0, [pc, #200]	; (8001394 <dhry_1+0x394>)
 80012cc:	68d1      	ldr	r1, [r2, #12]
 80012ce:	f001 ff09 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 18);
 80012d2:	2112      	movs	r1, #18
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <dhry_1+0x360>)
 80012d6:	f001 ff05 	bl	80030e4 <iprintf>
  printf ("  Str_Comp:          %s\r\n",
 80012da:	6829      	ldr	r1, [r5, #0]
 80012dc:	482e      	ldr	r0, [pc, #184]	; (8001398 <dhry_1+0x398>)
 80012de:	3110      	adds	r1, #16
 80012e0:	f001 ff00 	bl	80030e4 <iprintf>
  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\r\n");
 80012e4:	482d      	ldr	r0, [pc, #180]	; (800139c <dhry_1+0x39c>)
 80012e6:	f001 ff83 	bl	80031f0 <puts>
  printf ("Int_1_Loc:           %d\r\n", Int_1_Loc);
 80012ea:	9b00      	ldr	r3, [sp, #0]
 80012ec:	482e      	ldr	r0, [pc, #184]	; (80013a8 <dhry_1+0x3a8>)
 80012ee:	4619      	mov	r1, r3
 80012f0:	f001 fef8 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 5);
 80012f4:	2105      	movs	r1, #5
 80012f6:	481a      	ldr	r0, [pc, #104]	; (8001360 <dhry_1+0x360>)
 80012f8:	f001 fef4 	bl	80030e4 <iprintf>
  printf ("Int_2_Loc:           %d\r\n", Int_2_Loc);
 80012fc:	4631      	mov	r1, r6
 80012fe:	482b      	ldr	r0, [pc, #172]	; (80013ac <dhry_1+0x3ac>)
 8001300:	f001 fef0 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 13);
 8001304:	210d      	movs	r1, #13
 8001306:	4816      	ldr	r0, [pc, #88]	; (8001360 <dhry_1+0x360>)
 8001308:	f001 feec 	bl	80030e4 <iprintf>
  printf ("Int_3_Loc:           %d\r\n", Int_3_Loc);
 800130c:	9903      	ldr	r1, [sp, #12]
 800130e:	e057      	b.n	80013c0 <dhry_1+0x3c0>
 8001310:	20002930 	.word	0x20002930
 8001314:	08005f8c 	.word	0x08005f8c
 8001318:	08006564 	.word	0x08006564
 800131c:	2000021c 	.word	0x2000021c
 8001320:	080061fc 	.word	0x080061fc
 8001324:	08005fac 	.word	0x08005fac
 8001328:	200001f8 	.word	0x200001f8
 800132c:	08005fdc 	.word	0x08005fdc
 8001330:	08006038 	.word	0x08006038
 8001334:	20002939 	.word	0x20002939
 8001338:	08006070 	.word	0x08006070
 800133c:	08006074 	.word	0x08006074
 8001340:	0800607c 	.word	0x0800607c
 8001344:	20000214 	.word	0x20000214
 8001348:	08006584 	.word	0x08006584
 800134c:	20002940 	.word	0x20002940
 8001350:	2000292c 	.word	0x2000292c
 8001354:	080060ac 	.word	0x080060ac
 8001358:	080060bc 	.word	0x080060bc
 800135c:	080060f4 	.word	0x080060f4
 8001360:	08006110 	.word	0x08006110
 8001364:	0800612c 	.word	0x0800612c
 8001368:	08006148 	.word	0x08006148
 800136c:	08006164 	.word	0x08006164
 8001370:	08006180 	.word	0x08006180
 8001374:	0800619c 	.word	0x0800619c
 8001378:	080061b8 	.word	0x080061b8
 800137c:	080061d4 	.word	0x080061d4
 8001380:	08006200 	.word	0x08006200
 8001384:	0800620c 	.word	0x0800620c
 8001388:	08006228 	.word	0x08006228
 800138c:	0800625c 	.word	0x0800625c
 8001390:	08006278 	.word	0x08006278
 8001394:	08006294 	.word	0x08006294
 8001398:	080062b0 	.word	0x080062b0
 800139c:	080062cc 	.word	0x080062cc
 80013a0:	08006304 	.word	0x08006304
 80013a4:	08006318 	.word	0x08006318
 80013a8:	08006358 	.word	0x08006358
 80013ac:	08006374 	.word	0x08006374
 80013b0:	2000293c 	.word	0x2000293c
 80013b4:	20002938 	.word	0x20002938
 80013b8:	20002a08 	.word	0x20002a08
 80013bc:	20002934 	.word	0x20002934
 80013c0:	4861      	ldr	r0, [pc, #388]	; (8001548 <dhry_1+0x548>)
 80013c2:	f001 fe8f 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 7);
 80013c6:	2107      	movs	r1, #7
 80013c8:	4860      	ldr	r0, [pc, #384]	; (800154c <dhry_1+0x54c>)
 80013ca:	f001 fe8b 	bl	80030e4 <iprintf>
  printf ("Enum_Loc:            %d\r\n", Enum_Loc);
 80013ce:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80013d2:	485f      	ldr	r0, [pc, #380]	; (8001550 <dhry_1+0x550>)
 80013d4:	f001 fe86 	bl	80030e4 <iprintf>
  printf ("        should be:   %d\r\n", 1);
 80013d8:	2101      	movs	r1, #1
 80013da:	485c      	ldr	r0, [pc, #368]	; (800154c <dhry_1+0x54c>)
 80013dc:	f001 fe82 	bl	80030e4 <iprintf>
  printf ("Str_1_Loc:           %s\r\n", Str_1_Loc);
 80013e0:	a904      	add	r1, sp, #16
 80013e2:	485c      	ldr	r0, [pc, #368]	; (8001554 <dhry_1+0x554>)
 80013e4:	f001 fe7e 	bl	80030e4 <iprintf>
  printf ("        should be:   DHRYSTONE PROGRAM, 1'ST STRING\r\n");
 80013e8:	485b      	ldr	r0, [pc, #364]	; (8001558 <dhry_1+0x558>)
 80013ea:	f001 ff01 	bl	80031f0 <puts>
  printf ("Str_2_Loc:           %s\r\n", Str_2_Loc);
 80013ee:	a90c      	add	r1, sp, #48	; 0x30
 80013f0:	485a      	ldr	r0, [pc, #360]	; (800155c <dhry_1+0x55c>)
 80013f2:	f001 fe77 	bl	80030e4 <iprintf>
  printf ("        should be:   DHRYSTONE PROGRAM, 2'ND STRING\r\n");
 80013f6:	485a      	ldr	r0, [pc, #360]	; (8001560 <dhry_1+0x560>)
 80013f8:	f001 fefa 	bl	80031f0 <puts>
  printf ("\r\n");
 80013fc:	4859      	ldr	r0, [pc, #356]	; (8001564 <dhry_1+0x564>)
 80013fe:	f001 fef7 	bl	80031f0 <puts>
  User_Time = End_Time - Begin_Time;
 8001402:	4a59      	ldr	r2, [pc, #356]	; (8001568 <dhry_1+0x568>)
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	6811      	ldr	r1, [r2, #0]
 8001408:	4a58      	ldr	r2, [pc, #352]	; (800156c <dhry_1+0x56c>)
 800140a:	1a5b      	subs	r3, r3, r1
  if (User_Time < Too_Small_Time)
 800140c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  User_Time = End_Time - Begin_Time;
 8001410:	6013      	str	r3, [r2, #0]
  if (User_Time < Too_Small_Time)
 8001412:	da2b      	bge.n	800146c <dhry_1+0x46c>
    printf ("Measured time too small to obtain meaningful results\r\n");
 8001414:	4856      	ldr	r0, [pc, #344]	; (8001570 <dhry_1+0x570>)
 8001416:	f001 feeb 	bl	80031f0 <puts>
    printf ("Please increase number of runs\r\n");
 800141a:	4856      	ldr	r0, [pc, #344]	; (8001574 <dhry_1+0x574>)
 800141c:	f001 fee8 	bl	80031f0 <puts>
    printf ("\r\n");
 8001420:	4850      	ldr	r0, [pc, #320]	; (8001564 <dhry_1+0x564>)
 8001422:	f001 fee5 	bl	80031f0 <puts>
}
 8001426:	b015      	add	sp, #84	; 0x54
 8001428:	ecbd 8b04 	vpop	{d8-d9}
 800142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Proc_6 (Ident_1, &Enum_Loc);
 8001430:	f10d 010b 	add.w	r1, sp, #11
 8001434:	2000      	movs	r0, #0
 8001436:	f000 f8b5 	bl	80015a4 <Proc_6>
        strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
 800143a:	f8df c164 	ldr.w	ip, [pc, #356]	; 80015a0 <dhry_1+0x5a0>
        Int_Glob = Run_Index;
 800143e:	f8ca 7000 	str.w	r7, [sl]
        strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
 8001442:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001446:	ae0c      	add	r6, sp, #48	; 0x30
 8001448:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800144a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800144e:	c607      	stmia	r6!, {r0, r1, r2}
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
 8001450:	3401      	adds	r4, #1
 8001452:	782a      	ldrb	r2, [r5, #0]
        strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
 8001454:	f826 3b02 	strh.w	r3, [r6], #2
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
 8001458:	b2e4      	uxtb	r4, r4
        strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
 800145a:	0c1b      	lsrs	r3, r3, #16
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
 800145c:	42a2      	cmp	r2, r4
        strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
 800145e:	7033      	strb	r3, [r6, #0]
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
 8001460:	463e      	mov	r6, r7
 8001462:	f4bf ae71 	bcs.w	8001148 <dhry_1+0x148>
 8001466:	e67e      	b.n	8001166 <dhry_1+0x166>
 8001468:	2609      	movs	r6, #9
 800146a:	e67e      	b.n	800116a <dhry_1+0x16a>
    Microseconds = (float) User_Time / 1000 * Mic_secs_Per_Second
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	ed9f 9a41 	vldr	s18, [pc, #260]	; 8001578 <dhry_1+0x578>
 8001474:	4e41      	ldr	r6, [pc, #260]	; (800157c <dhry_1+0x57c>)
 8001476:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800147a:	eec8 7a09 	vdiv.f32	s15, s16, s18
 800147e:	ee17 0a90 	vmov	r0, s15
 8001482:	f7ff f879 	bl	8000578 <__aeabi_f2d>
 8001486:	a32e      	add	r3, pc, #184	; (adr r3, 8001540 <dhry_1+0x540>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8cc 	bl	8000628 <__aeabi_dmul>
                        / (float) Number_Of_Runs;
 8001490:	eddd 7a01 	vldr	s15, [sp, #4]
 8001494:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    Microseconds = (float) User_Time / 1000 * Mic_secs_Per_Second
 8001498:	4604      	mov	r4, r0
                        / (float) Number_Of_Runs;
 800149a:	ee18 0a90 	vmov	r0, s17
    Microseconds = (float) User_Time / 1000 * Mic_secs_Per_Second
 800149e:	460d      	mov	r5, r1
                        / (float) Number_Of_Runs;
 80014a0:	f7ff f86a 	bl	8000578 <__aeabi_f2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4620      	mov	r0, r4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f7ff f9e6 	bl	800087c <__aeabi_ddiv>
 80014b0:	f7ff fb92 	bl	8000bd8 <__aeabi_d2f>
    Dhrystones_Per_Second = (float) Number_Of_Runs / (float) User_Time * 1000;
 80014b4:	eec8 7a88 	vdiv.f32	s15, s17, s16
    DMIPS = Dhrystones_Per_Second / 1757.0;
 80014b8:	4c31      	ldr	r4, [pc, #196]	; (8001580 <dhry_1+0x580>)
    Dhrystones_Per_Second = (float) Number_Of_Runs / (float) User_Time * 1000;
 80014ba:	4d32      	ldr	r5, [pc, #200]	; (8001584 <dhry_1+0x584>)
                        / (float) Number_Of_Runs;
 80014bc:	4603      	mov	r3, r0
    printf ("Microseconds for one run through Dhrystone: ");
 80014be:	4832      	ldr	r0, [pc, #200]	; (8001588 <dhry_1+0x588>)
                        / (float) Number_Of_Runs;
 80014c0:	6033      	str	r3, [r6, #0]
    DMIPS = Dhrystones_Per_Second / 1757.0;
 80014c2:	eddf 6a32 	vldr	s13, [pc, #200]	; 800158c <dhry_1+0x58c>
    Dhrystones_Per_Second = (float) Number_Of_Runs / (float) User_Time * 1000;
 80014c6:	ee67 7a89 	vmul.f32	s15, s15, s18
    DMIPS = Dhrystones_Per_Second / 1757.0;
 80014ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    Dhrystones_Per_Second = (float) Number_Of_Runs / (float) User_Time * 1000;
 80014ce:	edc5 7a00 	vstr	s15, [r5]
    DMIPS = Dhrystones_Per_Second / 1757.0;
 80014d2:	ed84 7a00 	vstr	s14, [r4]
    printf ("Microseconds for one run through Dhrystone: ");
 80014d6:	f001 fe05 	bl	80030e4 <iprintf>
    printf ("%6.1f \r\n", Microseconds);
 80014da:	6830      	ldr	r0, [r6, #0]
 80014dc:	f7ff f84c 	bl	8000578 <__aeabi_f2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	482a      	ldr	r0, [pc, #168]	; (8001590 <dhry_1+0x590>)
 80014e6:	f001 fdfd 	bl	80030e4 <iprintf>
    printf ("Dhrystones per Second:                      ");
 80014ea:	482a      	ldr	r0, [pc, #168]	; (8001594 <dhry_1+0x594>)
 80014ec:	f001 fdfa 	bl	80030e4 <iprintf>
    printf ("%6.1f \r\n", Dhrystones_Per_Second);
 80014f0:	6828      	ldr	r0, [r5, #0]
 80014f2:	f7ff f841 	bl	8000578 <__aeabi_f2d>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4825      	ldr	r0, [pc, #148]	; (8001590 <dhry_1+0x590>)
 80014fc:	f001 fdf2 	bl	80030e4 <iprintf>
    printf ("DMIPS:                                      ");
 8001500:	4825      	ldr	r0, [pc, #148]	; (8001598 <dhry_1+0x598>)
 8001502:	f001 fdef 	bl	80030e4 <iprintf>
    printf ("%6.1f \r\n", DMIPS);
 8001506:	6820      	ldr	r0, [r4, #0]
 8001508:	f7ff f836 	bl	8000578 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	481f      	ldr	r0, [pc, #124]	; (8001590 <dhry_1+0x590>)
 8001512:	f001 fde7 	bl	80030e4 <iprintf>
    printf ("\r\n");
 8001516:	4813      	ldr	r0, [pc, #76]	; (8001564 <dhry_1+0x564>)
 8001518:	f001 fe6a 	bl	80031f0 <puts>
}
 800151c:	b015      	add	sp, #84	; 0x54
 800151e:	ecbd 8b04 	vpop	{d8-d9}
 8001522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    printf ("Program compiled without 'register' attribute\r\n");
 8001526:	481d      	ldr	r0, [pc, #116]	; (800159c <dhry_1+0x59c>)
 8001528:	f001 fe62 	bl	80031f0 <puts>
    printf ("\r\n");
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <dhry_1+0x564>)
 800152e:	f001 fe5f 	bl	80031f0 <puts>
 8001532:	e5ad      	b.n	8001090 <dhry_1+0x90>
  Int_1_Loc = 2;
 8001534:	2302      	movs	r3, #2
  Int_2_Loc = 3;
 8001536:	2603      	movs	r6, #3
 8001538:	e62e      	b.n	8001198 <dhry_1+0x198>
 800153a:	bf00      	nop
 800153c:	f3af 8000 	nop.w
 8001540:	00000000 	.word	0x00000000
 8001544:	412e8480 	.word	0x412e8480
 8001548:	08006390 	.word	0x08006390
 800154c:	08006110 	.word	0x08006110
 8001550:	080063ac 	.word	0x080063ac
 8001554:	080063c8 	.word	0x080063c8
 8001558:	080063e4 	.word	0x080063e4
 800155c:	0800641c 	.word	0x0800641c
 8001560:	08006438 	.word	0x08006438
 8001564:	080061fc 	.word	0x080061fc
 8001568:	20000214 	.word	0x20000214
 800156c:	20000210 	.word	0x20000210
 8001570:	08006470 	.word	0x08006470
 8001574:	080064a8 	.word	0x080064a8
 8001578:	447a0000 	.word	0x447a0000
 800157c:	20000208 	.word	0x20000208
 8001580:	20000218 	.word	0x20000218
 8001584:	2000020c 	.word	0x2000020c
 8001588:	080064c8 	.word	0x080064c8
 800158c:	44dba000 	.word	0x44dba000
 8001590:	080064f8 	.word	0x080064f8
 8001594:	08006504 	.word	0x08006504
 8001598:	08006534 	.word	0x08006534
 800159c:	08006008 	.word	0x08006008
 80015a0:	080065a4 	.word	0x080065a4

080015a4 <Proc_6>:
    /* executed once */
    /* Enum_Val_Par == Ident_3, Enum_Ref_Par becomes Ident_2 */

Enumeration  Enum_Val_Par;
Enumeration *Enum_Ref_Par;
{
 80015a4:	b2c0      	uxtb	r0, r0
Enumeration Enum_Par_Val;
{
  Enumeration Enum_Loc;

  Enum_Loc = Enum_Par_Val;
  if (Enum_Loc == Ident_3)
 80015a6:	2802      	cmp	r0, #2
 80015a8:	d012      	beq.n	80015d0 <Proc_6+0x2c>
    *Enum_Ref_Par = Ident_4;
 80015aa:	2303      	movs	r3, #3
 80015ac:	700b      	strb	r3, [r1, #0]
  switch (Enum_Val_Par)
 80015ae:	2804      	cmp	r0, #4
 80015b0:	d806      	bhi.n	80015c0 <Proc_6+0x1c>
 80015b2:	e8df f000 	tbb	[pc, r0]
 80015b6:	060a      	.short	0x060a
 80015b8:	0505      	.short	0x0505
 80015ba:	03          	.byte	0x03
 80015bb:	00          	.byte	0x00
      *Enum_Ref_Par = Ident_3;
 80015bc:	2302      	movs	r3, #2
 80015be:	700b      	strb	r3, [r1, #0]
} /* Proc_6 */
 80015c0:	4770      	bx	lr
      if (Int_Glob > 100)
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <Proc_6+0x34>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	ddfa      	ble.n	80015c0 <Proc_6+0x1c>
      *Enum_Ref_Par = Ident_1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	700b      	strb	r3, [r1, #0]
 80015ce:	4770      	bx	lr
      *Enum_Ref_Par = Ident_2;
 80015d0:	2301      	movs	r3, #1
 80015d2:	700b      	strb	r3, [r1, #0]
      break;
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20002934 	.word	0x20002934

080015dc <Proc_7>:
  Int_Loc = Int_1_Par_Val + 2;
 80015dc:	3002      	adds	r0, #2
  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
 80015de:	4401      	add	r1, r0
 80015e0:	6011      	str	r1, [r2, #0]
} /* Proc_7 */
 80015e2:	4770      	bx	lr

080015e4 <Proc_8>:
{
 80015e4:	b470      	push	{r4, r5, r6}
  Int_Loc = Int_1_Par_Val + 5;
 80015e6:	1d54      	adds	r4, r2, #5
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
 80015e8:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
 80015ec:	25c8      	movs	r5, #200	; 0xc8
 80015ee:	fb05 f504 	mul.w	r5, r5, r4
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
 80015f2:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
 80015f6:	6073      	str	r3, [r6, #4]
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
 80015f8:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80015fc:	440b      	add	r3, r1
 80015fe:	67b4      	str	r4, [r6, #120]	; 0x78
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
 8001600:	691e      	ldr	r6, [r3, #16]
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
 8001602:	615c      	str	r4, [r3, #20]
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
 8001604:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
 8001608:	3601      	adds	r6, #1
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
 800160a:	619c      	str	r4, [r3, #24]
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
 800160c:	611e      	str	r6, [r3, #16]
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
 800160e:	4429      	add	r1, r5
 8001610:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
  Int_Glob = 5;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <Proc_8+0x40>)
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
 8001616:	f8c1 2fb4 	str.w	r2, [r1, #4020]	; 0xfb4
  Int_Glob = 5;
 800161a:	2205      	movs	r2, #5
} /* Proc_8 */
 800161c:	bc70      	pop	{r4, r5, r6}
  Int_Glob = 5;
 800161e:	601a      	str	r2, [r3, #0]
} /* Proc_8 */
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20002934 	.word	0x20002934

08001628 <Func_1>:
{
 8001628:	b2c3      	uxtb	r3, r0
 800162a:	b2c9      	uxtb	r1, r1
  if (Ch_2_Loc != Ch_2_Par_Val)
 800162c:	428b      	cmp	r3, r1
    Ch_1_Glob = Ch_1_Loc;
 800162e:	bf03      	ittte	eq
 8001630:	4a02      	ldreq	r2, [pc, #8]	; (800163c <Func_1+0x14>)
    return (Ident_2);
 8001632:	2001      	moveq	r0, #1
    Ch_1_Glob = Ch_1_Loc;
 8001634:	7013      	strbeq	r3, [r2, #0]
    return (Ident_1);
 8001636:	2000      	movne	r0, #0
} /* Func_1 */
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20002938 	.word	0x20002938

08001640 <Func_2>:
{
 8001640:	b508      	push	{r3, lr}
 8001642:	7882      	ldrb	r2, [r0, #2]
 8001644:	78cb      	ldrb	r3, [r1, #3]
 8001646:	429a      	cmp	r2, r3
 8001648:	d008      	beq.n	800165c <Func_2+0x1c>
    if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
 800164a:	f7fe fdc9 	bl	80001e0 <strcmp>
 800164e:	2800      	cmp	r0, #0
 8001650:	dd05      	ble.n	800165e <Func_2+0x1e>
      Int_Glob = Int_Loc;
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <Func_2+0x24>)
 8001654:	220a      	movs	r2, #10
 8001656:	601a      	str	r2, [r3, #0]
      return (true);
 8001658:	2001      	movs	r0, #1
} /* Func_2 */
 800165a:	bd08      	pop	{r3, pc}
  if (Ch_2_Loc != Ch_2_Par_Val)
 800165c:	e7fe      	b.n	800165c <Func_2+0x1c>
      return (false);
 800165e:	2000      	movs	r0, #0
} /* Func_2 */
 8001660:	bd08      	pop	{r3, pc}
 8001662:	bf00      	nop
 8001664:	20002934 	.word	0x20002934

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	2300      	movs	r3, #0
{
 800166c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001672:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001676:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800167a:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4922      	ldr	r1, [pc, #136]	; (8001708 <SystemClock_Config+0xa0>)
 8001680:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001688:	4a20      	ldr	r2, [pc, #128]	; (800170c <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800168e:	6408      	str	r0, [r1, #64]	; 0x40
 8001690:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001692:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001696:	9100      	str	r1, [sp, #0]
 8001698:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	6813      	ldr	r3, [r2, #0]
 800169e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016aa:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ac:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ae:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b0:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b4:	2202      	movs	r2, #2
 80016b6:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b8:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ba:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016be:	e9cd 410b 	strd	r4, r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80016c6:	2410      	movs	r4, #16
 80016c8:	2204      	movs	r2, #4
 80016ca:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016cc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ce:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80016d2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d6:	f000 fb35 	bl	8001d44 <HAL_RCC_OscConfig>
 80016da:	b108      	cbz	r0, 80016e0 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016de:	e7fe      	b.n	80016de <SystemClock_Config+0x76>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e0:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e2:	240f      	movs	r4, #15
 80016e4:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016ee:	a802      	add	r0, sp, #8
 80016f0:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80016f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016fa:	f000 fd3f 	bl	800217c <HAL_RCC_ClockConfig>
 80016fe:	b108      	cbz	r0, 8001704 <SystemClock_Config+0x9c>
 8001700:	b672      	cpsid	i
  while (1)
 8001702:	e7fe      	b.n	8001702 <SystemClock_Config+0x9a>
}
 8001704:	b015      	add	sp, #84	; 0x54
 8001706:	bd30      	pop	{r4, r5, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40007000 	.word	0x40007000

08001710 <main>:
{
 8001710:	b500      	push	{lr}
  setbuf(stdout, NULL);
 8001712:	4c37      	ldr	r4, [pc, #220]	; (80017f0 <main+0xe0>)
 8001714:	6823      	ldr	r3, [r4, #0]
{
 8001716:	b08b      	sub	sp, #44	; 0x2c
  setbuf(stdout, NULL);
 8001718:	6898      	ldr	r0, [r3, #8]
 800171a:	2100      	movs	r1, #0
 800171c:	f001 fd98 	bl	8003250 <setbuf>
  setbuf(stdin, NULL);
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	2100      	movs	r1, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	2400      	movs	r4, #0
  setbuf(stdin, NULL);
 8001726:	6858      	ldr	r0, [r3, #4]
 8001728:	f001 fd92 	bl	8003250 <setbuf>
  HAL_Init();
 800172c:	f000 f98a 	bl	8001a44 <HAL_Init>
  SystemClock_Config();
 8001730:	f7ff ff9a 	bl	8001668 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001738:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <main+0xe4>)
 800173e:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001744:	482c      	ldr	r0, [pc, #176]	; (80017f8 <main+0xe8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	f042 0204 	orr.w	r2, r2, #4
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
 800174c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174e:	f002 0204 	and.w	r2, r2, #4
 8001752:	9200      	str	r2, [sp, #0]
 8001754:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001756:	9401      	str	r4, [sp, #4]
 8001758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800175a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800175e:	631a      	str	r2, [r3, #48]	; 0x30
 8001760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001762:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001766:	9201      	str	r2, [sp, #4]
 8001768:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	9402      	str	r4, [sp, #8]
 800176c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
 8001774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001776:	f002 0201 	and.w	r2, r2, #1
 800177a:	9202      	str	r2, [sp, #8]
 800177c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	9403      	str	r4, [sp, #12]
 8001780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001782:	f042 0202 	orr.w	r2, r2, #2
 8001786:	631a      	str	r2, [r3, #48]	; 0x30
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001790:	4622      	mov	r2, r4
 8001792:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001794:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001796:	f000 fad1 	bl	8001d3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <main+0xec>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800179c:	4818      	ldr	r0, [pc, #96]	; (8001800 <main+0xf0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 80017a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = B1_Pin;
 80017a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f000 f9dd 	bl	8001b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ae:	2220      	movs	r2, #32
 80017b0:	2301      	movs	r3, #1
 80017b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017b6:	4810      	ldr	r0, [pc, #64]	; (80017f8 <main+0xe8>)
  GPIO_InitStruct.Pin = LD2_Pin;
 80017b8:	2200      	movs	r2, #0
 80017ba:	2300      	movs	r3, #0
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017bc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LD2_Pin;
 80017be:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f000 f9d1 	bl	8001b68 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80017c6:	480f      	ldr	r0, [pc, #60]	; (8001804 <main+0xf4>)
 80017c8:	490f      	ldr	r1, [pc, #60]	; (8001808 <main+0xf8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80017cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d0:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d2:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.BaudRate = 115200;
 80017da:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017de:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e0:	f000 fd8a 	bl	80022f8 <HAL_UART_Init>
 80017e4:	b108      	cbz	r0, 80017ea <main+0xda>
 80017e6:	b672      	cpsid	i
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <main+0xd8>
  dhry_1();
 80017ea:	f7ff fc09 	bl	8001000 <dhry_1>
  while (1)
 80017ee:	e7fe      	b.n	80017ee <main+0xde>
 80017f0:	2000000c 	.word	0x2000000c
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	10210000 	.word	0x10210000
 8001800:	40020800 	.word	0x40020800
 8001804:	20002a0c 	.word	0x20002a0c
 8001808:	40004400 	.word	0x40004400

0800180c <_write>:
{
 800180c:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 800180e:	230a      	movs	r3, #10
{
 8001810:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8001812:	4803      	ldr	r0, [pc, #12]	; (8001820 <_write+0x14>)
 8001814:	b292      	uxth	r2, r2
 8001816:	f000 fe0b 	bl	8002430 <HAL_UART_Transmit>
}
 800181a:	4620      	mov	r0, r4
 800181c:	bd10      	pop	{r4, pc}
 800181e:	bf00      	nop
 8001820:	20002a0c 	.word	0x20002a0c

08001824 <_read>:
{
 8001824:	b570      	push	{r4, r5, r6, lr}
		status = HAL_UART_Receive(&huart2, (uint8_t*)ptr, 1, 10);
 8001826:	4d06      	ldr	r5, [pc, #24]	; (8001840 <_read+0x1c>)
{
 8001828:	460c      	mov	r4, r1
 800182a:	4616      	mov	r6, r2
		status = HAL_UART_Receive(&huart2, (uint8_t*)ptr, 1, 10);
 800182c:	230a      	movs	r3, #10
 800182e:	2201      	movs	r2, #1
 8001830:	4621      	mov	r1, r4
 8001832:	4628      	mov	r0, r5
 8001834:	f000 fe84 	bl	8002540 <HAL_UART_Receive>
	} while( status != HAL_OK );
 8001838:	2800      	cmp	r0, #0
 800183a:	d1f7      	bne.n	800182c <_read+0x8>
}
 800183c:	4630      	mov	r0, r6
 800183e:	bd70      	pop	{r4, r5, r6, pc}
 8001840:	20002a0c 	.word	0x20002a0c

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_MspInit+0x38>)
 8001848:	2100      	movs	r1, #0
 800184a:	9100      	str	r1, [sp, #0]
 800184c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800184e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001852:	645a      	str	r2, [r3, #68]	; 0x44
 8001854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001856:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800185a:	9200      	str	r2, [sp, #0]
 800185c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	9101      	str	r1, [sp, #4]
 8001860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001862:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001872:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001874:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001876:	f000 b911 	b.w	8001a9c <HAL_NVIC_SetPriorityGrouping>
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8001882:	6801      	ldr	r1, [r0, #0]
 8001884:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <HAL_UART_MspInit+0x68>)
{
 8001886:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 800188a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001890:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001894:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8001896:	d001      	beq.n	800189c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001898:	b009      	add	sp, #36	; 0x24
 800189a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800189c:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	4811      	ldr	r0, [pc, #68]	; (80018ec <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80018aa:	6411      	str	r1, [r2, #64]	; 0x40
 80018ac:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80018ae:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 80018b2:	9100      	str	r1, [sp, #0]
 80018b4:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
 80018c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c8:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ce:	2200      	movs	r2, #0
 80018d0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018d4:	240c      	movs	r4, #12
 80018d6:	2502      	movs	r5, #2
 80018d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80018dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f000 f942 	bl	8001b68 <HAL_GPIO_Init>
}
 80018e4:	b009      	add	sp, #36	; 0x24
 80018e6:	bd30      	pop	{r4, r5, pc}
 80018e8:	40004400 	.word	0x40004400
 80018ec:	40020000 	.word	0x40020000

080018f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler>
 80018f2:	bf00      	nop

080018f4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <HardFault_Handler>
 80018f6:	bf00      	nop

080018f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler>
 80018fa:	bf00      	nop

080018fc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <BusFault_Handler>
 80018fe:	bf00      	nop

08001900 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler>
 8001902:	bf00      	nop

08001904 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <DebugMon_Handler>:
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <PendSV_Handler>:
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001910:	f000 b8b2 	b.w	8001a78 <HAL_IncTick>

08001914 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001914:	2001      	movs	r0, #1
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b508      	push	{r3, lr}
	errno = EINVAL;
 800191a:	f000 fe95 	bl	8002648 <__errno>
 800191e:	2316      	movs	r3, #22
 8001920:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001922:	f04f 30ff 	mov.w	r0, #4294967295
 8001926:	bd08      	pop	{r3, pc}

08001928 <_exit>:

void _exit (int status)
{
 8001928:	b508      	push	{r3, lr}
	errno = EINVAL;
 800192a:	f000 fe8d 	bl	8002648 <__errno>
 800192e:	2316      	movs	r3, #22
 8001930:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001932:	e7fe      	b.n	8001932 <_exit+0xa>

08001934 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop

0800193c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800193c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001940:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001942:	2000      	movs	r0, #0
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop

08001948 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001948:	2001      	movs	r0, #1
 800194a:	4770      	bx	lr

0800194c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800194c:	2000      	movs	r0, #0
 800194e:	4770      	bx	lr

08001950 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001952:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001954:	680b      	ldr	r3, [r1, #0]
{
 8001956:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4c0c      	ldr	r4, [pc, #48]	; (800198c <_sbrk+0x3c>)
 800195a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800195c:	b12b      	cbz	r3, 800196a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4418      	add	r0, r3
 8001960:	4290      	cmp	r0, r2
 8001962:	d807      	bhi.n	8001974 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001964:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <_sbrk+0x40>)
 800196c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4418      	add	r0, r3
 8001970:	4290      	cmp	r0, r2
 8001972:	d9f7      	bls.n	8001964 <_sbrk+0x14>
    errno = ENOMEM;
 8001974:	f000 fe68 	bl	8002648 <__errno>
 8001978:	230c      	movs	r3, #12
 800197a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd10      	pop	{r4, pc}
 8001984:	200001fc 	.word	0x200001fc
 8001988:	20020000 	.word	0x20020000
 800198c:	00000400 	.word	0x00000400
 8001990:	20002a68 	.word	0x20002a68

08001994 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <SystemInit+0x10>)
 8001996:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800199a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ae:	490e      	ldr	r1, [pc, #56]	; (80019e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b0:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019c4:	4c0b      	ldr	r4, [pc, #44]	; (80019f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019d2:	f7ff ffdf 	bl	8001994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d6:	f000 fe3d 	bl	8002654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7ff fe99 	bl	8001710 <main>
  bx  lr    
 80019de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019ec:	080069e8 	.word	0x080069e8
  ldr r2, =_sbss
 80019f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019f4:	20002a64 	.word	0x20002a64

080019f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>
	...

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019fe:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <HAL_InitTick+0x3c>)
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_InitTick+0x40>)
 8001a02:	7812      	ldrb	r2, [r2, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
{
 8001a06:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0c:	fbb0 f0f2 	udiv	r0, r0, r2
 8001a10:	fbb3 f0f0 	udiv	r0, r3, r0
 8001a14:	f000 f88e 	bl	8001b34 <HAL_SYSTICK_Config>
 8001a18:	b908      	cbnz	r0, 8001a1e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	2d0f      	cmp	r5, #15
 8001a1c:	d901      	bls.n	8001a22 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001a20:	bd38      	pop	{r3, r4, r5, pc}
 8001a22:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a24:	4602      	mov	r2, r0
 8001a26:	4629      	mov	r1, r5
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f000 f84a 	bl	8001ac4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_InitTick+0x44>)
 8001a32:	4620      	mov	r0, r4
 8001a34:	601d      	str	r5, [r3, #0]
}
 8001a36:	bd38      	pop	{r3, r4, r5, pc}
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000008 	.word	0x20000008

08001a44 <HAL_Init>:
{
 8001a44:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_Init+0x30>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a56:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a5e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f81b 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff ffc8 	bl	80019fc <HAL_InitTick>
  HAL_MspInit();
 8001a6c:	f7ff feea 	bl	8001844 <HAL_MspInit>
}
 8001a70:	2000      	movs	r0, #0
 8001a72:	bd08      	pop	{r3, pc}
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a78:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <HAL_IncTick+0x10>)
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <HAL_IncTick+0x14>)
 8001a7c:	6811      	ldr	r1, [r2, #0]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	440b      	add	r3, r1
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20002a50 	.word	0x20002a50
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a90:	4b01      	ldr	r3, [pc, #4]	; (8001a98 <HAL_GetTick+0x8>)
 8001a92:	6818      	ldr	r0, [r3, #0]
}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20002a50 	.word	0x20002a50

08001a9c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8001a9e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa2:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa4:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001aa8:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aaa:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8001abc:	60cb      	str	r3, [r1, #12]
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_NVIC_SetPriority+0x68>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001acc:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ace:	f1c3 0507 	rsb	r5, r3, #7
 8001ad2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	bf28      	it	cs
 8001ada:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001adc:	2c06      	cmp	r4, #6
 8001ade:	d919      	bls.n	8001b14 <HAL_NVIC_SetPriority+0x50>
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	f04f 34ff 	mov.w	r4, #4294967295
 8001ae6:	409c      	lsls	r4, r3
 8001ae8:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 34ff 	mov.w	r4, #4294967295
 8001af0:	40ac      	lsls	r4, r5
 8001af2:	ea21 0104 	bic.w	r1, r1, r4
 8001af6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001af8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afa:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001afe:	db0c      	blt.n	8001b1a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001b04:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001b08:	0109      	lsls	r1, r1, #4
 8001b0a:	b2c9      	uxtb	r1, r1
 8001b0c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b10:	bc30      	pop	{r4, r5}
 8001b12:	4770      	bx	lr
 8001b14:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	4613      	mov	r3, r2
 8001b18:	e7e8      	b.n	8001aec <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_NVIC_SetPriority+0x6c>)
 8001b1c:	f000 000f 	and.w	r0, r0, #15
 8001b20:	0109      	lsls	r1, r1, #4
 8001b22:	4403      	add	r3, r0
 8001b24:	b2c9      	uxtb	r1, r1
 8001b26:	7619      	strb	r1, [r3, #24]
 8001b28:	bc30      	pop	{r4, r5}
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00
 8001b30:	e000ecfc 	.word	0xe000ecfc

08001b34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	3801      	subs	r0, #1
 8001b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b3a:	d20e      	bcs.n	8001b5a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	4c08      	ldr	r4, [pc, #32]	; (8001b64 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	20f0      	movs	r0, #240	; 0xf0
 8001b46:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8001b52:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	6019      	str	r1, [r3, #0]
 8001b58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b6c:	468b      	mov	fp, r1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b6e:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8001d38 <HAL_GPIO_Init+0x1d0>
 8001b72:	6809      	ldr	r1, [r1, #0]
{
 8001b74:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001b78:	f04f 0a01 	mov.w	sl, #1
 8001b7c:	46d9      	mov	r9, fp
 8001b7e:	e002      	b.n	8001b86 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b80:	3301      	adds	r3, #1
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d078      	beq.n	8001c78 <HAL_GPIO_Init+0x110>
    ioposition = 0x01U << position;
 8001b86:	fa0a f203 	lsl.w	r2, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 8001b8e:	438a      	bics	r2, r1
 8001b90:	d1f6      	bne.n	8001b80 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8001b96:	f005 0203 	and.w	r2, r5, #3
 8001b9a:	1e54      	subs	r4, r2, #1
 8001b9c:	2c01      	cmp	r4, #1
 8001b9e:	ea4f 0743 	mov.w	r7, r3, lsl #1
 8001ba2:	d96c      	bls.n	8001c7e <HAL_GPIO_Init+0x116>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	2a03      	cmp	r2, #3
 8001ba6:	f040 80aa 	bne.w	8001cfe <HAL_GPIO_Init+0x196>
 8001baa:	40ba      	lsls	r2, r7
 8001bac:	43d4      	mvns	r4, r2
 8001bae:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 8001bb0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb2:	9c00      	ldr	r4, [sp, #0]
 8001bb4:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb6:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb8:	00ee      	lsls	r6, r5, #3
      GPIOx->MODER = temp;
 8001bba:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bbc:	d5e0      	bpl.n	8001b80 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	4c59      	ldr	r4, [pc, #356]	; (8001d24 <HAL_GPIO_Init+0x1bc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	9203      	str	r2, [sp, #12]
 8001bc4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bca:	6462      	str	r2, [r4, #68]	; 0x44
 8001bcc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001bce:	f023 0603 	bic.w	r6, r3, #3
 8001bd2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001bd6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bda:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8001bde:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be0:	f003 0403 	and.w	r4, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be4:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001be6:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	00a4      	lsls	r4, r4, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	40a2      	lsls	r2, r4
 8001bee:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf2:	4f4d      	ldr	r7, [pc, #308]	; (8001d28 <HAL_GPIO_Init+0x1c0>)
 8001bf4:	42b8      	cmp	r0, r7
 8001bf6:	d014      	beq.n	8001c22 <HAL_GPIO_Init+0xba>
 8001bf8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001bfc:	42b8      	cmp	r0, r7
 8001bfe:	f000 8083 	beq.w	8001d08 <HAL_GPIO_Init+0x1a0>
 8001c02:	4f4a      	ldr	r7, [pc, #296]	; (8001d2c <HAL_GPIO_Init+0x1c4>)
 8001c04:	42b8      	cmp	r0, r7
 8001c06:	f000 8083 	beq.w	8001d10 <HAL_GPIO_Init+0x1a8>
 8001c0a:	4f49      	ldr	r7, [pc, #292]	; (8001d30 <HAL_GPIO_Init+0x1c8>)
 8001c0c:	42b8      	cmp	r0, r7
 8001c0e:	f000 8084 	beq.w	8001d1a <HAL_GPIO_Init+0x1b2>
 8001c12:	4f48      	ldr	r7, [pc, #288]	; (8001d34 <HAL_GPIO_Init+0x1cc>)
 8001c14:	42b8      	cmp	r0, r7
 8001c16:	bf0c      	ite	eq
 8001c18:	2704      	moveq	r7, #4
 8001c1a:	2707      	movne	r7, #7
 8001c1c:	fa07 f404 	lsl.w	r4, r7, r4
 8001c20:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c22:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 8001c24:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2c:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	bf54      	ite	pl
 8001c30:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8001c32:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 8001c36:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8001c3a:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c3e:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001c40:	bf54      	ite	pl
 8001c42:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001c44:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 8001c48:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4c:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c50:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001c52:	bf54      	ite	pl
 8001c54:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001c56:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8001c5a:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 8001c5e:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c62:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c64:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001c68:	bf54      	ite	pl
 8001c6a:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8001c6c:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c70:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8001c72:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c76:	d186      	bne.n	8001b86 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001c78:	b005      	add	sp, #20
 8001c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8001c7e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	2403      	movs	r4, #3
 8001c82:	40bc      	lsls	r4, r7
 8001c84:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c88:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8001c8c:	40be      	lsls	r6, r7
 8001c8e:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8001c92:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c94:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c98:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9c:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ca0:	409e      	lsls	r6, r3
 8001ca2:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca6:	43e4      	mvns	r4, r4
 8001ca8:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 8001caa:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001cac:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cae:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb2:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8001cb6:	40be      	lsls	r6, r7
 8001cb8:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbc:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001cbe:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc0:	d001      	beq.n	8001cc6 <HAL_GPIO_Init+0x15e>
 8001cc2:	40ba      	lsls	r2, r7
 8001cc4:	e774      	b.n	8001bb0 <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 8001cc6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8001cca:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cce:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001cd2:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8001cd6:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001cdc:	240f      	movs	r4, #15
 8001cde:	fa04 f60e 	lsl.w	r6, r4, lr
 8001ce2:	9c01      	ldr	r4, [sp, #4]
 8001ce4:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce8:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cec:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cee:	fa04 f60e 	lsl.w	r6, r4, lr
 8001cf2:	9c01      	ldr	r4, [sp, #4]
 8001cf4:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8001cf6:	40ba      	lsls	r2, r7
 8001cf8:	f8c8 6020 	str.w	r6, [r8, #32]
 8001cfc:	e758      	b.n	8001bb0 <HAL_GPIO_Init+0x48>
 8001cfe:	2403      	movs	r4, #3
 8001d00:	40bc      	lsls	r4, r7
 8001d02:	43e4      	mvns	r4, r4
 8001d04:	9400      	str	r4, [sp, #0]
 8001d06:	e7d1      	b.n	8001cac <HAL_GPIO_Init+0x144>
 8001d08:	fa0a f404 	lsl.w	r4, sl, r4
 8001d0c:	4322      	orrs	r2, r4
 8001d0e:	e788      	b.n	8001c22 <HAL_GPIO_Init+0xba>
 8001d10:	2702      	movs	r7, #2
 8001d12:	fa07 f404 	lsl.w	r4, r7, r4
 8001d16:	4322      	orrs	r2, r4
 8001d18:	e783      	b.n	8001c22 <HAL_GPIO_Init+0xba>
 8001d1a:	2703      	movs	r7, #3
 8001d1c:	fa07 f404 	lsl.w	r4, r7, r4
 8001d20:	4322      	orrs	r2, r4
 8001d22:	e77e      	b.n	8001c22 <HAL_GPIO_Init+0xba>
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40013c00 	.word	0x40013c00

08001d3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d3c:	b902      	cbnz	r2, 8001d40 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d3e:	0409      	lsls	r1, r1, #16
 8001d40:	6181      	str	r1, [r0, #24]
  }
}
 8001d42:	4770      	bx	lr

08001d44 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d44:	2800      	cmp	r0, #0
 8001d46:	f000 81a5 	beq.w	8002094 <HAL_RCC_OscConfig+0x350>
{
 8001d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	6803      	ldr	r3, [r0, #0]
 8001d50:	07dd      	lsls	r5, r3, #31
{
 8001d52:	b082      	sub	sp, #8
 8001d54:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	d52f      	bpl.n	8001db8 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d58:	49ac      	ldr	r1, [pc, #688]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001d5a:	688a      	ldr	r2, [r1, #8]
 8001d5c:	f002 020c 	and.w	r2, r2, #12
 8001d60:	2a04      	cmp	r2, #4
 8001d62:	f000 80ec 	beq.w	8001f3e <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d66:	688a      	ldr	r2, [r1, #8]
 8001d68:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6c:	2a08      	cmp	r2, #8
 8001d6e:	f000 80e2 	beq.w	8001f36 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d72:	6863      	ldr	r3, [r4, #4]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d78:	f000 80eb 	beq.w	8001f52 <HAL_RCC_OscConfig+0x20e>
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d80:	f000 8178 	beq.w	8002074 <HAL_RCC_OscConfig+0x330>
 8001d84:	4da1      	ldr	r5, [pc, #644]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001d86:	682a      	ldr	r2, [r5, #0]
 8001d88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d8c:	602a      	str	r2, [r5, #0]
 8001d8e:	682a      	ldr	r2, [r5, #0]
 8001d90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d94:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 80e0 	bne.w	8001f5c <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fe78 	bl	8001a90 <HAL_GetTick>
 8001da0:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	e005      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fe74 	bl	8001a90 <HAL_GetTick>
 8001da8:	1b80      	subs	r0, r0, r6
 8001daa:	2864      	cmp	r0, #100	; 0x64
 8001dac:	f200 8100 	bhi.w	8001fb0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db0:	682b      	ldr	r3, [r5, #0]
 8001db2:	039b      	lsls	r3, r3, #14
 8001db4:	d4f6      	bmi.n	8001da4 <HAL_RCC_OscConfig+0x60>
 8001db6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db8:	079f      	lsls	r7, r3, #30
 8001dba:	d528      	bpl.n	8001e0e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dbc:	4a93      	ldr	r2, [pc, #588]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001dbe:	6891      	ldr	r1, [r2, #8]
 8001dc0:	f011 0f0c 	tst.w	r1, #12
 8001dc4:	f000 8090 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc8:	6891      	ldr	r1, [r2, #8]
 8001dca:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dce:	2908      	cmp	r1, #8
 8001dd0:	f000 8086 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dd4:	68e3      	ldr	r3, [r4, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8106 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4e8b      	ldr	r6, [pc, #556]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001de4:	f7ff fe54 	bl	8001a90 <HAL_GetTick>
 8001de8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dea:	e005      	b.n	8001df8 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff fe50 	bl	8001a90 <HAL_GetTick>
 8001df0:	1b40      	subs	r0, r0, r5
 8001df2:	2802      	cmp	r0, #2
 8001df4:	f200 80dc 	bhi.w	8001fb0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	6833      	ldr	r3, [r6, #0]
 8001dfa:	0798      	lsls	r0, r3, #30
 8001dfc:	d5f6      	bpl.n	8001dec <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	6833      	ldr	r3, [r6, #0]
 8001e00:	6922      	ldr	r2, [r4, #16]
 8001e02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e06:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e0a:	6033      	str	r3, [r6, #0]
 8001e0c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0e:	071a      	lsls	r2, r3, #28
 8001e10:	d452      	bmi.n	8001eb8 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e12:	0758      	lsls	r0, r3, #29
 8001e14:	d52f      	bpl.n	8001e76 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e16:	4a7d      	ldr	r2, [pc, #500]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001e18:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e1a:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	d07e      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8001e20:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4e7c      	ldr	r6, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x2d0>)
 8001e24:	6833      	ldr	r3, [r6, #0]
 8001e26:	05d9      	lsls	r1, r3, #23
 8001e28:	f140 80b2 	bpl.w	8001f90 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2c:	68a3      	ldr	r3, [r4, #8]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	f000 80c2 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x274>
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	f000 812f 	beq.w	8002098 <HAL_RCC_OscConfig+0x354>
 8001e3a:	4e74      	ldr	r6, [pc, #464]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001e3c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	6732      	str	r2, [r6, #112]	; 0x70
 8001e44:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001e46:	f022 0204 	bic.w	r2, r2, #4
 8001e4a:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f040 80b8 	bne.w	8001fc2 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff fe1d 	bl	8001a90 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e5a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	e005      	b.n	8001e6a <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7ff fe17 	bl	8001a90 <HAL_GetTick>
 8001e62:	1bc0      	subs	r0, r0, r7
 8001e64:	4540      	cmp	r0, r8
 8001e66:	f200 80a3 	bhi.w	8001fb0 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001e6c:	0798      	lsls	r0, r3, #30
 8001e6e:	d4f6      	bmi.n	8001e5e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e70:	2d00      	cmp	r5, #0
 8001e72:	f040 8109 	bne.w	8002088 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	69a0      	ldr	r0, [r4, #24]
 8001e78:	b1d0      	cbz	r0, 8001eb0 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e7a:	4d64      	ldr	r5, [pc, #400]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001e7c:	68ab      	ldr	r3, [r5, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	f000 80cc 	beq.w	8002020 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e88:	4b63      	ldr	r3, [pc, #396]	; (8002018 <HAL_RCC_OscConfig+0x2d4>)
 8001e8a:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e90:	f000 810c 	beq.w	80020ac <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fdfc 	bl	8001a90 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e98:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001e9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9c:	e005      	b.n	8001eaa <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff fdf7 	bl	8001a90 <HAL_GetTick>
 8001ea2:	1b40      	subs	r0, r0, r5
 8001ea4:	2802      	cmp	r0, #2
 8001ea6:	f200 8083 	bhi.w	8001fb0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	d4f6      	bmi.n	8001e9e <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001eb0:	2000      	movs	r0, #0
}
 8001eb2:	b002      	add	sp, #8
 8001eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eb8:	6963      	ldr	r3, [r4, #20]
 8001eba:	b303      	cbz	r3, 8001efe <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8001ebc:	4b57      	ldr	r3, [pc, #348]	; (800201c <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebe:	4e53      	ldr	r6, [pc, #332]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ec4:	f7ff fde4 	bl	8001a90 <HAL_GetTick>
 8001ec8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	e004      	b.n	8001ed6 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fde0 	bl	8001a90 <HAL_GetTick>
 8001ed0:	1b40      	subs	r0, r0, r5
 8001ed2:	2802      	cmp	r0, #2
 8001ed4:	d86c      	bhi.n	8001fb0 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001ed8:	079b      	lsls	r3, r3, #30
 8001eda:	d5f7      	bpl.n	8001ecc <HAL_RCC_OscConfig+0x188>
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	e798      	b.n	8001e12 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee0:	6852      	ldr	r2, [r2, #4]
 8001ee2:	0256      	lsls	r6, r2, #9
 8001ee4:	f53f af76 	bmi.w	8001dd4 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee8:	4a48      	ldr	r2, [pc, #288]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	0795      	lsls	r5, r2, #30
 8001eee:	d543      	bpl.n	8001f78 <HAL_RCC_OscConfig+0x234>
 8001ef0:	68e2      	ldr	r2, [r4, #12]
 8001ef2:	2a01      	cmp	r2, #1
 8001ef4:	d040      	beq.n	8001f78 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8001ef6:	2001      	movs	r0, #1
}
 8001ef8:	b002      	add	sp, #8
 8001efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001efe:	4a47      	ldr	r2, [pc, #284]	; (800201c <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	4e42      	ldr	r6, [pc, #264]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8001f02:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f04:	f7ff fdc4 	bl	8001a90 <HAL_GetTick>
 8001f08:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0a:	e004      	b.n	8001f16 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fdc0 	bl	8001a90 <HAL_GetTick>
 8001f10:	1b40      	subs	r0, r0, r5
 8001f12:	2802      	cmp	r0, #2
 8001f14:	d84c      	bhi.n	8001fb0 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f16:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001f18:	079f      	lsls	r7, r3, #30
 8001f1a:	d4f7      	bmi.n	8001f0c <HAL_RCC_OscConfig+0x1c8>
 8001f1c:	e7de      	b.n	8001edc <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6413      	str	r3, [r2, #64]	; 0x40
 8001f28:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f32:	2501      	movs	r5, #1
 8001f34:	e775      	b.n	8001e22 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	684a      	ldr	r2, [r1, #4]
 8001f38:	0250      	lsls	r0, r2, #9
 8001f3a:	f57f af1a 	bpl.w	8001d72 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	4a33      	ldr	r2, [pc, #204]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	0391      	lsls	r1, r2, #14
 8001f44:	f57f af38 	bpl.w	8001db8 <HAL_RCC_OscConfig+0x74>
 8001f48:	6862      	ldr	r2, [r4, #4]
 8001f4a:	2a00      	cmp	r2, #0
 8001f4c:	f47f af34 	bne.w	8001db8 <HAL_RCC_OscConfig+0x74>
 8001f50:	e7d1      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	4a2e      	ldr	r2, [pc, #184]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fd98 	bl	8001a90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f60:	4e2a      	ldr	r6, [pc, #168]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001f62:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f64:	e004      	b.n	8001f70 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f66:	f7ff fd93 	bl	8001a90 <HAL_GetTick>
 8001f6a:	1b40      	subs	r0, r0, r5
 8001f6c:	2864      	cmp	r0, #100	; 0x64
 8001f6e:	d81f      	bhi.n	8001fb0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f70:	6833      	ldr	r3, [r6, #0]
 8001f72:	039a      	lsls	r2, r3, #14
 8001f74:	d5f7      	bpl.n	8001f66 <HAL_RCC_OscConfig+0x222>
 8001f76:	e71e      	b.n	8001db6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4924      	ldr	r1, [pc, #144]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001f7a:	6920      	ldr	r0, [r4, #16]
 8001f7c:	680a      	ldr	r2, [r1, #0]
 8001f7e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001f82:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001f86:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f88:	071a      	lsls	r2, r3, #28
 8001f8a:	f57f af42 	bpl.w	8001e12 <HAL_RCC_OscConfig+0xce>
 8001f8e:	e793      	b.n	8001eb8 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f90:	6833      	ldr	r3, [r6, #0]
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f98:	f7ff fd7a 	bl	8001a90 <HAL_GetTick>
 8001f9c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	6833      	ldr	r3, [r6, #0]
 8001fa0:	05da      	lsls	r2, r3, #23
 8001fa2:	f53f af43 	bmi.w	8001e2c <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7ff fd73 	bl	8001a90 <HAL_GetTick>
 8001faa:	1bc0      	subs	r0, r0, r7
 8001fac:	2802      	cmp	r0, #2
 8001fae:	d9f6      	bls.n	8001f9e <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8001fb0:	2003      	movs	r0, #3
}
 8001fb2:	b002      	add	sp, #8
 8001fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
 8001fba:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fd65 	bl	8001a90 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc6:	4f11      	ldr	r7, [pc, #68]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001fc8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	e004      	b.n	8001fda <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7ff fd5e 	bl	8001a90 <HAL_GetTick>
 8001fd4:	1b80      	subs	r0, r0, r6
 8001fd6:	4540      	cmp	r0, r8
 8001fd8:	d8ea      	bhi.n	8001fb0 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fdc:	079b      	lsls	r3, r3, #30
 8001fde:	d5f7      	bpl.n	8001fd0 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 8001fe0:	2d00      	cmp	r5, #0
 8001fe2:	f43f af48 	beq.w	8001e76 <HAL_RCC_OscConfig+0x132>
 8001fe6:	e04f      	b.n	8002088 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 8001fe8:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	4e08      	ldr	r6, [pc, #32]	; (800200c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001fec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fee:	f7ff fd4f 	bl	8001a90 <HAL_GetTick>
 8001ff2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff4:	e004      	b.n	8002000 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fd4b 	bl	8001a90 <HAL_GetTick>
 8001ffa:	1b40      	subs	r0, r0, r5
 8001ffc:	2802      	cmp	r0, #2
 8001ffe:	d8d7      	bhi.n	8001fb0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002000:	6833      	ldr	r3, [r6, #0]
 8002002:	0799      	lsls	r1, r3, #30
 8002004:	d4f7      	bmi.n	8001ff6 <HAL_RCC_OscConfig+0x2b2>
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	e701      	b.n	8001e0e <HAL_RCC_OscConfig+0xca>
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	42470000 	.word	0x42470000
 8002014:	40007000 	.word	0x40007000
 8002018:	42470060 	.word	0x42470060
 800201c:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002020:	2801      	cmp	r0, #1
 8002022:	f43f af46 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8002026:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002028:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800202e:	4291      	cmp	r1, r2
 8002030:	f47f af61 	bne.w	8001ef6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002034:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002036:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	4291      	cmp	r1, r2
 800203c:	f47f af5b 	bne.w	8001ef6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002040:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002042:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002046:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002048:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800204c:	f47f af53 	bne.w	8001ef6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002050:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002052:	0852      	lsrs	r2, r2, #1
 8002054:	3a01      	subs	r2, #1
 8002056:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800205a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800205e:	f47f af4a 	bne.w	8001ef6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002062:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002064:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002068:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 800206c:	bf14      	ite	ne
 800206e:	2001      	movne	r0, #1
 8002070:	2000      	moveq	r0, #0
 8002072:	e71e      	b.n	8001eb2 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_OscConfig+0x3c4>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002084:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002086:	e769      	b.n	8001f5c <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002088:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <HAL_RCC_OscConfig+0x3c4>)
 800208a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	e6f0      	b.n	8001e76 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002094:	2001      	movs	r0, #1
}
 8002096:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x3c4>)
 800209a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800209c:	f042 0204 	orr.w	r2, r2, #4
 80020a0:	671a      	str	r2, [r3, #112]	; 0x70
 80020a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020aa:	e78a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80020ac:	f7ff fcf0 	bl	8001a90 <HAL_GetTick>
 80020b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	e005      	b.n	80020c0 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff fcec 	bl	8001a90 <HAL_GetTick>
 80020b8:	1b80      	subs	r0, r0, r6
 80020ba:	2802      	cmp	r0, #2
 80020bc:	f63f af78 	bhi.w	8001fb0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	0199      	lsls	r1, r3, #6
 80020c4:	d4f6      	bmi.n	80020b4 <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020c6:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80020ca:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80020ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80020d0:	4333      	orrs	r3, r6
 80020d2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80020d6:	0852      	lsrs	r2, r2, #1
 80020d8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80020dc:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80020de:	490b      	ldr	r1, [pc, #44]	; (800210c <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e0:	4e09      	ldr	r6, [pc, #36]	; (8002108 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80020e6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80020ea:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80020ec:	f7ff fcd0 	bl	8001a90 <HAL_GetTick>
 80020f0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	e005      	b.n	8002100 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff fccc 	bl	8001a90 <HAL_GetTick>
 80020f8:	1b00      	subs	r0, r0, r4
 80020fa:	2802      	cmp	r0, #2
 80020fc:	f63f af58 	bhi.w	8001fb0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002100:	6833      	ldr	r3, [r6, #0]
 8002102:	019a      	lsls	r2, r3, #6
 8002104:	d5f6      	bpl.n	80020f4 <HAL_RCC_OscConfig+0x3b0>
 8002106:	e6d3      	b.n	8001eb0 <HAL_RCC_OscConfig+0x16c>
 8002108:	40023800 	.word	0x40023800
 800210c:	42470060 	.word	0x42470060

08002110 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002110:	4917      	ldr	r1, [pc, #92]	; (8002170 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8002112:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002114:	688b      	ldr	r3, [r1, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b04      	cmp	r3, #4
 800211c:	d01b      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x46>
 800211e:	2b08      	cmp	r3, #8
 8002120:	d117      	bne.n	8002152 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002122:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002124:	684b      	ldr	r3, [r1, #4]
 8002126:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800212a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800212e:	d114      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002130:	6849      	ldr	r1, [r1, #4]
 8002132:	4810      	ldr	r0, [pc, #64]	; (8002174 <HAL_RCC_GetSysClockFreq+0x64>)
 8002134:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002138:	fba1 0100 	umull	r0, r1, r1, r0
 800213c:	f7fe fd9c 	bl	8000c78 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_GetSysClockFreq+0x60>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002148:	3301      	adds	r3, #1
 800214a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800214c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002150:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002152:	4808      	ldr	r0, [pc, #32]	; (8002174 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002154:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002156:	4808      	ldr	r0, [pc, #32]	; (8002178 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002158:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215a:	684b      	ldr	r3, [r1, #4]
 800215c:	4806      	ldr	r0, [pc, #24]	; (8002178 <HAL_RCC_GetSysClockFreq+0x68>)
 800215e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002162:	fba3 0100 	umull	r0, r1, r3, r0
 8002166:	2300      	movs	r3, #0
 8002168:	f7fe fd86 	bl	8000c78 <__aeabi_uldivmod>
 800216c:	e7e8      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x30>
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	00f42400 	.word	0x00f42400
 8002178:	007a1200 	.word	0x007a1200

0800217c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800217c:	2800      	cmp	r0, #0
 800217e:	f000 8087 	beq.w	8002290 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002182:	4a48      	ldr	r2, [pc, #288]	; (80022a4 <HAL_RCC_ClockConfig+0x128>)
 8002184:	6813      	ldr	r3, [r2, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	428b      	cmp	r3, r1
{
 800218c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002190:	460d      	mov	r5, r1
 8002192:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002194:	d209      	bcs.n	80021aa <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	b2cb      	uxtb	r3, r1
 8002198:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	6813      	ldr	r3, [r2, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d002      	beq.n	80021aa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80021a4:	2001      	movs	r0, #1
}
 80021a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	0798      	lsls	r0, r3, #30
 80021ae:	d514      	bpl.n	80021da <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	0759      	lsls	r1, r3, #29
 80021b2:	d504      	bpl.n	80021be <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b4:	493c      	ldr	r1, [pc, #240]	; (80022a8 <HAL_RCC_ClockConfig+0x12c>)
 80021b6:	688a      	ldr	r2, [r1, #8]
 80021b8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80021bc:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	071a      	lsls	r2, r3, #28
 80021c0:	d504      	bpl.n	80021cc <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c2:	4939      	ldr	r1, [pc, #228]	; (80022a8 <HAL_RCC_ClockConfig+0x12c>)
 80021c4:	688a      	ldr	r2, [r1, #8]
 80021c6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80021ca:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4936      	ldr	r1, [pc, #216]	; (80022a8 <HAL_RCC_ClockConfig+0x12c>)
 80021ce:	68a0      	ldr	r0, [r4, #8]
 80021d0:	688a      	ldr	r2, [r1, #8]
 80021d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021d6:	4302      	orrs	r2, r0
 80021d8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	07df      	lsls	r7, r3, #31
 80021dc:	d521      	bpl.n	8002222 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	6862      	ldr	r2, [r4, #4]
 80021e0:	2a01      	cmp	r2, #1
 80021e2:	d057      	beq.n	8002294 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e4:	1e93      	subs	r3, r2, #2
 80021e6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_RCC_ClockConfig+0x12c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ec:	d94d      	bls.n	800228a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ee:	0799      	lsls	r1, r3, #30
 80021f0:	d5d8      	bpl.n	80021a4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4e2d      	ldr	r6, [pc, #180]	; (80022a8 <HAL_RCC_ClockConfig+0x12c>)
 80021f4:	68b3      	ldr	r3, [r6, #8]
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80021fe:	f7ff fc47 	bl	8001a90 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002202:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002206:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002208:	e004      	b.n	8002214 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220a:	f7ff fc41 	bl	8001a90 <HAL_GetTick>
 800220e:	1bc0      	subs	r0, r0, r7
 8002210:	4540      	cmp	r0, r8
 8002212:	d844      	bhi.n	800229e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002214:	68b3      	ldr	r3, [r6, #8]
 8002216:	6862      	ldr	r2, [r4, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002220:	d1f3      	bne.n	800220a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002222:	4a20      	ldr	r2, [pc, #128]	; (80022a4 <HAL_RCC_ClockConfig+0x128>)
 8002224:	6813      	ldr	r3, [r2, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	42ab      	cmp	r3, r5
 800222c:	d906      	bls.n	800223c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	b2eb      	uxtb	r3, r5
 8002230:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	42ab      	cmp	r3, r5
 800223a:	d1b3      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	075a      	lsls	r2, r3, #29
 8002240:	d506      	bpl.n	8002250 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002242:	4919      	ldr	r1, [pc, #100]	; (80022a8 <HAL_RCC_ClockConfig+0x12c>)
 8002244:	68e0      	ldr	r0, [r4, #12]
 8002246:	688a      	ldr	r2, [r1, #8]
 8002248:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800224c:	4302      	orrs	r2, r0
 800224e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	071b      	lsls	r3, r3, #28
 8002252:	d507      	bpl.n	8002264 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <HAL_RCC_ClockConfig+0x12c>)
 8002256:	6921      	ldr	r1, [r4, #16]
 8002258:	6893      	ldr	r3, [r2, #8]
 800225a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800225e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002262:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002264:	f7ff ff54 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 8002268:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <HAL_RCC_ClockConfig+0x12c>)
 800226a:	4c10      	ldr	r4, [pc, #64]	; (80022ac <HAL_RCC_ClockConfig+0x130>)
 800226c:	6892      	ldr	r2, [r2, #8]
 800226e:	4910      	ldr	r1, [pc, #64]	; (80022b0 <HAL_RCC_ClockConfig+0x134>)
 8002270:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002274:	4603      	mov	r3, r0
 8002276:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002278:	480e      	ldr	r0, [pc, #56]	; (80022b4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800227c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002280:	f7ff fbbc 	bl	80019fc <HAL_InitTick>
  return HAL_OK;
 8002284:	2000      	movs	r0, #0
}
 8002286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	0198      	lsls	r0, r3, #6
 800228c:	d4b1      	bmi.n	80021f2 <HAL_RCC_ClockConfig+0x76>
 800228e:	e789      	b.n	80021a4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002290:	2001      	movs	r0, #1
}
 8002292:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_RCC_ClockConfig+0x12c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	039e      	lsls	r6, r3, #14
 800229a:	d4aa      	bmi.n	80021f2 <HAL_RCC_ClockConfig+0x76>
 800229c:	e782      	b.n	80021a4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800229e:	2003      	movs	r0, #3
 80022a0:	e781      	b.n	80021a6 <HAL_RCC_ClockConfig+0x2a>
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00
 80022a8:	40023800 	.word	0x40023800
 80022ac:	080065c4 	.word	0x080065c4
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000008 	.word	0x20000008

080022b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x14>)
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80022bc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80022be:	4905      	ldr	r1, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022c0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80022c4:	6808      	ldr	r0, [r1, #0]
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80022c8:	40d8      	lsrs	r0, r3
 80022ca:	4770      	bx	lr
 80022cc:	40023800 	.word	0x40023800
 80022d0:	080065d4 	.word	0x080065d4
 80022d4:	20000000 	.word	0x20000000

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x14>)
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80022dc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80022de:	4905      	ldr	r1, [pc, #20]	; (80022f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022e0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80022e4:	6808      	ldr	r0, [r1, #0]
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80022e8:	40d8      	lsrs	r0, r3
 80022ea:	4770      	bx	lr
 80022ec:	40023800 	.word	0x40023800
 80022f0:	080065d4 	.word	0x080065d4
 80022f4:	20000000 	.word	0x20000000

080022f8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f8:	2800      	cmp	r0, #0
 80022fa:	f000 8090 	beq.w	800241e <HAL_UART_Init+0x126>
{
 80022fe:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002300:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002304:	4604      	mov	r4, r0
 8002306:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8082 	beq.w	8002414 <HAL_UART_Init+0x11c>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002310:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002312:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8002314:	2224      	movs	r2, #36	; 0x24
 8002316:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800231a:	68d8      	ldr	r0, [r3, #12]
 800231c:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002320:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002324:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002326:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002328:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800232a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800232e:	4329      	orrs	r1, r5
 8002330:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002332:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002334:	6965      	ldr	r5, [r4, #20]
 8002336:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8002338:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800233c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800233e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002342:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800234c:	4935      	ldr	r1, [pc, #212]	; (8002424 <HAL_UART_Init+0x12c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800234e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002352:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002354:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002356:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002358:	d035      	beq.n	80023c6 <HAL_UART_Init+0xce>
 800235a:	4a33      	ldr	r2, [pc, #204]	; (8002428 <HAL_UART_Init+0x130>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d032      	beq.n	80023c6 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002360:	f7ff ffaa 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002364:	69e3      	ldr	r3, [r4, #28]
 8002366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800236a:	d032      	beq.n	80023d2 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800236c:	6863      	ldr	r3, [r4, #4]
 800236e:	4e2f      	ldr	r6, [pc, #188]	; (800242c <HAL_UART_Init+0x134>)
 8002370:	2119      	movs	r1, #25
 8002372:	009a      	lsls	r2, r3, #2
 8002374:	fba0 0101 	umull	r0, r1, r0, r1
 8002378:	0f9b      	lsrs	r3, r3, #30
 800237a:	f7fe fc7d 	bl	8000c78 <__aeabi_uldivmod>
 800237e:	fba6 2500 	umull	r2, r5, r6, r0
 8002382:	096d      	lsrs	r5, r5, #5
 8002384:	2164      	movs	r1, #100	; 0x64
 8002386:	fb01 0215 	mls	r2, r1, r5, r0
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	3232      	adds	r2, #50	; 0x32
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	fba6 1202 	umull	r1, r2, r6, r2
 8002394:	012d      	lsls	r5, r5, #4
 8002396:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 800239a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023aa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80023ac:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ae:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80023b0:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80023b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b8:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023ba:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023be:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80023c2:	4628      	mov	r0, r5
}
 80023c4:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80023c6:	f7ff ff87 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ca:	69e3      	ldr	r3, [r4, #28]
 80023cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d0:	d1cc      	bne.n	800236c <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023d2:	6862      	ldr	r2, [r4, #4]
 80023d4:	4e15      	ldr	r6, [pc, #84]	; (800242c <HAL_UART_Init+0x134>)
 80023d6:	1892      	adds	r2, r2, r2
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	f04f 0119 	mov.w	r1, #25
 80023e0:	415b      	adcs	r3, r3
 80023e2:	fba0 0101 	umull	r0, r1, r0, r1
 80023e6:	f7fe fc47 	bl	8000c78 <__aeabi_uldivmod>
 80023ea:	fba6 2100 	umull	r2, r1, r6, r0
 80023ee:	094d      	lsrs	r5, r1, #5
 80023f0:	2164      	movs	r1, #100	; 0x64
 80023f2:	fb01 0215 	mls	r2, r1, r5, r0
 80023f6:	00d2      	lsls	r2, r2, #3
 80023f8:	3232      	adds	r2, #50	; 0x32
 80023fa:	fba6 1202 	umull	r1, r2, r6, r2
 80023fe:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8002402:	0912      	lsrs	r2, r2, #4
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800240a:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800240e:	440a      	add	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	e7c3      	b.n	800239c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8002414:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002418:	f7ff fa32 	bl	8001880 <HAL_UART_MspInit>
 800241c:	e778      	b.n	8002310 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 800241e:	2001      	movs	r0, #1
}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40011000 	.word	0x40011000
 8002428:	40011400 	.word	0x40011400
 800242c:	51eb851f 	.word	0x51eb851f

08002430 <HAL_UART_Transmit>:
{
 8002430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002434:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002436:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800243a:	2820      	cmp	r0, #32
 800243c:	d168      	bne.n	8002510 <HAL_UART_Transmit+0xe0>
    if ((pData == NULL) || (Size == 0U))
 800243e:	4688      	mov	r8, r1
 8002440:	2900      	cmp	r1, #0
 8002442:	d040      	beq.n	80024c6 <HAL_UART_Transmit+0x96>
 8002444:	4617      	mov	r7, r2
 8002446:	2a00      	cmp	r2, #0
 8002448:	d03d      	beq.n	80024c6 <HAL_UART_Transmit+0x96>
 800244a:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 800244c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002450:	2b01      	cmp	r3, #1
 8002452:	d05d      	beq.n	8002510 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002454:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8002456:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002458:	f04f 0900 	mov.w	r9, #0
 800245c:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 8002460:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002464:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002468:	f7ff fb12 	bl	8001a90 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800246c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800246e:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002474:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002476:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002478:	d04d      	beq.n	8002516 <HAL_UART_Transmit+0xe6>
    while (huart->TxXferCount > 0U)
 800247a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800247c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800247e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8002480:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002484:	2b00      	cmp	r3, #0
 8002486:	d058      	beq.n	800253a <HAL_UART_Transmit+0x10a>
 8002488:	6822      	ldr	r2, [r4, #0]
 800248a:	1c69      	adds	r1, r5, #1
 800248c:	d11e      	bne.n	80024cc <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	061b      	lsls	r3, r3, #24
 8002492:	d5fc      	bpl.n	800248e <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8002494:	f1b8 0f00 	cmp.w	r8, #0
 8002498:	d035      	beq.n	8002506 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800249a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800249e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80024a0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024a8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ec      	bne.n	800248a <HAL_UART_Transmit+0x5a>
 80024b0:	1c68      	adds	r0, r5, #1
 80024b2:	d136      	bne.n	8002522 <HAL_UART_Transmit+0xf2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b4:	6813      	ldr	r3, [r2, #0]
 80024b6:	0659      	lsls	r1, r3, #25
 80024b8:	d5fc      	bpl.n	80024b4 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80024ba:	2320      	movs	r3, #32
 80024bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80024c0:	2000      	movs	r0, #0
}
 80024c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80024c6:	2001      	movs	r0, #1
}
 80024c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024cc:	6813      	ldr	r3, [r2, #0]
 80024ce:	061f      	lsls	r7, r3, #24
 80024d0:	d4e0      	bmi.n	8002494 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024d2:	b12d      	cbz	r5, 80024e0 <HAL_UART_Transmit+0xb0>
 80024d4:	f7ff fadc 	bl	8001a90 <HAL_GetTick>
 80024d8:	1b80      	subs	r0, r0, r6
 80024da:	4285      	cmp	r5, r0
 80024dc:	6822      	ldr	r2, [r4, #0]
 80024de:	d2d4      	bcs.n	800248a <HAL_UART_Transmit+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024e0:	68d3      	ldr	r3, [r2, #12]
 80024e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024e6:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e8:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80024ea:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ec:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 80024f0:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f2:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80024f4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 80024f8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80024fc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      return HAL_TIMEOUT;
 8002500:	2003      	movs	r0, #3
}
 8002502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002506:	f839 3b02 	ldrh.w	r3, [r9], #2
 800250a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250e:	e7c6      	b.n	800249e <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8002510:	2002      	movs	r0, #2
}
 8002512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002516:	6923      	ldr	r3, [r4, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ae      	bne.n	800247a <HAL_UART_Transmit+0x4a>
 800251c:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800251e:	4698      	mov	r8, r3
 8002520:	e7ab      	b.n	800247a <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002522:	6813      	ldr	r3, [r2, #0]
 8002524:	065b      	lsls	r3, r3, #25
 8002526:	d4c8      	bmi.n	80024ba <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002528:	2d00      	cmp	r5, #0
 800252a:	d0d9      	beq.n	80024e0 <HAL_UART_Transmit+0xb0>
 800252c:	f7ff fab0 	bl	8001a90 <HAL_GetTick>
 8002530:	1b80      	subs	r0, r0, r6
 8002532:	4285      	cmp	r5, r0
 8002534:	6822      	ldr	r2, [r4, #0]
 8002536:	d2bb      	bcs.n	80024b0 <HAL_UART_Transmit+0x80>
 8002538:	e7d2      	b.n	80024e0 <HAL_UART_Transmit+0xb0>
 800253a:	6822      	ldr	r2, [r4, #0]
 800253c:	e7b8      	b.n	80024b0 <HAL_UART_Transmit+0x80>
 800253e:	bf00      	nop

08002540 <HAL_UART_Receive>:
{
 8002540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002544:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8002546:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800254a:	2820      	cmp	r0, #32
 800254c:	d173      	bne.n	8002636 <HAL_UART_Receive+0xf6>
    if ((pData == NULL) || (Size == 0U))
 800254e:	4688      	mov	r8, r1
 8002550:	2900      	cmp	r1, #0
 8002552:	d046      	beq.n	80025e2 <HAL_UART_Receive+0xa2>
 8002554:	4617      	mov	r7, r2
 8002556:	2a00      	cmp	r2, #0
 8002558:	d043      	beq.n	80025e2 <HAL_UART_Receive+0xa2>
 800255a:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 800255c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002560:	2b01      	cmp	r3, #1
 8002562:	d068      	beq.n	8002636 <HAL_UART_Receive+0xf6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002564:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002566:	f04f 0900 	mov.w	r9, #0
    __HAL_LOCK(huart);
 800256a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256c:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 8002570:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002574:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002578:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    tickstart = HAL_GetTick();
 800257c:	f7ff fa88 	bl	8001a90 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002580:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8002582:	85a7      	strh	r7, [r4, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002588:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 800258a:	85e7      	strh	r7, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800258c:	d056      	beq.n	800263c <HAL_UART_Receive+0xfc>
    while (huart->RxXferCount > 0U)
 800258e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8002590:	2200      	movs	r2, #0
    while (huart->RxXferCount > 0U)
 8002592:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8002594:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 8002598:	b1eb      	cbz	r3, 80025d6 <HAL_UART_Receive+0x96>
 800259a:	1c68      	adds	r0, r5, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	d123      	bne.n	80025e8 <HAL_UART_Receive+0xa8>
 80025a0:	6813      	ldr	r3, [r2, #0]
 80025a2:	0699      	lsls	r1, r3, #26
 80025a4:	d5fc      	bpl.n	80025a0 <HAL_UART_Receive+0x60>
      if (pdata8bits == NULL)
 80025a6:	f1b8 0f00 	cmp.w	r8, #0
 80025aa:	d03e      	beq.n	800262a <HAL_UART_Receive+0xea>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025ac:	68a3      	ldr	r3, [r4, #8]
 80025ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b2:	d004      	beq.n	80025be <HAL_UART_Receive+0x7e>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d134      	bne.n	8002622 <HAL_UART_Receive+0xe2>
 80025b8:	6923      	ldr	r3, [r4, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d131      	bne.n	8002622 <HAL_UART_Receive+0xe2>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025be:	6853      	ldr	r3, [r2, #4]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f808 3b01 	strb.w	r3, [r8], #1
      huart->RxXferCount--;
 80025c6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80025c8:	3a01      	subs	r2, #1
 80025ca:	b292      	uxth	r2, r2
 80025cc:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80025ce:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e1      	bne.n	800259a <HAL_UART_Receive+0x5a>
    huart->RxState = HAL_UART_STATE_READY;
 80025d6:	2320      	movs	r3, #32
 80025d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80025dc:	2000      	movs	r0, #0
}
 80025de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80025e2:	2001      	movs	r0, #1
}
 80025e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e8:	6813      	ldr	r3, [r2, #0]
 80025ea:	069b      	lsls	r3, r3, #26
 80025ec:	d4db      	bmi.n	80025a6 <HAL_UART_Receive+0x66>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025ee:	b12d      	cbz	r5, 80025fc <HAL_UART_Receive+0xbc>
 80025f0:	f7ff fa4e 	bl	8001a90 <HAL_GetTick>
 80025f4:	1b80      	subs	r0, r0, r6
 80025f6:	4285      	cmp	r5, r0
 80025f8:	d2cf      	bcs.n	800259a <HAL_UART_Receive+0x5a>
 80025fa:	6822      	ldr	r2, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025fc:	68d3      	ldr	r3, [r2, #12]
 80025fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002602:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002604:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002606:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002608:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 800260c:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002610:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8002614:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8002618:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        return HAL_TIMEOUT;
 800261c:	2003      	movs	r0, #3
}
 800261e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002622:	6853      	ldr	r3, [r2, #4]
 8002624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002628:	e7cb      	b.n	80025c2 <HAL_UART_Receive+0x82>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800262a:	6853      	ldr	r3, [r2, #4]
 800262c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002630:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 8002634:	e7c7      	b.n	80025c6 <HAL_UART_Receive+0x86>
    return HAL_BUSY;
 8002636:	2002      	movs	r0, #2
}
 8002638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263c:	6923      	ldr	r3, [r4, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1a5      	bne.n	800258e <HAL_UART_Receive+0x4e>
 8002642:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8002644:	4698      	mov	r8, r3
 8002646:	e7a2      	b.n	800258e <HAL_UART_Receive+0x4e>

08002648 <__errno>:
 8002648:	4b01      	ldr	r3, [pc, #4]	; (8002650 <__errno+0x8>)
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	2000000c 	.word	0x2000000c

08002654 <__libc_init_array>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	4d0d      	ldr	r5, [pc, #52]	; (800268c <__libc_init_array+0x38>)
 8002658:	4c0d      	ldr	r4, [pc, #52]	; (8002690 <__libc_init_array+0x3c>)
 800265a:	1b64      	subs	r4, r4, r5
 800265c:	10a4      	asrs	r4, r4, #2
 800265e:	2600      	movs	r6, #0
 8002660:	42a6      	cmp	r6, r4
 8002662:	d109      	bne.n	8002678 <__libc_init_array+0x24>
 8002664:	4d0b      	ldr	r5, [pc, #44]	; (8002694 <__libc_init_array+0x40>)
 8002666:	4c0c      	ldr	r4, [pc, #48]	; (8002698 <__libc_init_array+0x44>)
 8002668:	f003 fc7c 	bl	8005f64 <_init>
 800266c:	1b64      	subs	r4, r4, r5
 800266e:	10a4      	asrs	r4, r4, #2
 8002670:	2600      	movs	r6, #0
 8002672:	42a6      	cmp	r6, r4
 8002674:	d105      	bne.n	8002682 <__libc_init_array+0x2e>
 8002676:	bd70      	pop	{r4, r5, r6, pc}
 8002678:	f855 3b04 	ldr.w	r3, [r5], #4
 800267c:	4798      	blx	r3
 800267e:	3601      	adds	r6, #1
 8002680:	e7ee      	b.n	8002660 <__libc_init_array+0xc>
 8002682:	f855 3b04 	ldr.w	r3, [r5], #4
 8002686:	4798      	blx	r3
 8002688:	3601      	adds	r6, #1
 800268a:	e7f2      	b.n	8002672 <__libc_init_array+0x1e>
 800268c:	080069e0 	.word	0x080069e0
 8002690:	080069e0 	.word	0x080069e0
 8002694:	080069e0 	.word	0x080069e0
 8002698:	080069e4 	.word	0x080069e4

0800269c <malloc>:
 800269c:	4b02      	ldr	r3, [pc, #8]	; (80026a8 <malloc+0xc>)
 800269e:	4601      	mov	r1, r0
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f000 b85b 	b.w	800275c <_malloc_r>
 80026a6:	bf00      	nop
 80026a8:	2000000c 	.word	0x2000000c

080026ac <memset>:
 80026ac:	4402      	add	r2, r0
 80026ae:	4603      	mov	r3, r0
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d100      	bne.n	80026b6 <memset+0xa>
 80026b4:	4770      	bx	lr
 80026b6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ba:	e7f9      	b.n	80026b0 <memset+0x4>

080026bc <_free_r>:
 80026bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026be:	2900      	cmp	r1, #0
 80026c0:	d048      	beq.n	8002754 <_free_r+0x98>
 80026c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026c6:	9001      	str	r0, [sp, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f1a1 0404 	sub.w	r4, r1, #4
 80026ce:	bfb8      	it	lt
 80026d0:	18e4      	addlt	r4, r4, r3
 80026d2:	f002 f825 	bl	8004720 <__malloc_lock>
 80026d6:	4a20      	ldr	r2, [pc, #128]	; (8002758 <_free_r+0x9c>)
 80026d8:	9801      	ldr	r0, [sp, #4]
 80026da:	6813      	ldr	r3, [r2, #0]
 80026dc:	4615      	mov	r5, r2
 80026de:	b933      	cbnz	r3, 80026ee <_free_r+0x32>
 80026e0:	6063      	str	r3, [r4, #4]
 80026e2:	6014      	str	r4, [r2, #0]
 80026e4:	b003      	add	sp, #12
 80026e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80026ea:	f002 b81f 	b.w	800472c <__malloc_unlock>
 80026ee:	42a3      	cmp	r3, r4
 80026f0:	d90b      	bls.n	800270a <_free_r+0x4e>
 80026f2:	6821      	ldr	r1, [r4, #0]
 80026f4:	1862      	adds	r2, r4, r1
 80026f6:	4293      	cmp	r3, r2
 80026f8:	bf04      	itt	eq
 80026fa:	681a      	ldreq	r2, [r3, #0]
 80026fc:	685b      	ldreq	r3, [r3, #4]
 80026fe:	6063      	str	r3, [r4, #4]
 8002700:	bf04      	itt	eq
 8002702:	1852      	addeq	r2, r2, r1
 8002704:	6022      	streq	r2, [r4, #0]
 8002706:	602c      	str	r4, [r5, #0]
 8002708:	e7ec      	b.n	80026e4 <_free_r+0x28>
 800270a:	461a      	mov	r2, r3
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b10b      	cbz	r3, 8002714 <_free_r+0x58>
 8002710:	42a3      	cmp	r3, r4
 8002712:	d9fa      	bls.n	800270a <_free_r+0x4e>
 8002714:	6811      	ldr	r1, [r2, #0]
 8002716:	1855      	adds	r5, r2, r1
 8002718:	42a5      	cmp	r5, r4
 800271a:	d10b      	bne.n	8002734 <_free_r+0x78>
 800271c:	6824      	ldr	r4, [r4, #0]
 800271e:	4421      	add	r1, r4
 8002720:	1854      	adds	r4, r2, r1
 8002722:	42a3      	cmp	r3, r4
 8002724:	6011      	str	r1, [r2, #0]
 8002726:	d1dd      	bne.n	80026e4 <_free_r+0x28>
 8002728:	681c      	ldr	r4, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	6053      	str	r3, [r2, #4]
 800272e:	4421      	add	r1, r4
 8002730:	6011      	str	r1, [r2, #0]
 8002732:	e7d7      	b.n	80026e4 <_free_r+0x28>
 8002734:	d902      	bls.n	800273c <_free_r+0x80>
 8002736:	230c      	movs	r3, #12
 8002738:	6003      	str	r3, [r0, #0]
 800273a:	e7d3      	b.n	80026e4 <_free_r+0x28>
 800273c:	6825      	ldr	r5, [r4, #0]
 800273e:	1961      	adds	r1, r4, r5
 8002740:	428b      	cmp	r3, r1
 8002742:	bf04      	itt	eq
 8002744:	6819      	ldreq	r1, [r3, #0]
 8002746:	685b      	ldreq	r3, [r3, #4]
 8002748:	6063      	str	r3, [r4, #4]
 800274a:	bf04      	itt	eq
 800274c:	1949      	addeq	r1, r1, r5
 800274e:	6021      	streq	r1, [r4, #0]
 8002750:	6054      	str	r4, [r2, #4]
 8002752:	e7c7      	b.n	80026e4 <_free_r+0x28>
 8002754:	b003      	add	sp, #12
 8002756:	bd30      	pop	{r4, r5, pc}
 8002758:	20000200 	.word	0x20000200

0800275c <_malloc_r>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	1ccd      	adds	r5, r1, #3
 8002760:	f025 0503 	bic.w	r5, r5, #3
 8002764:	3508      	adds	r5, #8
 8002766:	2d0c      	cmp	r5, #12
 8002768:	bf38      	it	cc
 800276a:	250c      	movcc	r5, #12
 800276c:	2d00      	cmp	r5, #0
 800276e:	4606      	mov	r6, r0
 8002770:	db01      	blt.n	8002776 <_malloc_r+0x1a>
 8002772:	42a9      	cmp	r1, r5
 8002774:	d903      	bls.n	800277e <_malloc_r+0x22>
 8002776:	230c      	movs	r3, #12
 8002778:	6033      	str	r3, [r6, #0]
 800277a:	2000      	movs	r0, #0
 800277c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800277e:	f001 ffcf 	bl	8004720 <__malloc_lock>
 8002782:	4921      	ldr	r1, [pc, #132]	; (8002808 <_malloc_r+0xac>)
 8002784:	680a      	ldr	r2, [r1, #0]
 8002786:	4614      	mov	r4, r2
 8002788:	b99c      	cbnz	r4, 80027b2 <_malloc_r+0x56>
 800278a:	4f20      	ldr	r7, [pc, #128]	; (800280c <_malloc_r+0xb0>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	b923      	cbnz	r3, 800279a <_malloc_r+0x3e>
 8002790:	4621      	mov	r1, r4
 8002792:	4630      	mov	r0, r6
 8002794:	f000 fd34 	bl	8003200 <_sbrk_r>
 8002798:	6038      	str	r0, [r7, #0]
 800279a:	4629      	mov	r1, r5
 800279c:	4630      	mov	r0, r6
 800279e:	f000 fd2f 	bl	8003200 <_sbrk_r>
 80027a2:	1c43      	adds	r3, r0, #1
 80027a4:	d123      	bne.n	80027ee <_malloc_r+0x92>
 80027a6:	230c      	movs	r3, #12
 80027a8:	6033      	str	r3, [r6, #0]
 80027aa:	4630      	mov	r0, r6
 80027ac:	f001 ffbe 	bl	800472c <__malloc_unlock>
 80027b0:	e7e3      	b.n	800277a <_malloc_r+0x1e>
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	1b5b      	subs	r3, r3, r5
 80027b6:	d417      	bmi.n	80027e8 <_malloc_r+0x8c>
 80027b8:	2b0b      	cmp	r3, #11
 80027ba:	d903      	bls.n	80027c4 <_malloc_r+0x68>
 80027bc:	6023      	str	r3, [r4, #0]
 80027be:	441c      	add	r4, r3
 80027c0:	6025      	str	r5, [r4, #0]
 80027c2:	e004      	b.n	80027ce <_malloc_r+0x72>
 80027c4:	6863      	ldr	r3, [r4, #4]
 80027c6:	42a2      	cmp	r2, r4
 80027c8:	bf0c      	ite	eq
 80027ca:	600b      	streq	r3, [r1, #0]
 80027cc:	6053      	strne	r3, [r2, #4]
 80027ce:	4630      	mov	r0, r6
 80027d0:	f001 ffac 	bl	800472c <__malloc_unlock>
 80027d4:	f104 000b 	add.w	r0, r4, #11
 80027d8:	1d23      	adds	r3, r4, #4
 80027da:	f020 0007 	bic.w	r0, r0, #7
 80027de:	1ac2      	subs	r2, r0, r3
 80027e0:	d0cc      	beq.n	800277c <_malloc_r+0x20>
 80027e2:	1a1b      	subs	r3, r3, r0
 80027e4:	50a3      	str	r3, [r4, r2]
 80027e6:	e7c9      	b.n	800277c <_malloc_r+0x20>
 80027e8:	4622      	mov	r2, r4
 80027ea:	6864      	ldr	r4, [r4, #4]
 80027ec:	e7cc      	b.n	8002788 <_malloc_r+0x2c>
 80027ee:	1cc4      	adds	r4, r0, #3
 80027f0:	f024 0403 	bic.w	r4, r4, #3
 80027f4:	42a0      	cmp	r0, r4
 80027f6:	d0e3      	beq.n	80027c0 <_malloc_r+0x64>
 80027f8:	1a21      	subs	r1, r4, r0
 80027fa:	4630      	mov	r0, r6
 80027fc:	f000 fd00 	bl	8003200 <_sbrk_r>
 8002800:	3001      	adds	r0, #1
 8002802:	d1dd      	bne.n	80027c0 <_malloc_r+0x64>
 8002804:	e7cf      	b.n	80027a6 <_malloc_r+0x4a>
 8002806:	bf00      	nop
 8002808:	20000200 	.word	0x20000200
 800280c:	20000204 	.word	0x20000204

08002810 <__cvt>:
 8002810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002814:	ec55 4b10 	vmov	r4, r5, d0
 8002818:	2d00      	cmp	r5, #0
 800281a:	460e      	mov	r6, r1
 800281c:	4619      	mov	r1, r3
 800281e:	462b      	mov	r3, r5
 8002820:	bfbb      	ittet	lt
 8002822:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002826:	461d      	movlt	r5, r3
 8002828:	2300      	movge	r3, #0
 800282a:	232d      	movlt	r3, #45	; 0x2d
 800282c:	700b      	strb	r3, [r1, #0]
 800282e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002830:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002834:	4691      	mov	r9, r2
 8002836:	f023 0820 	bic.w	r8, r3, #32
 800283a:	bfbc      	itt	lt
 800283c:	4622      	movlt	r2, r4
 800283e:	4614      	movlt	r4, r2
 8002840:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002844:	d005      	beq.n	8002852 <__cvt+0x42>
 8002846:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800284a:	d100      	bne.n	800284e <__cvt+0x3e>
 800284c:	3601      	adds	r6, #1
 800284e:	2102      	movs	r1, #2
 8002850:	e000      	b.n	8002854 <__cvt+0x44>
 8002852:	2103      	movs	r1, #3
 8002854:	ab03      	add	r3, sp, #12
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	ab02      	add	r3, sp, #8
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	ec45 4b10 	vmov	d0, r4, r5
 8002860:	4653      	mov	r3, sl
 8002862:	4632      	mov	r2, r6
 8002864:	f000 ff10 	bl	8003688 <_dtoa_r>
 8002868:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800286c:	4607      	mov	r7, r0
 800286e:	d102      	bne.n	8002876 <__cvt+0x66>
 8002870:	f019 0f01 	tst.w	r9, #1
 8002874:	d022      	beq.n	80028bc <__cvt+0xac>
 8002876:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800287a:	eb07 0906 	add.w	r9, r7, r6
 800287e:	d110      	bne.n	80028a2 <__cvt+0x92>
 8002880:	783b      	ldrb	r3, [r7, #0]
 8002882:	2b30      	cmp	r3, #48	; 0x30
 8002884:	d10a      	bne.n	800289c <__cvt+0x8c>
 8002886:	2200      	movs	r2, #0
 8002888:	2300      	movs	r3, #0
 800288a:	4620      	mov	r0, r4
 800288c:	4629      	mov	r1, r5
 800288e:	f7fe f933 	bl	8000af8 <__aeabi_dcmpeq>
 8002892:	b918      	cbnz	r0, 800289c <__cvt+0x8c>
 8002894:	f1c6 0601 	rsb	r6, r6, #1
 8002898:	f8ca 6000 	str.w	r6, [sl]
 800289c:	f8da 3000 	ldr.w	r3, [sl]
 80028a0:	4499      	add	r9, r3
 80028a2:	2200      	movs	r2, #0
 80028a4:	2300      	movs	r3, #0
 80028a6:	4620      	mov	r0, r4
 80028a8:	4629      	mov	r1, r5
 80028aa:	f7fe f925 	bl	8000af8 <__aeabi_dcmpeq>
 80028ae:	b108      	cbz	r0, 80028b4 <__cvt+0xa4>
 80028b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80028b4:	2230      	movs	r2, #48	; 0x30
 80028b6:	9b03      	ldr	r3, [sp, #12]
 80028b8:	454b      	cmp	r3, r9
 80028ba:	d307      	bcc.n	80028cc <__cvt+0xbc>
 80028bc:	9b03      	ldr	r3, [sp, #12]
 80028be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028c0:	1bdb      	subs	r3, r3, r7
 80028c2:	4638      	mov	r0, r7
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	b004      	add	sp, #16
 80028c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028cc:	1c59      	adds	r1, r3, #1
 80028ce:	9103      	str	r1, [sp, #12]
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e7f0      	b.n	80028b6 <__cvt+0xa6>

080028d4 <__exponent>:
 80028d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028d6:	4603      	mov	r3, r0
 80028d8:	2900      	cmp	r1, #0
 80028da:	bfb8      	it	lt
 80028dc:	4249      	neglt	r1, r1
 80028de:	f803 2b02 	strb.w	r2, [r3], #2
 80028e2:	bfb4      	ite	lt
 80028e4:	222d      	movlt	r2, #45	; 0x2d
 80028e6:	222b      	movge	r2, #43	; 0x2b
 80028e8:	2909      	cmp	r1, #9
 80028ea:	7042      	strb	r2, [r0, #1]
 80028ec:	dd2a      	ble.n	8002944 <__exponent+0x70>
 80028ee:	f10d 0407 	add.w	r4, sp, #7
 80028f2:	46a4      	mov	ip, r4
 80028f4:	270a      	movs	r7, #10
 80028f6:	46a6      	mov	lr, r4
 80028f8:	460a      	mov	r2, r1
 80028fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80028fe:	fb07 1516 	mls	r5, r7, r6, r1
 8002902:	3530      	adds	r5, #48	; 0x30
 8002904:	2a63      	cmp	r2, #99	; 0x63
 8002906:	f104 34ff 	add.w	r4, r4, #4294967295
 800290a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800290e:	4631      	mov	r1, r6
 8002910:	dcf1      	bgt.n	80028f6 <__exponent+0x22>
 8002912:	3130      	adds	r1, #48	; 0x30
 8002914:	f1ae 0502 	sub.w	r5, lr, #2
 8002918:	f804 1c01 	strb.w	r1, [r4, #-1]
 800291c:	1c44      	adds	r4, r0, #1
 800291e:	4629      	mov	r1, r5
 8002920:	4561      	cmp	r1, ip
 8002922:	d30a      	bcc.n	800293a <__exponent+0x66>
 8002924:	f10d 0209 	add.w	r2, sp, #9
 8002928:	eba2 020e 	sub.w	r2, r2, lr
 800292c:	4565      	cmp	r5, ip
 800292e:	bf88      	it	hi
 8002930:	2200      	movhi	r2, #0
 8002932:	4413      	add	r3, r2
 8002934:	1a18      	subs	r0, r3, r0
 8002936:	b003      	add	sp, #12
 8002938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800293a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800293e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002942:	e7ed      	b.n	8002920 <__exponent+0x4c>
 8002944:	2330      	movs	r3, #48	; 0x30
 8002946:	3130      	adds	r1, #48	; 0x30
 8002948:	7083      	strb	r3, [r0, #2]
 800294a:	70c1      	strb	r1, [r0, #3]
 800294c:	1d03      	adds	r3, r0, #4
 800294e:	e7f1      	b.n	8002934 <__exponent+0x60>

08002950 <_printf_float>:
 8002950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002954:	ed2d 8b02 	vpush	{d8}
 8002958:	b08d      	sub	sp, #52	; 0x34
 800295a:	460c      	mov	r4, r1
 800295c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002960:	4616      	mov	r6, r2
 8002962:	461f      	mov	r7, r3
 8002964:	4605      	mov	r5, r0
 8002966:	f001 fe61 	bl	800462c <_localeconv_r>
 800296a:	f8d0 a000 	ldr.w	sl, [r0]
 800296e:	4650      	mov	r0, sl
 8002970:	f7fd fc40 	bl	80001f4 <strlen>
 8002974:	2300      	movs	r3, #0
 8002976:	930a      	str	r3, [sp, #40]	; 0x28
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	9305      	str	r3, [sp, #20]
 800297c:	f8d8 3000 	ldr.w	r3, [r8]
 8002980:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002984:	3307      	adds	r3, #7
 8002986:	f023 0307 	bic.w	r3, r3, #7
 800298a:	f103 0208 	add.w	r2, r3, #8
 800298e:	f8c8 2000 	str.w	r2, [r8]
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800299a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800299e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80029a2:	9307      	str	r3, [sp, #28]
 80029a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80029a8:	ee08 0a10 	vmov	s16, r0
 80029ac:	4b9f      	ldr	r3, [pc, #636]	; (8002c2c <_printf_float+0x2dc>)
 80029ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80029b2:	f04f 32ff 	mov.w	r2, #4294967295
 80029b6:	f7fe f8d1 	bl	8000b5c <__aeabi_dcmpun>
 80029ba:	bb88      	cbnz	r0, 8002a20 <_printf_float+0xd0>
 80029bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80029c0:	4b9a      	ldr	r3, [pc, #616]	; (8002c2c <_printf_float+0x2dc>)
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295
 80029c6:	f7fe f8ab 	bl	8000b20 <__aeabi_dcmple>
 80029ca:	bb48      	cbnz	r0, 8002a20 <_printf_float+0xd0>
 80029cc:	2200      	movs	r2, #0
 80029ce:	2300      	movs	r3, #0
 80029d0:	4640      	mov	r0, r8
 80029d2:	4649      	mov	r1, r9
 80029d4:	f7fe f89a 	bl	8000b0c <__aeabi_dcmplt>
 80029d8:	b110      	cbz	r0, 80029e0 <_printf_float+0x90>
 80029da:	232d      	movs	r3, #45	; 0x2d
 80029dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e0:	4b93      	ldr	r3, [pc, #588]	; (8002c30 <_printf_float+0x2e0>)
 80029e2:	4894      	ldr	r0, [pc, #592]	; (8002c34 <_printf_float+0x2e4>)
 80029e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80029e8:	bf94      	ite	ls
 80029ea:	4698      	movls	r8, r3
 80029ec:	4680      	movhi	r8, r0
 80029ee:	2303      	movs	r3, #3
 80029f0:	6123      	str	r3, [r4, #16]
 80029f2:	9b05      	ldr	r3, [sp, #20]
 80029f4:	f023 0204 	bic.w	r2, r3, #4
 80029f8:	6022      	str	r2, [r4, #0]
 80029fa:	f04f 0900 	mov.w	r9, #0
 80029fe:	9700      	str	r7, [sp, #0]
 8002a00:	4633      	mov	r3, r6
 8002a02:	aa0b      	add	r2, sp, #44	; 0x2c
 8002a04:	4621      	mov	r1, r4
 8002a06:	4628      	mov	r0, r5
 8002a08:	f000 f9d8 	bl	8002dbc <_printf_common>
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	f040 8090 	bne.w	8002b32 <_printf_float+0x1e2>
 8002a12:	f04f 30ff 	mov.w	r0, #4294967295
 8002a16:	b00d      	add	sp, #52	; 0x34
 8002a18:	ecbd 8b02 	vpop	{d8}
 8002a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a20:	4642      	mov	r2, r8
 8002a22:	464b      	mov	r3, r9
 8002a24:	4640      	mov	r0, r8
 8002a26:	4649      	mov	r1, r9
 8002a28:	f7fe f898 	bl	8000b5c <__aeabi_dcmpun>
 8002a2c:	b140      	cbz	r0, 8002a40 <_printf_float+0xf0>
 8002a2e:	464b      	mov	r3, r9
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bfbc      	itt	lt
 8002a34:	232d      	movlt	r3, #45	; 0x2d
 8002a36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002a3a:	487f      	ldr	r0, [pc, #508]	; (8002c38 <_printf_float+0x2e8>)
 8002a3c:	4b7f      	ldr	r3, [pc, #508]	; (8002c3c <_printf_float+0x2ec>)
 8002a3e:	e7d1      	b.n	80029e4 <_printf_float+0x94>
 8002a40:	6863      	ldr	r3, [r4, #4]
 8002a42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002a46:	9206      	str	r2, [sp, #24]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	d13f      	bne.n	8002acc <_printf_float+0x17c>
 8002a4c:	2306      	movs	r3, #6
 8002a4e:	6063      	str	r3, [r4, #4]
 8002a50:	9b05      	ldr	r3, [sp, #20]
 8002a52:	6861      	ldr	r1, [r4, #4]
 8002a54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9303      	str	r3, [sp, #12]
 8002a5c:	ab0a      	add	r3, sp, #40	; 0x28
 8002a5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002a62:	ab09      	add	r3, sp, #36	; 0x24
 8002a64:	ec49 8b10 	vmov	d0, r8, r9
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	6022      	str	r2, [r4, #0]
 8002a6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002a70:	4628      	mov	r0, r5
 8002a72:	f7ff fecd 	bl	8002810 <__cvt>
 8002a76:	9b06      	ldr	r3, [sp, #24]
 8002a78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a7a:	2b47      	cmp	r3, #71	; 0x47
 8002a7c:	4680      	mov	r8, r0
 8002a7e:	d108      	bne.n	8002a92 <_printf_float+0x142>
 8002a80:	1cc8      	adds	r0, r1, #3
 8002a82:	db02      	blt.n	8002a8a <_printf_float+0x13a>
 8002a84:	6863      	ldr	r3, [r4, #4]
 8002a86:	4299      	cmp	r1, r3
 8002a88:	dd41      	ble.n	8002b0e <_printf_float+0x1be>
 8002a8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8002a8e:	fa5f fb8b 	uxtb.w	fp, fp
 8002a92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002a96:	d820      	bhi.n	8002ada <_printf_float+0x18a>
 8002a98:	3901      	subs	r1, #1
 8002a9a:	465a      	mov	r2, fp
 8002a9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002aa0:	9109      	str	r1, [sp, #36]	; 0x24
 8002aa2:	f7ff ff17 	bl	80028d4 <__exponent>
 8002aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002aa8:	1813      	adds	r3, r2, r0
 8002aaa:	2a01      	cmp	r2, #1
 8002aac:	4681      	mov	r9, r0
 8002aae:	6123      	str	r3, [r4, #16]
 8002ab0:	dc02      	bgt.n	8002ab8 <_printf_float+0x168>
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	07d2      	lsls	r2, r2, #31
 8002ab6:	d501      	bpl.n	8002abc <_printf_float+0x16c>
 8002ab8:	3301      	adds	r3, #1
 8002aba:	6123      	str	r3, [r4, #16]
 8002abc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d09c      	beq.n	80029fe <_printf_float+0xae>
 8002ac4:	232d      	movs	r3, #45	; 0x2d
 8002ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aca:	e798      	b.n	80029fe <_printf_float+0xae>
 8002acc:	9a06      	ldr	r2, [sp, #24]
 8002ace:	2a47      	cmp	r2, #71	; 0x47
 8002ad0:	d1be      	bne.n	8002a50 <_printf_float+0x100>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1bc      	bne.n	8002a50 <_printf_float+0x100>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e7b9      	b.n	8002a4e <_printf_float+0xfe>
 8002ada:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002ade:	d118      	bne.n	8002b12 <_printf_float+0x1c2>
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	6863      	ldr	r3, [r4, #4]
 8002ae4:	dd0b      	ble.n	8002afe <_printf_float+0x1ae>
 8002ae6:	6121      	str	r1, [r4, #16]
 8002ae8:	b913      	cbnz	r3, 8002af0 <_printf_float+0x1a0>
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	07d0      	lsls	r0, r2, #31
 8002aee:	d502      	bpl.n	8002af6 <_printf_float+0x1a6>
 8002af0:	3301      	adds	r3, #1
 8002af2:	440b      	add	r3, r1
 8002af4:	6123      	str	r3, [r4, #16]
 8002af6:	65a1      	str	r1, [r4, #88]	; 0x58
 8002af8:	f04f 0900 	mov.w	r9, #0
 8002afc:	e7de      	b.n	8002abc <_printf_float+0x16c>
 8002afe:	b913      	cbnz	r3, 8002b06 <_printf_float+0x1b6>
 8002b00:	6822      	ldr	r2, [r4, #0]
 8002b02:	07d2      	lsls	r2, r2, #31
 8002b04:	d501      	bpl.n	8002b0a <_printf_float+0x1ba>
 8002b06:	3302      	adds	r3, #2
 8002b08:	e7f4      	b.n	8002af4 <_printf_float+0x1a4>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e7f2      	b.n	8002af4 <_printf_float+0x1a4>
 8002b0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b14:	4299      	cmp	r1, r3
 8002b16:	db05      	blt.n	8002b24 <_printf_float+0x1d4>
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	6121      	str	r1, [r4, #16]
 8002b1c:	07d8      	lsls	r0, r3, #31
 8002b1e:	d5ea      	bpl.n	8002af6 <_printf_float+0x1a6>
 8002b20:	1c4b      	adds	r3, r1, #1
 8002b22:	e7e7      	b.n	8002af4 <_printf_float+0x1a4>
 8002b24:	2900      	cmp	r1, #0
 8002b26:	bfd4      	ite	le
 8002b28:	f1c1 0202 	rsble	r2, r1, #2
 8002b2c:	2201      	movgt	r2, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	e7e0      	b.n	8002af4 <_printf_float+0x1a4>
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	055a      	lsls	r2, r3, #21
 8002b36:	d407      	bmi.n	8002b48 <_printf_float+0x1f8>
 8002b38:	6923      	ldr	r3, [r4, #16]
 8002b3a:	4642      	mov	r2, r8
 8002b3c:	4631      	mov	r1, r6
 8002b3e:	4628      	mov	r0, r5
 8002b40:	47b8      	blx	r7
 8002b42:	3001      	adds	r0, #1
 8002b44:	d12c      	bne.n	8002ba0 <_printf_float+0x250>
 8002b46:	e764      	b.n	8002a12 <_printf_float+0xc2>
 8002b48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002b4c:	f240 80e0 	bls.w	8002d10 <_printf_float+0x3c0>
 8002b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b54:	2200      	movs	r2, #0
 8002b56:	2300      	movs	r3, #0
 8002b58:	f7fd ffce 	bl	8000af8 <__aeabi_dcmpeq>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d034      	beq.n	8002bca <_printf_float+0x27a>
 8002b60:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <_printf_float+0x2f0>)
 8002b62:	2301      	movs	r3, #1
 8002b64:	4631      	mov	r1, r6
 8002b66:	4628      	mov	r0, r5
 8002b68:	47b8      	blx	r7
 8002b6a:	3001      	adds	r0, #1
 8002b6c:	f43f af51 	beq.w	8002a12 <_printf_float+0xc2>
 8002b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b74:	429a      	cmp	r2, r3
 8002b76:	db02      	blt.n	8002b7e <_printf_float+0x22e>
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	07d8      	lsls	r0, r3, #31
 8002b7c:	d510      	bpl.n	8002ba0 <_printf_float+0x250>
 8002b7e:	ee18 3a10 	vmov	r3, s16
 8002b82:	4652      	mov	r2, sl
 8002b84:	4631      	mov	r1, r6
 8002b86:	4628      	mov	r0, r5
 8002b88:	47b8      	blx	r7
 8002b8a:	3001      	adds	r0, #1
 8002b8c:	f43f af41 	beq.w	8002a12 <_printf_float+0xc2>
 8002b90:	f04f 0800 	mov.w	r8, #0
 8002b94:	f104 091a 	add.w	r9, r4, #26
 8002b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	4543      	cmp	r3, r8
 8002b9e:	dc09      	bgt.n	8002bb4 <_printf_float+0x264>
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	079b      	lsls	r3, r3, #30
 8002ba4:	f100 8105 	bmi.w	8002db2 <_printf_float+0x462>
 8002ba8:	68e0      	ldr	r0, [r4, #12]
 8002baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bac:	4298      	cmp	r0, r3
 8002bae:	bfb8      	it	lt
 8002bb0:	4618      	movlt	r0, r3
 8002bb2:	e730      	b.n	8002a16 <_printf_float+0xc6>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	464a      	mov	r2, r9
 8002bb8:	4631      	mov	r1, r6
 8002bba:	4628      	mov	r0, r5
 8002bbc:	47b8      	blx	r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	f43f af27 	beq.w	8002a12 <_printf_float+0xc2>
 8002bc4:	f108 0801 	add.w	r8, r8, #1
 8002bc8:	e7e6      	b.n	8002b98 <_printf_float+0x248>
 8002bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	dc39      	bgt.n	8002c44 <_printf_float+0x2f4>
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <_printf_float+0x2f0>)
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	4631      	mov	r1, r6
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	47b8      	blx	r7
 8002bda:	3001      	adds	r0, #1
 8002bdc:	f43f af19 	beq.w	8002a12 <_printf_float+0xc2>
 8002be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002be4:	4313      	orrs	r3, r2
 8002be6:	d102      	bne.n	8002bee <_printf_float+0x29e>
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	07d9      	lsls	r1, r3, #31
 8002bec:	d5d8      	bpl.n	8002ba0 <_printf_float+0x250>
 8002bee:	ee18 3a10 	vmov	r3, s16
 8002bf2:	4652      	mov	r2, sl
 8002bf4:	4631      	mov	r1, r6
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	47b8      	blx	r7
 8002bfa:	3001      	adds	r0, #1
 8002bfc:	f43f af09 	beq.w	8002a12 <_printf_float+0xc2>
 8002c00:	f04f 0900 	mov.w	r9, #0
 8002c04:	f104 0a1a 	add.w	sl, r4, #26
 8002c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c0a:	425b      	negs	r3, r3
 8002c0c:	454b      	cmp	r3, r9
 8002c0e:	dc01      	bgt.n	8002c14 <_printf_float+0x2c4>
 8002c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c12:	e792      	b.n	8002b3a <_printf_float+0x1ea>
 8002c14:	2301      	movs	r3, #1
 8002c16:	4652      	mov	r2, sl
 8002c18:	4631      	mov	r1, r6
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	47b8      	blx	r7
 8002c1e:	3001      	adds	r0, #1
 8002c20:	f43f aef7 	beq.w	8002a12 <_printf_float+0xc2>
 8002c24:	f109 0901 	add.w	r9, r9, #1
 8002c28:	e7ee      	b.n	8002c08 <_printf_float+0x2b8>
 8002c2a:	bf00      	nop
 8002c2c:	7fefffff 	.word	0x7fefffff
 8002c30:	080065e0 	.word	0x080065e0
 8002c34:	080065e4 	.word	0x080065e4
 8002c38:	080065ec 	.word	0x080065ec
 8002c3c:	080065e8 	.word	0x080065e8
 8002c40:	08006879 	.word	0x08006879
 8002c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	bfa8      	it	ge
 8002c4c:	461a      	movge	r2, r3
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	4691      	mov	r9, r2
 8002c52:	dc37      	bgt.n	8002cc4 <_printf_float+0x374>
 8002c54:	f04f 0b00 	mov.w	fp, #0
 8002c58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c5c:	f104 021a 	add.w	r2, r4, #26
 8002c60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c62:	9305      	str	r3, [sp, #20]
 8002c64:	eba3 0309 	sub.w	r3, r3, r9
 8002c68:	455b      	cmp	r3, fp
 8002c6a:	dc33      	bgt.n	8002cd4 <_printf_float+0x384>
 8002c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c70:	429a      	cmp	r2, r3
 8002c72:	db3b      	blt.n	8002cec <_printf_float+0x39c>
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	07da      	lsls	r2, r3, #31
 8002c78:	d438      	bmi.n	8002cec <_printf_float+0x39c>
 8002c7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c7c:	9b05      	ldr	r3, [sp, #20]
 8002c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	eba2 0901 	sub.w	r9, r2, r1
 8002c86:	4599      	cmp	r9, r3
 8002c88:	bfa8      	it	ge
 8002c8a:	4699      	movge	r9, r3
 8002c8c:	f1b9 0f00 	cmp.w	r9, #0
 8002c90:	dc35      	bgt.n	8002cfe <_printf_float+0x3ae>
 8002c92:	f04f 0800 	mov.w	r8, #0
 8002c96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c9a:	f104 0a1a 	add.w	sl, r4, #26
 8002c9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	eba3 0309 	sub.w	r3, r3, r9
 8002ca8:	4543      	cmp	r3, r8
 8002caa:	f77f af79 	ble.w	8002ba0 <_printf_float+0x250>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	4652      	mov	r2, sl
 8002cb2:	4631      	mov	r1, r6
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	47b8      	blx	r7
 8002cb8:	3001      	adds	r0, #1
 8002cba:	f43f aeaa 	beq.w	8002a12 <_printf_float+0xc2>
 8002cbe:	f108 0801 	add.w	r8, r8, #1
 8002cc2:	e7ec      	b.n	8002c9e <_printf_float+0x34e>
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	4631      	mov	r1, r6
 8002cc8:	4642      	mov	r2, r8
 8002cca:	4628      	mov	r0, r5
 8002ccc:	47b8      	blx	r7
 8002cce:	3001      	adds	r0, #1
 8002cd0:	d1c0      	bne.n	8002c54 <_printf_float+0x304>
 8002cd2:	e69e      	b.n	8002a12 <_printf_float+0xc2>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	4628      	mov	r0, r5
 8002cda:	9205      	str	r2, [sp, #20]
 8002cdc:	47b8      	blx	r7
 8002cde:	3001      	adds	r0, #1
 8002ce0:	f43f ae97 	beq.w	8002a12 <_printf_float+0xc2>
 8002ce4:	9a05      	ldr	r2, [sp, #20]
 8002ce6:	f10b 0b01 	add.w	fp, fp, #1
 8002cea:	e7b9      	b.n	8002c60 <_printf_float+0x310>
 8002cec:	ee18 3a10 	vmov	r3, s16
 8002cf0:	4652      	mov	r2, sl
 8002cf2:	4631      	mov	r1, r6
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	47b8      	blx	r7
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d1be      	bne.n	8002c7a <_printf_float+0x32a>
 8002cfc:	e689      	b.n	8002a12 <_printf_float+0xc2>
 8002cfe:	9a05      	ldr	r2, [sp, #20]
 8002d00:	464b      	mov	r3, r9
 8002d02:	4442      	add	r2, r8
 8002d04:	4631      	mov	r1, r6
 8002d06:	4628      	mov	r0, r5
 8002d08:	47b8      	blx	r7
 8002d0a:	3001      	adds	r0, #1
 8002d0c:	d1c1      	bne.n	8002c92 <_printf_float+0x342>
 8002d0e:	e680      	b.n	8002a12 <_printf_float+0xc2>
 8002d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d12:	2a01      	cmp	r2, #1
 8002d14:	dc01      	bgt.n	8002d1a <_printf_float+0x3ca>
 8002d16:	07db      	lsls	r3, r3, #31
 8002d18:	d538      	bpl.n	8002d8c <_printf_float+0x43c>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	4642      	mov	r2, r8
 8002d1e:	4631      	mov	r1, r6
 8002d20:	4628      	mov	r0, r5
 8002d22:	47b8      	blx	r7
 8002d24:	3001      	adds	r0, #1
 8002d26:	f43f ae74 	beq.w	8002a12 <_printf_float+0xc2>
 8002d2a:	ee18 3a10 	vmov	r3, s16
 8002d2e:	4652      	mov	r2, sl
 8002d30:	4631      	mov	r1, r6
 8002d32:	4628      	mov	r0, r5
 8002d34:	47b8      	blx	r7
 8002d36:	3001      	adds	r0, #1
 8002d38:	f43f ae6b 	beq.w	8002a12 <_printf_float+0xc2>
 8002d3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d40:	2200      	movs	r2, #0
 8002d42:	2300      	movs	r3, #0
 8002d44:	f7fd fed8 	bl	8000af8 <__aeabi_dcmpeq>
 8002d48:	b9d8      	cbnz	r0, 8002d82 <_printf_float+0x432>
 8002d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d4c:	f108 0201 	add.w	r2, r8, #1
 8002d50:	3b01      	subs	r3, #1
 8002d52:	4631      	mov	r1, r6
 8002d54:	4628      	mov	r0, r5
 8002d56:	47b8      	blx	r7
 8002d58:	3001      	adds	r0, #1
 8002d5a:	d10e      	bne.n	8002d7a <_printf_float+0x42a>
 8002d5c:	e659      	b.n	8002a12 <_printf_float+0xc2>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4652      	mov	r2, sl
 8002d62:	4631      	mov	r1, r6
 8002d64:	4628      	mov	r0, r5
 8002d66:	47b8      	blx	r7
 8002d68:	3001      	adds	r0, #1
 8002d6a:	f43f ae52 	beq.w	8002a12 <_printf_float+0xc2>
 8002d6e:	f108 0801 	add.w	r8, r8, #1
 8002d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d74:	3b01      	subs	r3, #1
 8002d76:	4543      	cmp	r3, r8
 8002d78:	dcf1      	bgt.n	8002d5e <_printf_float+0x40e>
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002d80:	e6dc      	b.n	8002b3c <_printf_float+0x1ec>
 8002d82:	f04f 0800 	mov.w	r8, #0
 8002d86:	f104 0a1a 	add.w	sl, r4, #26
 8002d8a:	e7f2      	b.n	8002d72 <_printf_float+0x422>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	4642      	mov	r2, r8
 8002d90:	e7df      	b.n	8002d52 <_printf_float+0x402>
 8002d92:	2301      	movs	r3, #1
 8002d94:	464a      	mov	r2, r9
 8002d96:	4631      	mov	r1, r6
 8002d98:	4628      	mov	r0, r5
 8002d9a:	47b8      	blx	r7
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	f43f ae38 	beq.w	8002a12 <_printf_float+0xc2>
 8002da2:	f108 0801 	add.w	r8, r8, #1
 8002da6:	68e3      	ldr	r3, [r4, #12]
 8002da8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002daa:	1a5b      	subs	r3, r3, r1
 8002dac:	4543      	cmp	r3, r8
 8002dae:	dcf0      	bgt.n	8002d92 <_printf_float+0x442>
 8002db0:	e6fa      	b.n	8002ba8 <_printf_float+0x258>
 8002db2:	f04f 0800 	mov.w	r8, #0
 8002db6:	f104 0919 	add.w	r9, r4, #25
 8002dba:	e7f4      	b.n	8002da6 <_printf_float+0x456>

08002dbc <_printf_common>:
 8002dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dc0:	4616      	mov	r6, r2
 8002dc2:	4699      	mov	r9, r3
 8002dc4:	688a      	ldr	r2, [r1, #8]
 8002dc6:	690b      	ldr	r3, [r1, #16]
 8002dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bfb8      	it	lt
 8002dd0:	4613      	movlt	r3, r2
 8002dd2:	6033      	str	r3, [r6, #0]
 8002dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dd8:	4607      	mov	r7, r0
 8002dda:	460c      	mov	r4, r1
 8002ddc:	b10a      	cbz	r2, 8002de2 <_printf_common+0x26>
 8002dde:	3301      	adds	r3, #1
 8002de0:	6033      	str	r3, [r6, #0]
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	0699      	lsls	r1, r3, #26
 8002de6:	bf42      	ittt	mi
 8002de8:	6833      	ldrmi	r3, [r6, #0]
 8002dea:	3302      	addmi	r3, #2
 8002dec:	6033      	strmi	r3, [r6, #0]
 8002dee:	6825      	ldr	r5, [r4, #0]
 8002df0:	f015 0506 	ands.w	r5, r5, #6
 8002df4:	d106      	bne.n	8002e04 <_printf_common+0x48>
 8002df6:	f104 0a19 	add.w	sl, r4, #25
 8002dfa:	68e3      	ldr	r3, [r4, #12]
 8002dfc:	6832      	ldr	r2, [r6, #0]
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	42ab      	cmp	r3, r5
 8002e02:	dc26      	bgt.n	8002e52 <_printf_common+0x96>
 8002e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e08:	1e13      	subs	r3, r2, #0
 8002e0a:	6822      	ldr	r2, [r4, #0]
 8002e0c:	bf18      	it	ne
 8002e0e:	2301      	movne	r3, #1
 8002e10:	0692      	lsls	r2, r2, #26
 8002e12:	d42b      	bmi.n	8002e6c <_printf_common+0xb0>
 8002e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e18:	4649      	mov	r1, r9
 8002e1a:	4638      	mov	r0, r7
 8002e1c:	47c0      	blx	r8
 8002e1e:	3001      	adds	r0, #1
 8002e20:	d01e      	beq.n	8002e60 <_printf_common+0xa4>
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	68e5      	ldr	r5, [r4, #12]
 8002e26:	6832      	ldr	r2, [r6, #0]
 8002e28:	f003 0306 	and.w	r3, r3, #6
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	bf08      	it	eq
 8002e30:	1aad      	subeq	r5, r5, r2
 8002e32:	68a3      	ldr	r3, [r4, #8]
 8002e34:	6922      	ldr	r2, [r4, #16]
 8002e36:	bf0c      	ite	eq
 8002e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e3c:	2500      	movne	r5, #0
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	bfc4      	itt	gt
 8002e42:	1a9b      	subgt	r3, r3, r2
 8002e44:	18ed      	addgt	r5, r5, r3
 8002e46:	2600      	movs	r6, #0
 8002e48:	341a      	adds	r4, #26
 8002e4a:	42b5      	cmp	r5, r6
 8002e4c:	d11a      	bne.n	8002e84 <_printf_common+0xc8>
 8002e4e:	2000      	movs	r0, #0
 8002e50:	e008      	b.n	8002e64 <_printf_common+0xa8>
 8002e52:	2301      	movs	r3, #1
 8002e54:	4652      	mov	r2, sl
 8002e56:	4649      	mov	r1, r9
 8002e58:	4638      	mov	r0, r7
 8002e5a:	47c0      	blx	r8
 8002e5c:	3001      	adds	r0, #1
 8002e5e:	d103      	bne.n	8002e68 <_printf_common+0xac>
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e68:	3501      	adds	r5, #1
 8002e6a:	e7c6      	b.n	8002dfa <_printf_common+0x3e>
 8002e6c:	18e1      	adds	r1, r4, r3
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	2030      	movs	r0, #48	; 0x30
 8002e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e76:	4422      	add	r2, r4
 8002e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e80:	3302      	adds	r3, #2
 8002e82:	e7c7      	b.n	8002e14 <_printf_common+0x58>
 8002e84:	2301      	movs	r3, #1
 8002e86:	4622      	mov	r2, r4
 8002e88:	4649      	mov	r1, r9
 8002e8a:	4638      	mov	r0, r7
 8002e8c:	47c0      	blx	r8
 8002e8e:	3001      	adds	r0, #1
 8002e90:	d0e6      	beq.n	8002e60 <_printf_common+0xa4>
 8002e92:	3601      	adds	r6, #1
 8002e94:	e7d9      	b.n	8002e4a <_printf_common+0x8e>
	...

08002e98 <_printf_i>:
 8002e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	4691      	mov	r9, r2
 8002ea0:	7e27      	ldrb	r7, [r4, #24]
 8002ea2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ea4:	2f78      	cmp	r7, #120	; 0x78
 8002ea6:	4680      	mov	r8, r0
 8002ea8:	469a      	mov	sl, r3
 8002eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eae:	d807      	bhi.n	8002ec0 <_printf_i+0x28>
 8002eb0:	2f62      	cmp	r7, #98	; 0x62
 8002eb2:	d80a      	bhi.n	8002eca <_printf_i+0x32>
 8002eb4:	2f00      	cmp	r7, #0
 8002eb6:	f000 80d8 	beq.w	800306a <_printf_i+0x1d2>
 8002eba:	2f58      	cmp	r7, #88	; 0x58
 8002ebc:	f000 80a3 	beq.w	8003006 <_printf_i+0x16e>
 8002ec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ec8:	e03a      	b.n	8002f40 <_printf_i+0xa8>
 8002eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ece:	2b15      	cmp	r3, #21
 8002ed0:	d8f6      	bhi.n	8002ec0 <_printf_i+0x28>
 8002ed2:	a001      	add	r0, pc, #4	; (adr r0, 8002ed8 <_printf_i+0x40>)
 8002ed4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ed8:	08002f31 	.word	0x08002f31
 8002edc:	08002f45 	.word	0x08002f45
 8002ee0:	08002ec1 	.word	0x08002ec1
 8002ee4:	08002ec1 	.word	0x08002ec1
 8002ee8:	08002ec1 	.word	0x08002ec1
 8002eec:	08002ec1 	.word	0x08002ec1
 8002ef0:	08002f45 	.word	0x08002f45
 8002ef4:	08002ec1 	.word	0x08002ec1
 8002ef8:	08002ec1 	.word	0x08002ec1
 8002efc:	08002ec1 	.word	0x08002ec1
 8002f00:	08002ec1 	.word	0x08002ec1
 8002f04:	08003051 	.word	0x08003051
 8002f08:	08002f75 	.word	0x08002f75
 8002f0c:	08003033 	.word	0x08003033
 8002f10:	08002ec1 	.word	0x08002ec1
 8002f14:	08002ec1 	.word	0x08002ec1
 8002f18:	08003073 	.word	0x08003073
 8002f1c:	08002ec1 	.word	0x08002ec1
 8002f20:	08002f75 	.word	0x08002f75
 8002f24:	08002ec1 	.word	0x08002ec1
 8002f28:	08002ec1 	.word	0x08002ec1
 8002f2c:	0800303b 	.word	0x0800303b
 8002f30:	680b      	ldr	r3, [r1, #0]
 8002f32:	1d1a      	adds	r2, r3, #4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	600a      	str	r2, [r1, #0]
 8002f38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0a3      	b.n	800308c <_printf_i+0x1f4>
 8002f44:	6825      	ldr	r5, [r4, #0]
 8002f46:	6808      	ldr	r0, [r1, #0]
 8002f48:	062e      	lsls	r6, r5, #24
 8002f4a:	f100 0304 	add.w	r3, r0, #4
 8002f4e:	d50a      	bpl.n	8002f66 <_printf_i+0xce>
 8002f50:	6805      	ldr	r5, [r0, #0]
 8002f52:	600b      	str	r3, [r1, #0]
 8002f54:	2d00      	cmp	r5, #0
 8002f56:	da03      	bge.n	8002f60 <_printf_i+0xc8>
 8002f58:	232d      	movs	r3, #45	; 0x2d
 8002f5a:	426d      	negs	r5, r5
 8002f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f60:	485e      	ldr	r0, [pc, #376]	; (80030dc <_printf_i+0x244>)
 8002f62:	230a      	movs	r3, #10
 8002f64:	e019      	b.n	8002f9a <_printf_i+0x102>
 8002f66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f6a:	6805      	ldr	r5, [r0, #0]
 8002f6c:	600b      	str	r3, [r1, #0]
 8002f6e:	bf18      	it	ne
 8002f70:	b22d      	sxthne	r5, r5
 8002f72:	e7ef      	b.n	8002f54 <_printf_i+0xbc>
 8002f74:	680b      	ldr	r3, [r1, #0]
 8002f76:	6825      	ldr	r5, [r4, #0]
 8002f78:	1d18      	adds	r0, r3, #4
 8002f7a:	6008      	str	r0, [r1, #0]
 8002f7c:	0628      	lsls	r0, r5, #24
 8002f7e:	d501      	bpl.n	8002f84 <_printf_i+0xec>
 8002f80:	681d      	ldr	r5, [r3, #0]
 8002f82:	e002      	b.n	8002f8a <_printf_i+0xf2>
 8002f84:	0669      	lsls	r1, r5, #25
 8002f86:	d5fb      	bpl.n	8002f80 <_printf_i+0xe8>
 8002f88:	881d      	ldrh	r5, [r3, #0]
 8002f8a:	4854      	ldr	r0, [pc, #336]	; (80030dc <_printf_i+0x244>)
 8002f8c:	2f6f      	cmp	r7, #111	; 0x6f
 8002f8e:	bf0c      	ite	eq
 8002f90:	2308      	moveq	r3, #8
 8002f92:	230a      	movne	r3, #10
 8002f94:	2100      	movs	r1, #0
 8002f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f9a:	6866      	ldr	r6, [r4, #4]
 8002f9c:	60a6      	str	r6, [r4, #8]
 8002f9e:	2e00      	cmp	r6, #0
 8002fa0:	bfa2      	ittt	ge
 8002fa2:	6821      	ldrge	r1, [r4, #0]
 8002fa4:	f021 0104 	bicge.w	r1, r1, #4
 8002fa8:	6021      	strge	r1, [r4, #0]
 8002faa:	b90d      	cbnz	r5, 8002fb0 <_printf_i+0x118>
 8002fac:	2e00      	cmp	r6, #0
 8002fae:	d04d      	beq.n	800304c <_printf_i+0x1b4>
 8002fb0:	4616      	mov	r6, r2
 8002fb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8002fb6:	fb03 5711 	mls	r7, r3, r1, r5
 8002fba:	5dc7      	ldrb	r7, [r0, r7]
 8002fbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002fc0:	462f      	mov	r7, r5
 8002fc2:	42bb      	cmp	r3, r7
 8002fc4:	460d      	mov	r5, r1
 8002fc6:	d9f4      	bls.n	8002fb2 <_printf_i+0x11a>
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d10b      	bne.n	8002fe4 <_printf_i+0x14c>
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	07df      	lsls	r7, r3, #31
 8002fd0:	d508      	bpl.n	8002fe4 <_printf_i+0x14c>
 8002fd2:	6923      	ldr	r3, [r4, #16]
 8002fd4:	6861      	ldr	r1, [r4, #4]
 8002fd6:	4299      	cmp	r1, r3
 8002fd8:	bfde      	ittt	le
 8002fda:	2330      	movle	r3, #48	; 0x30
 8002fdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fe0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002fe4:	1b92      	subs	r2, r2, r6
 8002fe6:	6122      	str	r2, [r4, #16]
 8002fe8:	f8cd a000 	str.w	sl, [sp]
 8002fec:	464b      	mov	r3, r9
 8002fee:	aa03      	add	r2, sp, #12
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	4640      	mov	r0, r8
 8002ff4:	f7ff fee2 	bl	8002dbc <_printf_common>
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	d14c      	bne.n	8003096 <_printf_i+0x1fe>
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	b004      	add	sp, #16
 8003002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003006:	4835      	ldr	r0, [pc, #212]	; (80030dc <_printf_i+0x244>)
 8003008:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	680e      	ldr	r6, [r1, #0]
 8003010:	061f      	lsls	r7, r3, #24
 8003012:	f856 5b04 	ldr.w	r5, [r6], #4
 8003016:	600e      	str	r6, [r1, #0]
 8003018:	d514      	bpl.n	8003044 <_printf_i+0x1ac>
 800301a:	07d9      	lsls	r1, r3, #31
 800301c:	bf44      	itt	mi
 800301e:	f043 0320 	orrmi.w	r3, r3, #32
 8003022:	6023      	strmi	r3, [r4, #0]
 8003024:	b91d      	cbnz	r5, 800302e <_printf_i+0x196>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	f023 0320 	bic.w	r3, r3, #32
 800302c:	6023      	str	r3, [r4, #0]
 800302e:	2310      	movs	r3, #16
 8003030:	e7b0      	b.n	8002f94 <_printf_i+0xfc>
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	f043 0320 	orr.w	r3, r3, #32
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	2378      	movs	r3, #120	; 0x78
 800303c:	4828      	ldr	r0, [pc, #160]	; (80030e0 <_printf_i+0x248>)
 800303e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003042:	e7e3      	b.n	800300c <_printf_i+0x174>
 8003044:	065e      	lsls	r6, r3, #25
 8003046:	bf48      	it	mi
 8003048:	b2ad      	uxthmi	r5, r5
 800304a:	e7e6      	b.n	800301a <_printf_i+0x182>
 800304c:	4616      	mov	r6, r2
 800304e:	e7bb      	b.n	8002fc8 <_printf_i+0x130>
 8003050:	680b      	ldr	r3, [r1, #0]
 8003052:	6826      	ldr	r6, [r4, #0]
 8003054:	6960      	ldr	r0, [r4, #20]
 8003056:	1d1d      	adds	r5, r3, #4
 8003058:	600d      	str	r5, [r1, #0]
 800305a:	0635      	lsls	r5, r6, #24
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	d501      	bpl.n	8003064 <_printf_i+0x1cc>
 8003060:	6018      	str	r0, [r3, #0]
 8003062:	e002      	b.n	800306a <_printf_i+0x1d2>
 8003064:	0671      	lsls	r1, r6, #25
 8003066:	d5fb      	bpl.n	8003060 <_printf_i+0x1c8>
 8003068:	8018      	strh	r0, [r3, #0]
 800306a:	2300      	movs	r3, #0
 800306c:	6123      	str	r3, [r4, #16]
 800306e:	4616      	mov	r6, r2
 8003070:	e7ba      	b.n	8002fe8 <_printf_i+0x150>
 8003072:	680b      	ldr	r3, [r1, #0]
 8003074:	1d1a      	adds	r2, r3, #4
 8003076:	600a      	str	r2, [r1, #0]
 8003078:	681e      	ldr	r6, [r3, #0]
 800307a:	6862      	ldr	r2, [r4, #4]
 800307c:	2100      	movs	r1, #0
 800307e:	4630      	mov	r0, r6
 8003080:	f7fd f8c6 	bl	8000210 <memchr>
 8003084:	b108      	cbz	r0, 800308a <_printf_i+0x1f2>
 8003086:	1b80      	subs	r0, r0, r6
 8003088:	6060      	str	r0, [r4, #4]
 800308a:	6863      	ldr	r3, [r4, #4]
 800308c:	6123      	str	r3, [r4, #16]
 800308e:	2300      	movs	r3, #0
 8003090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003094:	e7a8      	b.n	8002fe8 <_printf_i+0x150>
 8003096:	6923      	ldr	r3, [r4, #16]
 8003098:	4632      	mov	r2, r6
 800309a:	4649      	mov	r1, r9
 800309c:	4640      	mov	r0, r8
 800309e:	47d0      	blx	sl
 80030a0:	3001      	adds	r0, #1
 80030a2:	d0ab      	beq.n	8002ffc <_printf_i+0x164>
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	079b      	lsls	r3, r3, #30
 80030a8:	d413      	bmi.n	80030d2 <_printf_i+0x23a>
 80030aa:	68e0      	ldr	r0, [r4, #12]
 80030ac:	9b03      	ldr	r3, [sp, #12]
 80030ae:	4298      	cmp	r0, r3
 80030b0:	bfb8      	it	lt
 80030b2:	4618      	movlt	r0, r3
 80030b4:	e7a4      	b.n	8003000 <_printf_i+0x168>
 80030b6:	2301      	movs	r3, #1
 80030b8:	4632      	mov	r2, r6
 80030ba:	4649      	mov	r1, r9
 80030bc:	4640      	mov	r0, r8
 80030be:	47d0      	blx	sl
 80030c0:	3001      	adds	r0, #1
 80030c2:	d09b      	beq.n	8002ffc <_printf_i+0x164>
 80030c4:	3501      	adds	r5, #1
 80030c6:	68e3      	ldr	r3, [r4, #12]
 80030c8:	9903      	ldr	r1, [sp, #12]
 80030ca:	1a5b      	subs	r3, r3, r1
 80030cc:	42ab      	cmp	r3, r5
 80030ce:	dcf2      	bgt.n	80030b6 <_printf_i+0x21e>
 80030d0:	e7eb      	b.n	80030aa <_printf_i+0x212>
 80030d2:	2500      	movs	r5, #0
 80030d4:	f104 0619 	add.w	r6, r4, #25
 80030d8:	e7f5      	b.n	80030c6 <_printf_i+0x22e>
 80030da:	bf00      	nop
 80030dc:	080065f0 	.word	0x080065f0
 80030e0:	08006601 	.word	0x08006601

080030e4 <iprintf>:
 80030e4:	b40f      	push	{r0, r1, r2, r3}
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <iprintf+0x2c>)
 80030e8:	b513      	push	{r0, r1, r4, lr}
 80030ea:	681c      	ldr	r4, [r3, #0]
 80030ec:	b124      	cbz	r4, 80030f8 <iprintf+0x14>
 80030ee:	69a3      	ldr	r3, [r4, #24]
 80030f0:	b913      	cbnz	r3, 80030f8 <iprintf+0x14>
 80030f2:	4620      	mov	r0, r4
 80030f4:	f001 f9e0 	bl	80044b8 <__sinit>
 80030f8:	ab05      	add	r3, sp, #20
 80030fa:	9a04      	ldr	r2, [sp, #16]
 80030fc:	68a1      	ldr	r1, [r4, #8]
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	4620      	mov	r0, r4
 8003102:	f001 fecf 	bl	8004ea4 <_vfiprintf_r>
 8003106:	b002      	add	sp, #8
 8003108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800310c:	b004      	add	sp, #16
 800310e:	4770      	bx	lr
 8003110:	2000000c 	.word	0x2000000c

08003114 <_puts_r>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	460e      	mov	r6, r1
 8003118:	4605      	mov	r5, r0
 800311a:	b118      	cbz	r0, 8003124 <_puts_r+0x10>
 800311c:	6983      	ldr	r3, [r0, #24]
 800311e:	b90b      	cbnz	r3, 8003124 <_puts_r+0x10>
 8003120:	f001 f9ca 	bl	80044b8 <__sinit>
 8003124:	69ab      	ldr	r3, [r5, #24]
 8003126:	68ac      	ldr	r4, [r5, #8]
 8003128:	b913      	cbnz	r3, 8003130 <_puts_r+0x1c>
 800312a:	4628      	mov	r0, r5
 800312c:	f001 f9c4 	bl	80044b8 <__sinit>
 8003130:	4b2c      	ldr	r3, [pc, #176]	; (80031e4 <_puts_r+0xd0>)
 8003132:	429c      	cmp	r4, r3
 8003134:	d120      	bne.n	8003178 <_puts_r+0x64>
 8003136:	686c      	ldr	r4, [r5, #4]
 8003138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800313a:	07db      	lsls	r3, r3, #31
 800313c:	d405      	bmi.n	800314a <_puts_r+0x36>
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	0598      	lsls	r0, r3, #22
 8003142:	d402      	bmi.n	800314a <_puts_r+0x36>
 8003144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003146:	f001 fa76 	bl	8004636 <__retarget_lock_acquire_recursive>
 800314a:	89a3      	ldrh	r3, [r4, #12]
 800314c:	0719      	lsls	r1, r3, #28
 800314e:	d51d      	bpl.n	800318c <_puts_r+0x78>
 8003150:	6923      	ldr	r3, [r4, #16]
 8003152:	b1db      	cbz	r3, 800318c <_puts_r+0x78>
 8003154:	3e01      	subs	r6, #1
 8003156:	68a3      	ldr	r3, [r4, #8]
 8003158:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800315c:	3b01      	subs	r3, #1
 800315e:	60a3      	str	r3, [r4, #8]
 8003160:	bb39      	cbnz	r1, 80031b2 <_puts_r+0x9e>
 8003162:	2b00      	cmp	r3, #0
 8003164:	da38      	bge.n	80031d8 <_puts_r+0xc4>
 8003166:	4622      	mov	r2, r4
 8003168:	210a      	movs	r1, #10
 800316a:	4628      	mov	r0, r5
 800316c:	f000 f93e 	bl	80033ec <__swbuf_r>
 8003170:	3001      	adds	r0, #1
 8003172:	d011      	beq.n	8003198 <_puts_r+0x84>
 8003174:	250a      	movs	r5, #10
 8003176:	e011      	b.n	800319c <_puts_r+0x88>
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <_puts_r+0xd4>)
 800317a:	429c      	cmp	r4, r3
 800317c:	d101      	bne.n	8003182 <_puts_r+0x6e>
 800317e:	68ac      	ldr	r4, [r5, #8]
 8003180:	e7da      	b.n	8003138 <_puts_r+0x24>
 8003182:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <_puts_r+0xd8>)
 8003184:	429c      	cmp	r4, r3
 8003186:	bf08      	it	eq
 8003188:	68ec      	ldreq	r4, [r5, #12]
 800318a:	e7d5      	b.n	8003138 <_puts_r+0x24>
 800318c:	4621      	mov	r1, r4
 800318e:	4628      	mov	r0, r5
 8003190:	f000 f97e 	bl	8003490 <__swsetup_r>
 8003194:	2800      	cmp	r0, #0
 8003196:	d0dd      	beq.n	8003154 <_puts_r+0x40>
 8003198:	f04f 35ff 	mov.w	r5, #4294967295
 800319c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800319e:	07da      	lsls	r2, r3, #31
 80031a0:	d405      	bmi.n	80031ae <_puts_r+0x9a>
 80031a2:	89a3      	ldrh	r3, [r4, #12]
 80031a4:	059b      	lsls	r3, r3, #22
 80031a6:	d402      	bmi.n	80031ae <_puts_r+0x9a>
 80031a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031aa:	f001 fa45 	bl	8004638 <__retarget_lock_release_recursive>
 80031ae:	4628      	mov	r0, r5
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da04      	bge.n	80031c0 <_puts_r+0xac>
 80031b6:	69a2      	ldr	r2, [r4, #24]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	dc06      	bgt.n	80031ca <_puts_r+0xb6>
 80031bc:	290a      	cmp	r1, #10
 80031be:	d004      	beq.n	80031ca <_puts_r+0xb6>
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	6022      	str	r2, [r4, #0]
 80031c6:	7019      	strb	r1, [r3, #0]
 80031c8:	e7c5      	b.n	8003156 <_puts_r+0x42>
 80031ca:	4622      	mov	r2, r4
 80031cc:	4628      	mov	r0, r5
 80031ce:	f000 f90d 	bl	80033ec <__swbuf_r>
 80031d2:	3001      	adds	r0, #1
 80031d4:	d1bf      	bne.n	8003156 <_puts_r+0x42>
 80031d6:	e7df      	b.n	8003198 <_puts_r+0x84>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	250a      	movs	r5, #10
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	6022      	str	r2, [r4, #0]
 80031e0:	701d      	strb	r5, [r3, #0]
 80031e2:	e7db      	b.n	800319c <_puts_r+0x88>
 80031e4:	080066c8 	.word	0x080066c8
 80031e8:	080066e8 	.word	0x080066e8
 80031ec:	080066a8 	.word	0x080066a8

080031f0 <puts>:
 80031f0:	4b02      	ldr	r3, [pc, #8]	; (80031fc <puts+0xc>)
 80031f2:	4601      	mov	r1, r0
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	f7ff bf8d 	b.w	8003114 <_puts_r>
 80031fa:	bf00      	nop
 80031fc:	2000000c 	.word	0x2000000c

08003200 <_sbrk_r>:
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4d06      	ldr	r5, [pc, #24]	; (800321c <_sbrk_r+0x1c>)
 8003204:	2300      	movs	r3, #0
 8003206:	4604      	mov	r4, r0
 8003208:	4608      	mov	r0, r1
 800320a:	602b      	str	r3, [r5, #0]
 800320c:	f7fe fba0 	bl	8001950 <_sbrk>
 8003210:	1c43      	adds	r3, r0, #1
 8003212:	d102      	bne.n	800321a <_sbrk_r+0x1a>
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	b103      	cbz	r3, 800321a <_sbrk_r+0x1a>
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	bd38      	pop	{r3, r4, r5, pc}
 800321c:	20002a60 	.word	0x20002a60

08003220 <iscanf>:
 8003220:	b40f      	push	{r0, r1, r2, r3}
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <iscanf+0x2c>)
 8003224:	b513      	push	{r0, r1, r4, lr}
 8003226:	681c      	ldr	r4, [r3, #0]
 8003228:	b124      	cbz	r4, 8003234 <iscanf+0x14>
 800322a:	69a3      	ldr	r3, [r4, #24]
 800322c:	b913      	cbnz	r3, 8003234 <iscanf+0x14>
 800322e:	4620      	mov	r0, r4
 8003230:	f001 f942 	bl	80044b8 <__sinit>
 8003234:	ab05      	add	r3, sp, #20
 8003236:	9a04      	ldr	r2, [sp, #16]
 8003238:	6861      	ldr	r1, [r4, #4]
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	4620      	mov	r0, r4
 800323e:	f002 f905 	bl	800544c <_vfiscanf_r>
 8003242:	b002      	add	sp, #8
 8003244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003248:	b004      	add	sp, #16
 800324a:	4770      	bx	lr
 800324c:	2000000c 	.word	0x2000000c

08003250 <setbuf>:
 8003250:	2900      	cmp	r1, #0
 8003252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003256:	bf0c      	ite	eq
 8003258:	2202      	moveq	r2, #2
 800325a:	2200      	movne	r2, #0
 800325c:	f000 b800 	b.w	8003260 <setvbuf>

08003260 <setvbuf>:
 8003260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003264:	461d      	mov	r5, r3
 8003266:	4b5d      	ldr	r3, [pc, #372]	; (80033dc <setvbuf+0x17c>)
 8003268:	681f      	ldr	r7, [r3, #0]
 800326a:	4604      	mov	r4, r0
 800326c:	460e      	mov	r6, r1
 800326e:	4690      	mov	r8, r2
 8003270:	b127      	cbz	r7, 800327c <setvbuf+0x1c>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	b913      	cbnz	r3, 800327c <setvbuf+0x1c>
 8003276:	4638      	mov	r0, r7
 8003278:	f001 f91e 	bl	80044b8 <__sinit>
 800327c:	4b58      	ldr	r3, [pc, #352]	; (80033e0 <setvbuf+0x180>)
 800327e:	429c      	cmp	r4, r3
 8003280:	d167      	bne.n	8003352 <setvbuf+0xf2>
 8003282:	687c      	ldr	r4, [r7, #4]
 8003284:	f1b8 0f02 	cmp.w	r8, #2
 8003288:	d006      	beq.n	8003298 <setvbuf+0x38>
 800328a:	f1b8 0f01 	cmp.w	r8, #1
 800328e:	f200 809f 	bhi.w	80033d0 <setvbuf+0x170>
 8003292:	2d00      	cmp	r5, #0
 8003294:	f2c0 809c 	blt.w	80033d0 <setvbuf+0x170>
 8003298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800329a:	07db      	lsls	r3, r3, #31
 800329c:	d405      	bmi.n	80032aa <setvbuf+0x4a>
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	0598      	lsls	r0, r3, #22
 80032a2:	d402      	bmi.n	80032aa <setvbuf+0x4a>
 80032a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032a6:	f001 f9c6 	bl	8004636 <__retarget_lock_acquire_recursive>
 80032aa:	4621      	mov	r1, r4
 80032ac:	4638      	mov	r0, r7
 80032ae:	f001 f85d 	bl	800436c <_fflush_r>
 80032b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032b4:	b141      	cbz	r1, 80032c8 <setvbuf+0x68>
 80032b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032ba:	4299      	cmp	r1, r3
 80032bc:	d002      	beq.n	80032c4 <setvbuf+0x64>
 80032be:	4638      	mov	r0, r7
 80032c0:	f7ff f9fc 	bl	80026bc <_free_r>
 80032c4:	2300      	movs	r3, #0
 80032c6:	6363      	str	r3, [r4, #52]	; 0x34
 80032c8:	2300      	movs	r3, #0
 80032ca:	61a3      	str	r3, [r4, #24]
 80032cc:	6063      	str	r3, [r4, #4]
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	0619      	lsls	r1, r3, #24
 80032d2:	d503      	bpl.n	80032dc <setvbuf+0x7c>
 80032d4:	6921      	ldr	r1, [r4, #16]
 80032d6:	4638      	mov	r0, r7
 80032d8:	f7ff f9f0 	bl	80026bc <_free_r>
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	f1b8 0f02 	cmp.w	r8, #2
 80032ea:	81a3      	strh	r3, [r4, #12]
 80032ec:	d06c      	beq.n	80033c8 <setvbuf+0x168>
 80032ee:	ab01      	add	r3, sp, #4
 80032f0:	466a      	mov	r2, sp
 80032f2:	4621      	mov	r1, r4
 80032f4:	4638      	mov	r0, r7
 80032f6:	f001 f9a0 	bl	800463a <__swhatbuf_r>
 80032fa:	89a3      	ldrh	r3, [r4, #12]
 80032fc:	4318      	orrs	r0, r3
 80032fe:	81a0      	strh	r0, [r4, #12]
 8003300:	2d00      	cmp	r5, #0
 8003302:	d130      	bne.n	8003366 <setvbuf+0x106>
 8003304:	9d00      	ldr	r5, [sp, #0]
 8003306:	4628      	mov	r0, r5
 8003308:	f7ff f9c8 	bl	800269c <malloc>
 800330c:	4606      	mov	r6, r0
 800330e:	2800      	cmp	r0, #0
 8003310:	d155      	bne.n	80033be <setvbuf+0x15e>
 8003312:	f8dd 9000 	ldr.w	r9, [sp]
 8003316:	45a9      	cmp	r9, r5
 8003318:	d14a      	bne.n	80033b0 <setvbuf+0x150>
 800331a:	f04f 35ff 	mov.w	r5, #4294967295
 800331e:	2200      	movs	r2, #0
 8003320:	60a2      	str	r2, [r4, #8]
 8003322:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003326:	6022      	str	r2, [r4, #0]
 8003328:	6122      	str	r2, [r4, #16]
 800332a:	2201      	movs	r2, #1
 800332c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003330:	6162      	str	r2, [r4, #20]
 8003332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	07d2      	lsls	r2, r2, #31
 800333a:	81a3      	strh	r3, [r4, #12]
 800333c:	d405      	bmi.n	800334a <setvbuf+0xea>
 800333e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003342:	d102      	bne.n	800334a <setvbuf+0xea>
 8003344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003346:	f001 f977 	bl	8004638 <__retarget_lock_release_recursive>
 800334a:	4628      	mov	r0, r5
 800334c:	b003      	add	sp, #12
 800334e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <setvbuf+0x184>)
 8003354:	429c      	cmp	r4, r3
 8003356:	d101      	bne.n	800335c <setvbuf+0xfc>
 8003358:	68bc      	ldr	r4, [r7, #8]
 800335a:	e793      	b.n	8003284 <setvbuf+0x24>
 800335c:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <setvbuf+0x188>)
 800335e:	429c      	cmp	r4, r3
 8003360:	bf08      	it	eq
 8003362:	68fc      	ldreq	r4, [r7, #12]
 8003364:	e78e      	b.n	8003284 <setvbuf+0x24>
 8003366:	2e00      	cmp	r6, #0
 8003368:	d0cd      	beq.n	8003306 <setvbuf+0xa6>
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	b913      	cbnz	r3, 8003374 <setvbuf+0x114>
 800336e:	4638      	mov	r0, r7
 8003370:	f001 f8a2 	bl	80044b8 <__sinit>
 8003374:	f1b8 0f01 	cmp.w	r8, #1
 8003378:	bf08      	it	eq
 800337a:	89a3      	ldrheq	r3, [r4, #12]
 800337c:	6026      	str	r6, [r4, #0]
 800337e:	bf04      	itt	eq
 8003380:	f043 0301 	orreq.w	r3, r3, #1
 8003384:	81a3      	strheq	r3, [r4, #12]
 8003386:	89a2      	ldrh	r2, [r4, #12]
 8003388:	f012 0308 	ands.w	r3, r2, #8
 800338c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003390:	d01c      	beq.n	80033cc <setvbuf+0x16c>
 8003392:	07d3      	lsls	r3, r2, #31
 8003394:	bf41      	itttt	mi
 8003396:	2300      	movmi	r3, #0
 8003398:	426d      	negmi	r5, r5
 800339a:	60a3      	strmi	r3, [r4, #8]
 800339c:	61a5      	strmi	r5, [r4, #24]
 800339e:	bf58      	it	pl
 80033a0:	60a5      	strpl	r5, [r4, #8]
 80033a2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80033a4:	f015 0501 	ands.w	r5, r5, #1
 80033a8:	d115      	bne.n	80033d6 <setvbuf+0x176>
 80033aa:	f412 7f00 	tst.w	r2, #512	; 0x200
 80033ae:	e7c8      	b.n	8003342 <setvbuf+0xe2>
 80033b0:	4648      	mov	r0, r9
 80033b2:	f7ff f973 	bl	800269c <malloc>
 80033b6:	4606      	mov	r6, r0
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d0ae      	beq.n	800331a <setvbuf+0xba>
 80033bc:	464d      	mov	r5, r9
 80033be:	89a3      	ldrh	r3, [r4, #12]
 80033c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c4:	81a3      	strh	r3, [r4, #12]
 80033c6:	e7d0      	b.n	800336a <setvbuf+0x10a>
 80033c8:	2500      	movs	r5, #0
 80033ca:	e7a8      	b.n	800331e <setvbuf+0xbe>
 80033cc:	60a3      	str	r3, [r4, #8]
 80033ce:	e7e8      	b.n	80033a2 <setvbuf+0x142>
 80033d0:	f04f 35ff 	mov.w	r5, #4294967295
 80033d4:	e7b9      	b.n	800334a <setvbuf+0xea>
 80033d6:	2500      	movs	r5, #0
 80033d8:	e7b7      	b.n	800334a <setvbuf+0xea>
 80033da:	bf00      	nop
 80033dc:	2000000c 	.word	0x2000000c
 80033e0:	080066c8 	.word	0x080066c8
 80033e4:	080066e8 	.word	0x080066e8
 80033e8:	080066a8 	.word	0x080066a8

080033ec <__swbuf_r>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	460e      	mov	r6, r1
 80033f0:	4614      	mov	r4, r2
 80033f2:	4605      	mov	r5, r0
 80033f4:	b118      	cbz	r0, 80033fe <__swbuf_r+0x12>
 80033f6:	6983      	ldr	r3, [r0, #24]
 80033f8:	b90b      	cbnz	r3, 80033fe <__swbuf_r+0x12>
 80033fa:	f001 f85d 	bl	80044b8 <__sinit>
 80033fe:	4b21      	ldr	r3, [pc, #132]	; (8003484 <__swbuf_r+0x98>)
 8003400:	429c      	cmp	r4, r3
 8003402:	d12b      	bne.n	800345c <__swbuf_r+0x70>
 8003404:	686c      	ldr	r4, [r5, #4]
 8003406:	69a3      	ldr	r3, [r4, #24]
 8003408:	60a3      	str	r3, [r4, #8]
 800340a:	89a3      	ldrh	r3, [r4, #12]
 800340c:	071a      	lsls	r2, r3, #28
 800340e:	d52f      	bpl.n	8003470 <__swbuf_r+0x84>
 8003410:	6923      	ldr	r3, [r4, #16]
 8003412:	b36b      	cbz	r3, 8003470 <__swbuf_r+0x84>
 8003414:	6923      	ldr	r3, [r4, #16]
 8003416:	6820      	ldr	r0, [r4, #0]
 8003418:	1ac0      	subs	r0, r0, r3
 800341a:	6963      	ldr	r3, [r4, #20]
 800341c:	b2f6      	uxtb	r6, r6
 800341e:	4283      	cmp	r3, r0
 8003420:	4637      	mov	r7, r6
 8003422:	dc04      	bgt.n	800342e <__swbuf_r+0x42>
 8003424:	4621      	mov	r1, r4
 8003426:	4628      	mov	r0, r5
 8003428:	f000 ffa0 	bl	800436c <_fflush_r>
 800342c:	bb30      	cbnz	r0, 800347c <__swbuf_r+0x90>
 800342e:	68a3      	ldr	r3, [r4, #8]
 8003430:	3b01      	subs	r3, #1
 8003432:	60a3      	str	r3, [r4, #8]
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	6022      	str	r2, [r4, #0]
 800343a:	701e      	strb	r6, [r3, #0]
 800343c:	6963      	ldr	r3, [r4, #20]
 800343e:	3001      	adds	r0, #1
 8003440:	4283      	cmp	r3, r0
 8003442:	d004      	beq.n	800344e <__swbuf_r+0x62>
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	07db      	lsls	r3, r3, #31
 8003448:	d506      	bpl.n	8003458 <__swbuf_r+0x6c>
 800344a:	2e0a      	cmp	r6, #10
 800344c:	d104      	bne.n	8003458 <__swbuf_r+0x6c>
 800344e:	4621      	mov	r1, r4
 8003450:	4628      	mov	r0, r5
 8003452:	f000 ff8b 	bl	800436c <_fflush_r>
 8003456:	b988      	cbnz	r0, 800347c <__swbuf_r+0x90>
 8003458:	4638      	mov	r0, r7
 800345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <__swbuf_r+0x9c>)
 800345e:	429c      	cmp	r4, r3
 8003460:	d101      	bne.n	8003466 <__swbuf_r+0x7a>
 8003462:	68ac      	ldr	r4, [r5, #8]
 8003464:	e7cf      	b.n	8003406 <__swbuf_r+0x1a>
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <__swbuf_r+0xa0>)
 8003468:	429c      	cmp	r4, r3
 800346a:	bf08      	it	eq
 800346c:	68ec      	ldreq	r4, [r5, #12]
 800346e:	e7ca      	b.n	8003406 <__swbuf_r+0x1a>
 8003470:	4621      	mov	r1, r4
 8003472:	4628      	mov	r0, r5
 8003474:	f000 f80c 	bl	8003490 <__swsetup_r>
 8003478:	2800      	cmp	r0, #0
 800347a:	d0cb      	beq.n	8003414 <__swbuf_r+0x28>
 800347c:	f04f 37ff 	mov.w	r7, #4294967295
 8003480:	e7ea      	b.n	8003458 <__swbuf_r+0x6c>
 8003482:	bf00      	nop
 8003484:	080066c8 	.word	0x080066c8
 8003488:	080066e8 	.word	0x080066e8
 800348c:	080066a8 	.word	0x080066a8

08003490 <__swsetup_r>:
 8003490:	4b32      	ldr	r3, [pc, #200]	; (800355c <__swsetup_r+0xcc>)
 8003492:	b570      	push	{r4, r5, r6, lr}
 8003494:	681d      	ldr	r5, [r3, #0]
 8003496:	4606      	mov	r6, r0
 8003498:	460c      	mov	r4, r1
 800349a:	b125      	cbz	r5, 80034a6 <__swsetup_r+0x16>
 800349c:	69ab      	ldr	r3, [r5, #24]
 800349e:	b913      	cbnz	r3, 80034a6 <__swsetup_r+0x16>
 80034a0:	4628      	mov	r0, r5
 80034a2:	f001 f809 	bl	80044b8 <__sinit>
 80034a6:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <__swsetup_r+0xd0>)
 80034a8:	429c      	cmp	r4, r3
 80034aa:	d10f      	bne.n	80034cc <__swsetup_r+0x3c>
 80034ac:	686c      	ldr	r4, [r5, #4]
 80034ae:	89a3      	ldrh	r3, [r4, #12]
 80034b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034b4:	0719      	lsls	r1, r3, #28
 80034b6:	d42c      	bmi.n	8003512 <__swsetup_r+0x82>
 80034b8:	06dd      	lsls	r5, r3, #27
 80034ba:	d411      	bmi.n	80034e0 <__swsetup_r+0x50>
 80034bc:	2309      	movs	r3, #9
 80034be:	6033      	str	r3, [r6, #0]
 80034c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034c4:	81a3      	strh	r3, [r4, #12]
 80034c6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ca:	e03e      	b.n	800354a <__swsetup_r+0xba>
 80034cc:	4b25      	ldr	r3, [pc, #148]	; (8003564 <__swsetup_r+0xd4>)
 80034ce:	429c      	cmp	r4, r3
 80034d0:	d101      	bne.n	80034d6 <__swsetup_r+0x46>
 80034d2:	68ac      	ldr	r4, [r5, #8]
 80034d4:	e7eb      	b.n	80034ae <__swsetup_r+0x1e>
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <__swsetup_r+0xd8>)
 80034d8:	429c      	cmp	r4, r3
 80034da:	bf08      	it	eq
 80034dc:	68ec      	ldreq	r4, [r5, #12]
 80034de:	e7e6      	b.n	80034ae <__swsetup_r+0x1e>
 80034e0:	0758      	lsls	r0, r3, #29
 80034e2:	d512      	bpl.n	800350a <__swsetup_r+0x7a>
 80034e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034e6:	b141      	cbz	r1, 80034fa <__swsetup_r+0x6a>
 80034e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034ec:	4299      	cmp	r1, r3
 80034ee:	d002      	beq.n	80034f6 <__swsetup_r+0x66>
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7ff f8e3 	bl	80026bc <_free_r>
 80034f6:	2300      	movs	r3, #0
 80034f8:	6363      	str	r3, [r4, #52]	; 0x34
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	2300      	movs	r3, #0
 8003504:	6063      	str	r3, [r4, #4]
 8003506:	6923      	ldr	r3, [r4, #16]
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	f043 0308 	orr.w	r3, r3, #8
 8003510:	81a3      	strh	r3, [r4, #12]
 8003512:	6923      	ldr	r3, [r4, #16]
 8003514:	b94b      	cbnz	r3, 800352a <__swsetup_r+0x9a>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800351c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003520:	d003      	beq.n	800352a <__swsetup_r+0x9a>
 8003522:	4621      	mov	r1, r4
 8003524:	4630      	mov	r0, r6
 8003526:	f001 f8ad 	bl	8004684 <__smakebuf_r>
 800352a:	89a0      	ldrh	r0, [r4, #12]
 800352c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003530:	f010 0301 	ands.w	r3, r0, #1
 8003534:	d00a      	beq.n	800354c <__swsetup_r+0xbc>
 8003536:	2300      	movs	r3, #0
 8003538:	60a3      	str	r3, [r4, #8]
 800353a:	6963      	ldr	r3, [r4, #20]
 800353c:	425b      	negs	r3, r3
 800353e:	61a3      	str	r3, [r4, #24]
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	b943      	cbnz	r3, 8003556 <__swsetup_r+0xc6>
 8003544:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003548:	d1ba      	bne.n	80034c0 <__swsetup_r+0x30>
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	0781      	lsls	r1, r0, #30
 800354e:	bf58      	it	pl
 8003550:	6963      	ldrpl	r3, [r4, #20]
 8003552:	60a3      	str	r3, [r4, #8]
 8003554:	e7f4      	b.n	8003540 <__swsetup_r+0xb0>
 8003556:	2000      	movs	r0, #0
 8003558:	e7f7      	b.n	800354a <__swsetup_r+0xba>
 800355a:	bf00      	nop
 800355c:	2000000c 	.word	0x2000000c
 8003560:	080066c8 	.word	0x080066c8
 8003564:	080066e8 	.word	0x080066e8
 8003568:	080066a8 	.word	0x080066a8

0800356c <quorem>:
 800356c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003570:	6903      	ldr	r3, [r0, #16]
 8003572:	690c      	ldr	r4, [r1, #16]
 8003574:	42a3      	cmp	r3, r4
 8003576:	4607      	mov	r7, r0
 8003578:	f2c0 8081 	blt.w	800367e <quorem+0x112>
 800357c:	3c01      	subs	r4, #1
 800357e:	f101 0814 	add.w	r8, r1, #20
 8003582:	f100 0514 	add.w	r5, r0, #20
 8003586:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003594:	3301      	adds	r3, #1
 8003596:	429a      	cmp	r2, r3
 8003598:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800359c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80035a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80035a4:	d331      	bcc.n	800360a <quorem+0x9e>
 80035a6:	f04f 0e00 	mov.w	lr, #0
 80035aa:	4640      	mov	r0, r8
 80035ac:	46ac      	mov	ip, r5
 80035ae:	46f2      	mov	sl, lr
 80035b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80035b4:	b293      	uxth	r3, r2
 80035b6:	fb06 e303 	mla	r3, r6, r3, lr
 80035ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80035be:	b29b      	uxth	r3, r3
 80035c0:	ebaa 0303 	sub.w	r3, sl, r3
 80035c4:	0c12      	lsrs	r2, r2, #16
 80035c6:	f8dc a000 	ldr.w	sl, [ip]
 80035ca:	fb06 e202 	mla	r2, r6, r2, lr
 80035ce:	fa13 f38a 	uxtah	r3, r3, sl
 80035d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80035d6:	fa1f fa82 	uxth.w	sl, r2
 80035da:	f8dc 2000 	ldr.w	r2, [ip]
 80035de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80035e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035ec:	4581      	cmp	r9, r0
 80035ee:	f84c 3b04 	str.w	r3, [ip], #4
 80035f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80035f6:	d2db      	bcs.n	80035b0 <quorem+0x44>
 80035f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80035fc:	b92b      	cbnz	r3, 800360a <quorem+0x9e>
 80035fe:	9b01      	ldr	r3, [sp, #4]
 8003600:	3b04      	subs	r3, #4
 8003602:	429d      	cmp	r5, r3
 8003604:	461a      	mov	r2, r3
 8003606:	d32e      	bcc.n	8003666 <quorem+0xfa>
 8003608:	613c      	str	r4, [r7, #16]
 800360a:	4638      	mov	r0, r7
 800360c:	f001 fb12 	bl	8004c34 <__mcmp>
 8003610:	2800      	cmp	r0, #0
 8003612:	db24      	blt.n	800365e <quorem+0xf2>
 8003614:	3601      	adds	r6, #1
 8003616:	4628      	mov	r0, r5
 8003618:	f04f 0c00 	mov.w	ip, #0
 800361c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003620:	f8d0 e000 	ldr.w	lr, [r0]
 8003624:	b293      	uxth	r3, r2
 8003626:	ebac 0303 	sub.w	r3, ip, r3
 800362a:	0c12      	lsrs	r2, r2, #16
 800362c:	fa13 f38e 	uxtah	r3, r3, lr
 8003630:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003634:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003638:	b29b      	uxth	r3, r3
 800363a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800363e:	45c1      	cmp	r9, r8
 8003640:	f840 3b04 	str.w	r3, [r0], #4
 8003644:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003648:	d2e8      	bcs.n	800361c <quorem+0xb0>
 800364a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800364e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003652:	b922      	cbnz	r2, 800365e <quorem+0xf2>
 8003654:	3b04      	subs	r3, #4
 8003656:	429d      	cmp	r5, r3
 8003658:	461a      	mov	r2, r3
 800365a:	d30a      	bcc.n	8003672 <quorem+0x106>
 800365c:	613c      	str	r4, [r7, #16]
 800365e:	4630      	mov	r0, r6
 8003660:	b003      	add	sp, #12
 8003662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	3b04      	subs	r3, #4
 800366a:	2a00      	cmp	r2, #0
 800366c:	d1cc      	bne.n	8003608 <quorem+0x9c>
 800366e:	3c01      	subs	r4, #1
 8003670:	e7c7      	b.n	8003602 <quorem+0x96>
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	3b04      	subs	r3, #4
 8003676:	2a00      	cmp	r2, #0
 8003678:	d1f0      	bne.n	800365c <quorem+0xf0>
 800367a:	3c01      	subs	r4, #1
 800367c:	e7eb      	b.n	8003656 <quorem+0xea>
 800367e:	2000      	movs	r0, #0
 8003680:	e7ee      	b.n	8003660 <quorem+0xf4>
 8003682:	0000      	movs	r0, r0
 8003684:	0000      	movs	r0, r0
	...

08003688 <_dtoa_r>:
 8003688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368c:	ed2d 8b02 	vpush	{d8}
 8003690:	ec57 6b10 	vmov	r6, r7, d0
 8003694:	b095      	sub	sp, #84	; 0x54
 8003696:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003698:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800369c:	9105      	str	r1, [sp, #20]
 800369e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80036a2:	4604      	mov	r4, r0
 80036a4:	9209      	str	r2, [sp, #36]	; 0x24
 80036a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80036a8:	b975      	cbnz	r5, 80036c8 <_dtoa_r+0x40>
 80036aa:	2010      	movs	r0, #16
 80036ac:	f7fe fff6 	bl	800269c <malloc>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6260      	str	r0, [r4, #36]	; 0x24
 80036b4:	b920      	cbnz	r0, 80036c0 <_dtoa_r+0x38>
 80036b6:	4bb2      	ldr	r3, [pc, #712]	; (8003980 <_dtoa_r+0x2f8>)
 80036b8:	21ea      	movs	r1, #234	; 0xea
 80036ba:	48b2      	ldr	r0, [pc, #712]	; (8003984 <_dtoa_r+0x2fc>)
 80036bc:	f002 fb34 	bl	8005d28 <__assert_func>
 80036c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80036c4:	6005      	str	r5, [r0, #0]
 80036c6:	60c5      	str	r5, [r0, #12]
 80036c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	b151      	cbz	r1, 80036e4 <_dtoa_r+0x5c>
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	604a      	str	r2, [r1, #4]
 80036d2:	2301      	movs	r3, #1
 80036d4:	4093      	lsls	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]
 80036d8:	4620      	mov	r0, r4
 80036da:	f001 f86d 	bl	80047b8 <_Bfree>
 80036de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	1e3b      	subs	r3, r7, #0
 80036e6:	bfb9      	ittee	lt
 80036e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80036ec:	9303      	strlt	r3, [sp, #12]
 80036ee:	2300      	movge	r3, #0
 80036f0:	f8c8 3000 	strge.w	r3, [r8]
 80036f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80036f8:	4ba3      	ldr	r3, [pc, #652]	; (8003988 <_dtoa_r+0x300>)
 80036fa:	bfbc      	itt	lt
 80036fc:	2201      	movlt	r2, #1
 80036fe:	f8c8 2000 	strlt.w	r2, [r8]
 8003702:	ea33 0309 	bics.w	r3, r3, r9
 8003706:	d11b      	bne.n	8003740 <_dtoa_r+0xb8>
 8003708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800370a:	f242 730f 	movw	r3, #9999	; 0x270f
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003714:	4333      	orrs	r3, r6
 8003716:	f000 857a 	beq.w	800420e <_dtoa_r+0xb86>
 800371a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800371c:	b963      	cbnz	r3, 8003738 <_dtoa_r+0xb0>
 800371e:	4b9b      	ldr	r3, [pc, #620]	; (800398c <_dtoa_r+0x304>)
 8003720:	e024      	b.n	800376c <_dtoa_r+0xe4>
 8003722:	4b9b      	ldr	r3, [pc, #620]	; (8003990 <_dtoa_r+0x308>)
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	3308      	adds	r3, #8
 8003728:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	9800      	ldr	r0, [sp, #0]
 800372e:	b015      	add	sp, #84	; 0x54
 8003730:	ecbd 8b02 	vpop	{d8}
 8003734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003738:	4b94      	ldr	r3, [pc, #592]	; (800398c <_dtoa_r+0x304>)
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	3303      	adds	r3, #3
 800373e:	e7f3      	b.n	8003728 <_dtoa_r+0xa0>
 8003740:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003744:	2200      	movs	r2, #0
 8003746:	ec51 0b17 	vmov	r0, r1, d7
 800374a:	2300      	movs	r3, #0
 800374c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003750:	f7fd f9d2 	bl	8000af8 <__aeabi_dcmpeq>
 8003754:	4680      	mov	r8, r0
 8003756:	b158      	cbz	r0, 8003770 <_dtoa_r+0xe8>
 8003758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800375a:	2301      	movs	r3, #1
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8551 	beq.w	8004208 <_dtoa_r+0xb80>
 8003766:	488b      	ldr	r0, [pc, #556]	; (8003994 <_dtoa_r+0x30c>)
 8003768:	6018      	str	r0, [r3, #0]
 800376a:	1e43      	subs	r3, r0, #1
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	e7dd      	b.n	800372c <_dtoa_r+0xa4>
 8003770:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003774:	aa12      	add	r2, sp, #72	; 0x48
 8003776:	a913      	add	r1, sp, #76	; 0x4c
 8003778:	4620      	mov	r0, r4
 800377a:	f001 faff 	bl	8004d7c <__d2b>
 800377e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003782:	4683      	mov	fp, r0
 8003784:	2d00      	cmp	r5, #0
 8003786:	d07c      	beq.n	8003882 <_dtoa_r+0x1fa>
 8003788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800378a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800378e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003792:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003796:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800379a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800379e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80037a2:	4b7d      	ldr	r3, [pc, #500]	; (8003998 <_dtoa_r+0x310>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	4630      	mov	r0, r6
 80037a8:	4639      	mov	r1, r7
 80037aa:	f7fc fd85 	bl	80002b8 <__aeabi_dsub>
 80037ae:	a36e      	add	r3, pc, #440	; (adr r3, 8003968 <_dtoa_r+0x2e0>)
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f7fc ff38 	bl	8000628 <__aeabi_dmul>
 80037b8:	a36d      	add	r3, pc, #436	; (adr r3, 8003970 <_dtoa_r+0x2e8>)
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f7fc fd7d 	bl	80002bc <__adddf3>
 80037c2:	4606      	mov	r6, r0
 80037c4:	4628      	mov	r0, r5
 80037c6:	460f      	mov	r7, r1
 80037c8:	f7fc fec4 	bl	8000554 <__aeabi_i2d>
 80037cc:	a36a      	add	r3, pc, #424	; (adr r3, 8003978 <_dtoa_r+0x2f0>)
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f7fc ff29 	bl	8000628 <__aeabi_dmul>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4630      	mov	r0, r6
 80037dc:	4639      	mov	r1, r7
 80037de:	f7fc fd6d 	bl	80002bc <__adddf3>
 80037e2:	4606      	mov	r6, r0
 80037e4:	460f      	mov	r7, r1
 80037e6:	f7fd f9cf 	bl	8000b88 <__aeabi_d2iz>
 80037ea:	2200      	movs	r2, #0
 80037ec:	4682      	mov	sl, r0
 80037ee:	2300      	movs	r3, #0
 80037f0:	4630      	mov	r0, r6
 80037f2:	4639      	mov	r1, r7
 80037f4:	f7fd f98a 	bl	8000b0c <__aeabi_dcmplt>
 80037f8:	b148      	cbz	r0, 800380e <_dtoa_r+0x186>
 80037fa:	4650      	mov	r0, sl
 80037fc:	f7fc feaa 	bl	8000554 <__aeabi_i2d>
 8003800:	4632      	mov	r2, r6
 8003802:	463b      	mov	r3, r7
 8003804:	f7fd f978 	bl	8000af8 <__aeabi_dcmpeq>
 8003808:	b908      	cbnz	r0, 800380e <_dtoa_r+0x186>
 800380a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800380e:	f1ba 0f16 	cmp.w	sl, #22
 8003812:	d854      	bhi.n	80038be <_dtoa_r+0x236>
 8003814:	4b61      	ldr	r3, [pc, #388]	; (800399c <_dtoa_r+0x314>)
 8003816:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003822:	f7fd f973 	bl	8000b0c <__aeabi_dcmplt>
 8003826:	2800      	cmp	r0, #0
 8003828:	d04b      	beq.n	80038c2 <_dtoa_r+0x23a>
 800382a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800382e:	2300      	movs	r3, #0
 8003830:	930e      	str	r3, [sp, #56]	; 0x38
 8003832:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003834:	1b5d      	subs	r5, r3, r5
 8003836:	1e6b      	subs	r3, r5, #1
 8003838:	9304      	str	r3, [sp, #16]
 800383a:	bf43      	ittte	mi
 800383c:	2300      	movmi	r3, #0
 800383e:	f1c5 0801 	rsbmi	r8, r5, #1
 8003842:	9304      	strmi	r3, [sp, #16]
 8003844:	f04f 0800 	movpl.w	r8, #0
 8003848:	f1ba 0f00 	cmp.w	sl, #0
 800384c:	db3b      	blt.n	80038c6 <_dtoa_r+0x23e>
 800384e:	9b04      	ldr	r3, [sp, #16]
 8003850:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003854:	4453      	add	r3, sl
 8003856:	9304      	str	r3, [sp, #16]
 8003858:	2300      	movs	r3, #0
 800385a:	9306      	str	r3, [sp, #24]
 800385c:	9b05      	ldr	r3, [sp, #20]
 800385e:	2b09      	cmp	r3, #9
 8003860:	d869      	bhi.n	8003936 <_dtoa_r+0x2ae>
 8003862:	2b05      	cmp	r3, #5
 8003864:	bfc4      	itt	gt
 8003866:	3b04      	subgt	r3, #4
 8003868:	9305      	strgt	r3, [sp, #20]
 800386a:	9b05      	ldr	r3, [sp, #20]
 800386c:	f1a3 0302 	sub.w	r3, r3, #2
 8003870:	bfcc      	ite	gt
 8003872:	2500      	movgt	r5, #0
 8003874:	2501      	movle	r5, #1
 8003876:	2b03      	cmp	r3, #3
 8003878:	d869      	bhi.n	800394e <_dtoa_r+0x2c6>
 800387a:	e8df f003 	tbb	[pc, r3]
 800387e:	4e2c      	.short	0x4e2c
 8003880:	5a4c      	.short	0x5a4c
 8003882:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003886:	441d      	add	r5, r3
 8003888:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800388c:	2b20      	cmp	r3, #32
 800388e:	bfc1      	itttt	gt
 8003890:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003894:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003898:	fa09 f303 	lslgt.w	r3, r9, r3
 800389c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80038a0:	bfda      	itte	le
 80038a2:	f1c3 0320 	rsble	r3, r3, #32
 80038a6:	fa06 f003 	lslle.w	r0, r6, r3
 80038aa:	4318      	orrgt	r0, r3
 80038ac:	f7fc fe42 	bl	8000534 <__aeabi_ui2d>
 80038b0:	2301      	movs	r3, #1
 80038b2:	4606      	mov	r6, r0
 80038b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80038b8:	3d01      	subs	r5, #1
 80038ba:	9310      	str	r3, [sp, #64]	; 0x40
 80038bc:	e771      	b.n	80037a2 <_dtoa_r+0x11a>
 80038be:	2301      	movs	r3, #1
 80038c0:	e7b6      	b.n	8003830 <_dtoa_r+0x1a8>
 80038c2:	900e      	str	r0, [sp, #56]	; 0x38
 80038c4:	e7b5      	b.n	8003832 <_dtoa_r+0x1aa>
 80038c6:	f1ca 0300 	rsb	r3, sl, #0
 80038ca:	9306      	str	r3, [sp, #24]
 80038cc:	2300      	movs	r3, #0
 80038ce:	eba8 080a 	sub.w	r8, r8, sl
 80038d2:	930d      	str	r3, [sp, #52]	; 0x34
 80038d4:	e7c2      	b.n	800385c <_dtoa_r+0x1d4>
 80038d6:	2300      	movs	r3, #0
 80038d8:	9308      	str	r3, [sp, #32]
 80038da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	dc39      	bgt.n	8003954 <_dtoa_r+0x2cc>
 80038e0:	f04f 0901 	mov.w	r9, #1
 80038e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80038e8:	464b      	mov	r3, r9
 80038ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80038ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80038f0:	2200      	movs	r2, #0
 80038f2:	6042      	str	r2, [r0, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	f102 0614 	add.w	r6, r2, #20
 80038fa:	429e      	cmp	r6, r3
 80038fc:	6841      	ldr	r1, [r0, #4]
 80038fe:	d92f      	bls.n	8003960 <_dtoa_r+0x2d8>
 8003900:	4620      	mov	r0, r4
 8003902:	f000 ff19 	bl	8004738 <_Balloc>
 8003906:	9000      	str	r0, [sp, #0]
 8003908:	2800      	cmp	r0, #0
 800390a:	d14b      	bne.n	80039a4 <_dtoa_r+0x31c>
 800390c:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <_dtoa_r+0x318>)
 800390e:	4602      	mov	r2, r0
 8003910:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003914:	e6d1      	b.n	80036ba <_dtoa_r+0x32>
 8003916:	2301      	movs	r3, #1
 8003918:	e7de      	b.n	80038d8 <_dtoa_r+0x250>
 800391a:	2300      	movs	r3, #0
 800391c:	9308      	str	r3, [sp, #32]
 800391e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003920:	eb0a 0903 	add.w	r9, sl, r3
 8003924:	f109 0301 	add.w	r3, r9, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	bfb8      	it	lt
 800392e:	2301      	movlt	r3, #1
 8003930:	e7dd      	b.n	80038ee <_dtoa_r+0x266>
 8003932:	2301      	movs	r3, #1
 8003934:	e7f2      	b.n	800391c <_dtoa_r+0x294>
 8003936:	2501      	movs	r5, #1
 8003938:	2300      	movs	r3, #0
 800393a:	9305      	str	r3, [sp, #20]
 800393c:	9508      	str	r5, [sp, #32]
 800393e:	f04f 39ff 	mov.w	r9, #4294967295
 8003942:	2200      	movs	r2, #0
 8003944:	f8cd 9004 	str.w	r9, [sp, #4]
 8003948:	2312      	movs	r3, #18
 800394a:	9209      	str	r2, [sp, #36]	; 0x24
 800394c:	e7cf      	b.n	80038ee <_dtoa_r+0x266>
 800394e:	2301      	movs	r3, #1
 8003950:	9308      	str	r3, [sp, #32]
 8003952:	e7f4      	b.n	800393e <_dtoa_r+0x2b6>
 8003954:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003958:	f8cd 9004 	str.w	r9, [sp, #4]
 800395c:	464b      	mov	r3, r9
 800395e:	e7c6      	b.n	80038ee <_dtoa_r+0x266>
 8003960:	3101      	adds	r1, #1
 8003962:	6041      	str	r1, [r0, #4]
 8003964:	0052      	lsls	r2, r2, #1
 8003966:	e7c6      	b.n	80038f6 <_dtoa_r+0x26e>
 8003968:	636f4361 	.word	0x636f4361
 800396c:	3fd287a7 	.word	0x3fd287a7
 8003970:	8b60c8b3 	.word	0x8b60c8b3
 8003974:	3fc68a28 	.word	0x3fc68a28
 8003978:	509f79fb 	.word	0x509f79fb
 800397c:	3fd34413 	.word	0x3fd34413
 8003980:	0800661f 	.word	0x0800661f
 8003984:	08006636 	.word	0x08006636
 8003988:	7ff00000 	.word	0x7ff00000
 800398c:	0800661b 	.word	0x0800661b
 8003990:	08006612 	.word	0x08006612
 8003994:	0800687a 	.word	0x0800687a
 8003998:	3ff80000 	.word	0x3ff80000
 800399c:	08006790 	.word	0x08006790
 80039a0:	08006695 	.word	0x08006695
 80039a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039a6:	9a00      	ldr	r2, [sp, #0]
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	9b01      	ldr	r3, [sp, #4]
 80039ac:	2b0e      	cmp	r3, #14
 80039ae:	f200 80ad 	bhi.w	8003b0c <_dtoa_r+0x484>
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	f000 80aa 	beq.w	8003b0c <_dtoa_r+0x484>
 80039b8:	f1ba 0f00 	cmp.w	sl, #0
 80039bc:	dd36      	ble.n	8003a2c <_dtoa_r+0x3a4>
 80039be:	4ac3      	ldr	r2, [pc, #780]	; (8003ccc <_dtoa_r+0x644>)
 80039c0:	f00a 030f 	and.w	r3, sl, #15
 80039c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80039c8:	ed93 7b00 	vldr	d7, [r3]
 80039cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80039d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80039d4:	eeb0 8a47 	vmov.f32	s16, s14
 80039d8:	eef0 8a67 	vmov.f32	s17, s15
 80039dc:	d016      	beq.n	8003a0c <_dtoa_r+0x384>
 80039de:	4bbc      	ldr	r3, [pc, #752]	; (8003cd0 <_dtoa_r+0x648>)
 80039e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039e8:	f7fc ff48 	bl	800087c <__aeabi_ddiv>
 80039ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039f0:	f007 070f 	and.w	r7, r7, #15
 80039f4:	2503      	movs	r5, #3
 80039f6:	4eb6      	ldr	r6, [pc, #728]	; (8003cd0 <_dtoa_r+0x648>)
 80039f8:	b957      	cbnz	r7, 8003a10 <_dtoa_r+0x388>
 80039fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039fe:	ec53 2b18 	vmov	r2, r3, d8
 8003a02:	f7fc ff3b 	bl	800087c <__aeabi_ddiv>
 8003a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a0a:	e029      	b.n	8003a60 <_dtoa_r+0x3d8>
 8003a0c:	2502      	movs	r5, #2
 8003a0e:	e7f2      	b.n	80039f6 <_dtoa_r+0x36e>
 8003a10:	07f9      	lsls	r1, r7, #31
 8003a12:	d508      	bpl.n	8003a26 <_dtoa_r+0x39e>
 8003a14:	ec51 0b18 	vmov	r0, r1, d8
 8003a18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003a1c:	f7fc fe04 	bl	8000628 <__aeabi_dmul>
 8003a20:	ec41 0b18 	vmov	d8, r0, r1
 8003a24:	3501      	adds	r5, #1
 8003a26:	107f      	asrs	r7, r7, #1
 8003a28:	3608      	adds	r6, #8
 8003a2a:	e7e5      	b.n	80039f8 <_dtoa_r+0x370>
 8003a2c:	f000 80a6 	beq.w	8003b7c <_dtoa_r+0x4f4>
 8003a30:	f1ca 0600 	rsb	r6, sl, #0
 8003a34:	4ba5      	ldr	r3, [pc, #660]	; (8003ccc <_dtoa_r+0x644>)
 8003a36:	4fa6      	ldr	r7, [pc, #664]	; (8003cd0 <_dtoa_r+0x648>)
 8003a38:	f006 020f 	and.w	r2, r6, #15
 8003a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a48:	f7fc fdee 	bl	8000628 <__aeabi_dmul>
 8003a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a50:	1136      	asrs	r6, r6, #4
 8003a52:	2300      	movs	r3, #0
 8003a54:	2502      	movs	r5, #2
 8003a56:	2e00      	cmp	r6, #0
 8003a58:	f040 8085 	bne.w	8003b66 <_dtoa_r+0x4de>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1d2      	bne.n	8003a06 <_dtoa_r+0x37e>
 8003a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 808c 	beq.w	8003b80 <_dtoa_r+0x4f8>
 8003a68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003a6c:	4b99      	ldr	r3, [pc, #612]	; (8003cd4 <_dtoa_r+0x64c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4630      	mov	r0, r6
 8003a72:	4639      	mov	r1, r7
 8003a74:	f7fd f84a 	bl	8000b0c <__aeabi_dcmplt>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	f000 8081 	beq.w	8003b80 <_dtoa_r+0x4f8>
 8003a7e:	9b01      	ldr	r3, [sp, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d07d      	beq.n	8003b80 <_dtoa_r+0x4f8>
 8003a84:	f1b9 0f00 	cmp.w	r9, #0
 8003a88:	dd3c      	ble.n	8003b04 <_dtoa_r+0x47c>
 8003a8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003a8e:	9307      	str	r3, [sp, #28]
 8003a90:	2200      	movs	r2, #0
 8003a92:	4b91      	ldr	r3, [pc, #580]	; (8003cd8 <_dtoa_r+0x650>)
 8003a94:	4630      	mov	r0, r6
 8003a96:	4639      	mov	r1, r7
 8003a98:	f7fc fdc6 	bl	8000628 <__aeabi_dmul>
 8003a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003aa0:	3501      	adds	r5, #1
 8003aa2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003aa6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f7fc fd52 	bl	8000554 <__aeabi_i2d>
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	f7fc fdb8 	bl	8000628 <__aeabi_dmul>
 8003ab8:	4b88      	ldr	r3, [pc, #544]	; (8003cdc <_dtoa_r+0x654>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	f7fc fbfe 	bl	80002bc <__adddf3>
 8003ac0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ac8:	9303      	str	r3, [sp, #12]
 8003aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d15c      	bne.n	8003b8a <_dtoa_r+0x502>
 8003ad0:	4b83      	ldr	r3, [pc, #524]	; (8003ce0 <_dtoa_r+0x658>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	4639      	mov	r1, r7
 8003ad8:	f7fc fbee 	bl	80002b8 <__aeabi_dsub>
 8003adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	460f      	mov	r7, r1
 8003ae4:	f7fd f830 	bl	8000b48 <__aeabi_dcmpgt>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	f040 8296 	bne.w	800401a <_dtoa_r+0x992>
 8003aee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003af2:	4630      	mov	r0, r6
 8003af4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003af8:	4639      	mov	r1, r7
 8003afa:	f7fd f807 	bl	8000b0c <__aeabi_dcmplt>
 8003afe:	2800      	cmp	r0, #0
 8003b00:	f040 8288 	bne.w	8004014 <_dtoa_r+0x98c>
 8003b04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f2c0 8158 	blt.w	8003dc4 <_dtoa_r+0x73c>
 8003b14:	f1ba 0f0e 	cmp.w	sl, #14
 8003b18:	f300 8154 	bgt.w	8003dc4 <_dtoa_r+0x73c>
 8003b1c:	4b6b      	ldr	r3, [pc, #428]	; (8003ccc <_dtoa_r+0x644>)
 8003b1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003b22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f280 80e3 	bge.w	8003cf4 <_dtoa_r+0x66c>
 8003b2e:	9b01      	ldr	r3, [sp, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f300 80df 	bgt.w	8003cf4 <_dtoa_r+0x66c>
 8003b36:	f040 826d 	bne.w	8004014 <_dtoa_r+0x98c>
 8003b3a:	4b69      	ldr	r3, [pc, #420]	; (8003ce0 <_dtoa_r+0x658>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4640      	mov	r0, r8
 8003b40:	4649      	mov	r1, r9
 8003b42:	f7fc fd71 	bl	8000628 <__aeabi_dmul>
 8003b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b4a:	f7fc fff3 	bl	8000b34 <__aeabi_dcmpge>
 8003b4e:	9e01      	ldr	r6, [sp, #4]
 8003b50:	4637      	mov	r7, r6
 8003b52:	2800      	cmp	r0, #0
 8003b54:	f040 8243 	bne.w	8003fde <_dtoa_r+0x956>
 8003b58:	9d00      	ldr	r5, [sp, #0]
 8003b5a:	2331      	movs	r3, #49	; 0x31
 8003b5c:	f805 3b01 	strb.w	r3, [r5], #1
 8003b60:	f10a 0a01 	add.w	sl, sl, #1
 8003b64:	e23f      	b.n	8003fe6 <_dtoa_r+0x95e>
 8003b66:	07f2      	lsls	r2, r6, #31
 8003b68:	d505      	bpl.n	8003b76 <_dtoa_r+0x4ee>
 8003b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b6e:	f7fc fd5b 	bl	8000628 <__aeabi_dmul>
 8003b72:	3501      	adds	r5, #1
 8003b74:	2301      	movs	r3, #1
 8003b76:	1076      	asrs	r6, r6, #1
 8003b78:	3708      	adds	r7, #8
 8003b7a:	e76c      	b.n	8003a56 <_dtoa_r+0x3ce>
 8003b7c:	2502      	movs	r5, #2
 8003b7e:	e76f      	b.n	8003a60 <_dtoa_r+0x3d8>
 8003b80:	9b01      	ldr	r3, [sp, #4]
 8003b82:	f8cd a01c 	str.w	sl, [sp, #28]
 8003b86:	930c      	str	r3, [sp, #48]	; 0x30
 8003b88:	e78d      	b.n	8003aa6 <_dtoa_r+0x41e>
 8003b8a:	9900      	ldr	r1, [sp, #0]
 8003b8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b90:	4b4e      	ldr	r3, [pc, #312]	; (8003ccc <_dtoa_r+0x644>)
 8003b92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003b96:	4401      	add	r1, r0
 8003b98:	9102      	str	r1, [sp, #8]
 8003b9a:	9908      	ldr	r1, [sp, #32]
 8003b9c:	eeb0 8a47 	vmov.f32	s16, s14
 8003ba0:	eef0 8a67 	vmov.f32	s17, s15
 8003ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ba8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003bac:	2900      	cmp	r1, #0
 8003bae:	d045      	beq.n	8003c3c <_dtoa_r+0x5b4>
 8003bb0:	494c      	ldr	r1, [pc, #304]	; (8003ce4 <_dtoa_r+0x65c>)
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	f7fc fe62 	bl	800087c <__aeabi_ddiv>
 8003bb8:	ec53 2b18 	vmov	r2, r3, d8
 8003bbc:	f7fc fb7c 	bl	80002b8 <__aeabi_dsub>
 8003bc0:	9d00      	ldr	r5, [sp, #0]
 8003bc2:	ec41 0b18 	vmov	d8, r0, r1
 8003bc6:	4639      	mov	r1, r7
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f7fc ffdd 	bl	8000b88 <__aeabi_d2iz>
 8003bce:	900c      	str	r0, [sp, #48]	; 0x30
 8003bd0:	f7fc fcc0 	bl	8000554 <__aeabi_i2d>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4630      	mov	r0, r6
 8003bda:	4639      	mov	r1, r7
 8003bdc:	f7fc fb6c 	bl	80002b8 <__aeabi_dsub>
 8003be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003be2:	3330      	adds	r3, #48	; 0x30
 8003be4:	f805 3b01 	strb.w	r3, [r5], #1
 8003be8:	ec53 2b18 	vmov	r2, r3, d8
 8003bec:	4606      	mov	r6, r0
 8003bee:	460f      	mov	r7, r1
 8003bf0:	f7fc ff8c 	bl	8000b0c <__aeabi_dcmplt>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d165      	bne.n	8003cc4 <_dtoa_r+0x63c>
 8003bf8:	4632      	mov	r2, r6
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	4935      	ldr	r1, [pc, #212]	; (8003cd4 <_dtoa_r+0x64c>)
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7fc fb5a 	bl	80002b8 <__aeabi_dsub>
 8003c04:	ec53 2b18 	vmov	r2, r3, d8
 8003c08:	f7fc ff80 	bl	8000b0c <__aeabi_dcmplt>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	f040 80b9 	bne.w	8003d84 <_dtoa_r+0x6fc>
 8003c12:	9b02      	ldr	r3, [sp, #8]
 8003c14:	429d      	cmp	r5, r3
 8003c16:	f43f af75 	beq.w	8003b04 <_dtoa_r+0x47c>
 8003c1a:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <_dtoa_r+0x650>)
 8003c1c:	ec51 0b18 	vmov	r0, r1, d8
 8003c20:	2200      	movs	r2, #0
 8003c22:	f7fc fd01 	bl	8000628 <__aeabi_dmul>
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <_dtoa_r+0x650>)
 8003c28:	ec41 0b18 	vmov	d8, r0, r1
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4630      	mov	r0, r6
 8003c30:	4639      	mov	r1, r7
 8003c32:	f7fc fcf9 	bl	8000628 <__aeabi_dmul>
 8003c36:	4606      	mov	r6, r0
 8003c38:	460f      	mov	r7, r1
 8003c3a:	e7c4      	b.n	8003bc6 <_dtoa_r+0x53e>
 8003c3c:	ec51 0b17 	vmov	r0, r1, d7
 8003c40:	f7fc fcf2 	bl	8000628 <__aeabi_dmul>
 8003c44:	9b02      	ldr	r3, [sp, #8]
 8003c46:	9d00      	ldr	r5, [sp, #0]
 8003c48:	930c      	str	r3, [sp, #48]	; 0x30
 8003c4a:	ec41 0b18 	vmov	d8, r0, r1
 8003c4e:	4639      	mov	r1, r7
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7fc ff99 	bl	8000b88 <__aeabi_d2iz>
 8003c56:	9011      	str	r0, [sp, #68]	; 0x44
 8003c58:	f7fc fc7c 	bl	8000554 <__aeabi_i2d>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4630      	mov	r0, r6
 8003c62:	4639      	mov	r1, r7
 8003c64:	f7fc fb28 	bl	80002b8 <__aeabi_dsub>
 8003c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c6a:	3330      	adds	r3, #48	; 0x30
 8003c6c:	f805 3b01 	strb.w	r3, [r5], #1
 8003c70:	9b02      	ldr	r3, [sp, #8]
 8003c72:	429d      	cmp	r5, r3
 8003c74:	4606      	mov	r6, r0
 8003c76:	460f      	mov	r7, r1
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	d134      	bne.n	8003ce8 <_dtoa_r+0x660>
 8003c7e:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <_dtoa_r+0x65c>)
 8003c80:	ec51 0b18 	vmov	r0, r1, d8
 8003c84:	f7fc fb1a 	bl	80002bc <__adddf3>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	4639      	mov	r1, r7
 8003c90:	f7fc ff5a 	bl	8000b48 <__aeabi_dcmpgt>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d175      	bne.n	8003d84 <_dtoa_r+0x6fc>
 8003c98:	ec53 2b18 	vmov	r2, r3, d8
 8003c9c:	4911      	ldr	r1, [pc, #68]	; (8003ce4 <_dtoa_r+0x65c>)
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f7fc fb0a 	bl	80002b8 <__aeabi_dsub>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4630      	mov	r0, r6
 8003caa:	4639      	mov	r1, r7
 8003cac:	f7fc ff2e 	bl	8000b0c <__aeabi_dcmplt>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	f43f af27 	beq.w	8003b04 <_dtoa_r+0x47c>
 8003cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cb8:	1e6b      	subs	r3, r5, #1
 8003cba:	930c      	str	r3, [sp, #48]	; 0x30
 8003cbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003cc0:	2b30      	cmp	r3, #48	; 0x30
 8003cc2:	d0f8      	beq.n	8003cb6 <_dtoa_r+0x62e>
 8003cc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003cc8:	e04a      	b.n	8003d60 <_dtoa_r+0x6d8>
 8003cca:	bf00      	nop
 8003ccc:	08006790 	.word	0x08006790
 8003cd0:	08006768 	.word	0x08006768
 8003cd4:	3ff00000 	.word	0x3ff00000
 8003cd8:	40240000 	.word	0x40240000
 8003cdc:	401c0000 	.word	0x401c0000
 8003ce0:	40140000 	.word	0x40140000
 8003ce4:	3fe00000 	.word	0x3fe00000
 8003ce8:	4baf      	ldr	r3, [pc, #700]	; (8003fa8 <_dtoa_r+0x920>)
 8003cea:	f7fc fc9d 	bl	8000628 <__aeabi_dmul>
 8003cee:	4606      	mov	r6, r0
 8003cf0:	460f      	mov	r7, r1
 8003cf2:	e7ac      	b.n	8003c4e <_dtoa_r+0x5c6>
 8003cf4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003cf8:	9d00      	ldr	r5, [sp, #0]
 8003cfa:	4642      	mov	r2, r8
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	4630      	mov	r0, r6
 8003d00:	4639      	mov	r1, r7
 8003d02:	f7fc fdbb 	bl	800087c <__aeabi_ddiv>
 8003d06:	f7fc ff3f 	bl	8000b88 <__aeabi_d2iz>
 8003d0a:	9002      	str	r0, [sp, #8]
 8003d0c:	f7fc fc22 	bl	8000554 <__aeabi_i2d>
 8003d10:	4642      	mov	r2, r8
 8003d12:	464b      	mov	r3, r9
 8003d14:	f7fc fc88 	bl	8000628 <__aeabi_dmul>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	4639      	mov	r1, r7
 8003d20:	f7fc faca 	bl	80002b8 <__aeabi_dsub>
 8003d24:	9e02      	ldr	r6, [sp, #8]
 8003d26:	9f01      	ldr	r7, [sp, #4]
 8003d28:	3630      	adds	r6, #48	; 0x30
 8003d2a:	f805 6b01 	strb.w	r6, [r5], #1
 8003d2e:	9e00      	ldr	r6, [sp, #0]
 8003d30:	1bae      	subs	r6, r5, r6
 8003d32:	42b7      	cmp	r7, r6
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	d137      	bne.n	8003daa <_dtoa_r+0x722>
 8003d3a:	f7fc fabf 	bl	80002bc <__adddf3>
 8003d3e:	4642      	mov	r2, r8
 8003d40:	464b      	mov	r3, r9
 8003d42:	4606      	mov	r6, r0
 8003d44:	460f      	mov	r7, r1
 8003d46:	f7fc feff 	bl	8000b48 <__aeabi_dcmpgt>
 8003d4a:	b9c8      	cbnz	r0, 8003d80 <_dtoa_r+0x6f8>
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	4630      	mov	r0, r6
 8003d52:	4639      	mov	r1, r7
 8003d54:	f7fc fed0 	bl	8000af8 <__aeabi_dcmpeq>
 8003d58:	b110      	cbz	r0, 8003d60 <_dtoa_r+0x6d8>
 8003d5a:	9b02      	ldr	r3, [sp, #8]
 8003d5c:	07d9      	lsls	r1, r3, #31
 8003d5e:	d40f      	bmi.n	8003d80 <_dtoa_r+0x6f8>
 8003d60:	4620      	mov	r0, r4
 8003d62:	4659      	mov	r1, fp
 8003d64:	f000 fd28 	bl	80047b8 <_Bfree>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	702b      	strb	r3, [r5, #0]
 8003d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d6e:	f10a 0001 	add.w	r0, sl, #1
 8003d72:	6018      	str	r0, [r3, #0]
 8003d74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f43f acd8 	beq.w	800372c <_dtoa_r+0xa4>
 8003d7c:	601d      	str	r5, [r3, #0]
 8003d7e:	e4d5      	b.n	800372c <_dtoa_r+0xa4>
 8003d80:	f8cd a01c 	str.w	sl, [sp, #28]
 8003d84:	462b      	mov	r3, r5
 8003d86:	461d      	mov	r5, r3
 8003d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d8c:	2a39      	cmp	r2, #57	; 0x39
 8003d8e:	d108      	bne.n	8003da2 <_dtoa_r+0x71a>
 8003d90:	9a00      	ldr	r2, [sp, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d1f7      	bne.n	8003d86 <_dtoa_r+0x6fe>
 8003d96:	9a07      	ldr	r2, [sp, #28]
 8003d98:	9900      	ldr	r1, [sp, #0]
 8003d9a:	3201      	adds	r2, #1
 8003d9c:	9207      	str	r2, [sp, #28]
 8003d9e:	2230      	movs	r2, #48	; 0x30
 8003da0:	700a      	strb	r2, [r1, #0]
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	3201      	adds	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e78c      	b.n	8003cc4 <_dtoa_r+0x63c>
 8003daa:	4b7f      	ldr	r3, [pc, #508]	; (8003fa8 <_dtoa_r+0x920>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	f7fc fc3b 	bl	8000628 <__aeabi_dmul>
 8003db2:	2200      	movs	r2, #0
 8003db4:	2300      	movs	r3, #0
 8003db6:	4606      	mov	r6, r0
 8003db8:	460f      	mov	r7, r1
 8003dba:	f7fc fe9d 	bl	8000af8 <__aeabi_dcmpeq>
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d09b      	beq.n	8003cfa <_dtoa_r+0x672>
 8003dc2:	e7cd      	b.n	8003d60 <_dtoa_r+0x6d8>
 8003dc4:	9a08      	ldr	r2, [sp, #32]
 8003dc6:	2a00      	cmp	r2, #0
 8003dc8:	f000 80c4 	beq.w	8003f54 <_dtoa_r+0x8cc>
 8003dcc:	9a05      	ldr	r2, [sp, #20]
 8003dce:	2a01      	cmp	r2, #1
 8003dd0:	f300 80a8 	bgt.w	8003f24 <_dtoa_r+0x89c>
 8003dd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003dd6:	2a00      	cmp	r2, #0
 8003dd8:	f000 80a0 	beq.w	8003f1c <_dtoa_r+0x894>
 8003ddc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003de0:	9e06      	ldr	r6, [sp, #24]
 8003de2:	4645      	mov	r5, r8
 8003de4:	9a04      	ldr	r2, [sp, #16]
 8003de6:	2101      	movs	r1, #1
 8003de8:	441a      	add	r2, r3
 8003dea:	4620      	mov	r0, r4
 8003dec:	4498      	add	r8, r3
 8003dee:	9204      	str	r2, [sp, #16]
 8003df0:	f000 fd9e 	bl	8004930 <__i2b>
 8003df4:	4607      	mov	r7, r0
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	dd0b      	ble.n	8003e12 <_dtoa_r+0x78a>
 8003dfa:	9b04      	ldr	r3, [sp, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	dd08      	ble.n	8003e12 <_dtoa_r+0x78a>
 8003e00:	42ab      	cmp	r3, r5
 8003e02:	9a04      	ldr	r2, [sp, #16]
 8003e04:	bfa8      	it	ge
 8003e06:	462b      	movge	r3, r5
 8003e08:	eba8 0803 	sub.w	r8, r8, r3
 8003e0c:	1aed      	subs	r5, r5, r3
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	9304      	str	r3, [sp, #16]
 8003e12:	9b06      	ldr	r3, [sp, #24]
 8003e14:	b1fb      	cbz	r3, 8003e56 <_dtoa_r+0x7ce>
 8003e16:	9b08      	ldr	r3, [sp, #32]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 809f 	beq.w	8003f5c <_dtoa_r+0x8d4>
 8003e1e:	2e00      	cmp	r6, #0
 8003e20:	dd11      	ble.n	8003e46 <_dtoa_r+0x7be>
 8003e22:	4639      	mov	r1, r7
 8003e24:	4632      	mov	r2, r6
 8003e26:	4620      	mov	r0, r4
 8003e28:	f000 fe3e 	bl	8004aa8 <__pow5mult>
 8003e2c:	465a      	mov	r2, fp
 8003e2e:	4601      	mov	r1, r0
 8003e30:	4607      	mov	r7, r0
 8003e32:	4620      	mov	r0, r4
 8003e34:	f000 fd92 	bl	800495c <__multiply>
 8003e38:	4659      	mov	r1, fp
 8003e3a:	9007      	str	r0, [sp, #28]
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f000 fcbb 	bl	80047b8 <_Bfree>
 8003e42:	9b07      	ldr	r3, [sp, #28]
 8003e44:	469b      	mov	fp, r3
 8003e46:	9b06      	ldr	r3, [sp, #24]
 8003e48:	1b9a      	subs	r2, r3, r6
 8003e4a:	d004      	beq.n	8003e56 <_dtoa_r+0x7ce>
 8003e4c:	4659      	mov	r1, fp
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f000 fe2a 	bl	8004aa8 <__pow5mult>
 8003e54:	4683      	mov	fp, r0
 8003e56:	2101      	movs	r1, #1
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 fd69 	bl	8004930 <__i2b>
 8003e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	4606      	mov	r6, r0
 8003e64:	dd7c      	ble.n	8003f60 <_dtoa_r+0x8d8>
 8003e66:	461a      	mov	r2, r3
 8003e68:	4601      	mov	r1, r0
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f000 fe1c 	bl	8004aa8 <__pow5mult>
 8003e70:	9b05      	ldr	r3, [sp, #20]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	4606      	mov	r6, r0
 8003e76:	dd76      	ble.n	8003f66 <_dtoa_r+0x8de>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9306      	str	r3, [sp, #24]
 8003e7c:	6933      	ldr	r3, [r6, #16]
 8003e7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003e82:	6918      	ldr	r0, [r3, #16]
 8003e84:	f000 fd04 	bl	8004890 <__hi0bits>
 8003e88:	f1c0 0020 	rsb	r0, r0, #32
 8003e8c:	9b04      	ldr	r3, [sp, #16]
 8003e8e:	4418      	add	r0, r3
 8003e90:	f010 001f 	ands.w	r0, r0, #31
 8003e94:	f000 8086 	beq.w	8003fa4 <_dtoa_r+0x91c>
 8003e98:	f1c0 0320 	rsb	r3, r0, #32
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	dd7f      	ble.n	8003fa0 <_dtoa_r+0x918>
 8003ea0:	f1c0 001c 	rsb	r0, r0, #28
 8003ea4:	9b04      	ldr	r3, [sp, #16]
 8003ea6:	4403      	add	r3, r0
 8003ea8:	4480      	add	r8, r0
 8003eaa:	4405      	add	r5, r0
 8003eac:	9304      	str	r3, [sp, #16]
 8003eae:	f1b8 0f00 	cmp.w	r8, #0
 8003eb2:	dd05      	ble.n	8003ec0 <_dtoa_r+0x838>
 8003eb4:	4659      	mov	r1, fp
 8003eb6:	4642      	mov	r2, r8
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f000 fe4f 	bl	8004b5c <__lshift>
 8003ebe:	4683      	mov	fp, r0
 8003ec0:	9b04      	ldr	r3, [sp, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	dd05      	ble.n	8003ed2 <_dtoa_r+0x84a>
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 fe46 	bl	8004b5c <__lshift>
 8003ed0:	4606      	mov	r6, r0
 8003ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d069      	beq.n	8003fac <_dtoa_r+0x924>
 8003ed8:	4631      	mov	r1, r6
 8003eda:	4658      	mov	r0, fp
 8003edc:	f000 feaa 	bl	8004c34 <__mcmp>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	da63      	bge.n	8003fac <_dtoa_r+0x924>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4659      	mov	r1, fp
 8003ee8:	220a      	movs	r2, #10
 8003eea:	4620      	mov	r0, r4
 8003eec:	f000 fc86 	bl	80047fc <__multadd>
 8003ef0:	9b08      	ldr	r3, [sp, #32]
 8003ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ef6:	4683      	mov	fp, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 818f 	beq.w	800421c <_dtoa_r+0xb94>
 8003efe:	4639      	mov	r1, r7
 8003f00:	2300      	movs	r3, #0
 8003f02:	220a      	movs	r2, #10
 8003f04:	4620      	mov	r0, r4
 8003f06:	f000 fc79 	bl	80047fc <__multadd>
 8003f0a:	f1b9 0f00 	cmp.w	r9, #0
 8003f0e:	4607      	mov	r7, r0
 8003f10:	f300 808e 	bgt.w	8004030 <_dtoa_r+0x9a8>
 8003f14:	9b05      	ldr	r3, [sp, #20]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	dc50      	bgt.n	8003fbc <_dtoa_r+0x934>
 8003f1a:	e089      	b.n	8004030 <_dtoa_r+0x9a8>
 8003f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003f22:	e75d      	b.n	8003de0 <_dtoa_r+0x758>
 8003f24:	9b01      	ldr	r3, [sp, #4]
 8003f26:	1e5e      	subs	r6, r3, #1
 8003f28:	9b06      	ldr	r3, [sp, #24]
 8003f2a:	42b3      	cmp	r3, r6
 8003f2c:	bfbf      	itttt	lt
 8003f2e:	9b06      	ldrlt	r3, [sp, #24]
 8003f30:	9606      	strlt	r6, [sp, #24]
 8003f32:	1af2      	sublt	r2, r6, r3
 8003f34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8003f36:	bfb6      	itet	lt
 8003f38:	189b      	addlt	r3, r3, r2
 8003f3a:	1b9e      	subge	r6, r3, r6
 8003f3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8003f3e:	9b01      	ldr	r3, [sp, #4]
 8003f40:	bfb8      	it	lt
 8003f42:	2600      	movlt	r6, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bfb5      	itete	lt
 8003f48:	eba8 0503 	sublt.w	r5, r8, r3
 8003f4c:	9b01      	ldrge	r3, [sp, #4]
 8003f4e:	2300      	movlt	r3, #0
 8003f50:	4645      	movge	r5, r8
 8003f52:	e747      	b.n	8003de4 <_dtoa_r+0x75c>
 8003f54:	9e06      	ldr	r6, [sp, #24]
 8003f56:	9f08      	ldr	r7, [sp, #32]
 8003f58:	4645      	mov	r5, r8
 8003f5a:	e74c      	b.n	8003df6 <_dtoa_r+0x76e>
 8003f5c:	9a06      	ldr	r2, [sp, #24]
 8003f5e:	e775      	b.n	8003e4c <_dtoa_r+0x7c4>
 8003f60:	9b05      	ldr	r3, [sp, #20]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	dc18      	bgt.n	8003f98 <_dtoa_r+0x910>
 8003f66:	9b02      	ldr	r3, [sp, #8]
 8003f68:	b9b3      	cbnz	r3, 8003f98 <_dtoa_r+0x910>
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f70:	b9a3      	cbnz	r3, 8003f9c <_dtoa_r+0x914>
 8003f72:	9b03      	ldr	r3, [sp, #12]
 8003f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f78:	0d1b      	lsrs	r3, r3, #20
 8003f7a:	051b      	lsls	r3, r3, #20
 8003f7c:	b12b      	cbz	r3, 8003f8a <_dtoa_r+0x902>
 8003f7e:	9b04      	ldr	r3, [sp, #16]
 8003f80:	3301      	adds	r3, #1
 8003f82:	9304      	str	r3, [sp, #16]
 8003f84:	f108 0801 	add.w	r8, r8, #1
 8003f88:	2301      	movs	r3, #1
 8003f8a:	9306      	str	r3, [sp, #24]
 8003f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f47f af74 	bne.w	8003e7c <_dtoa_r+0x7f4>
 8003f94:	2001      	movs	r0, #1
 8003f96:	e779      	b.n	8003e8c <_dtoa_r+0x804>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e7f6      	b.n	8003f8a <_dtoa_r+0x902>
 8003f9c:	9b02      	ldr	r3, [sp, #8]
 8003f9e:	e7f4      	b.n	8003f8a <_dtoa_r+0x902>
 8003fa0:	d085      	beq.n	8003eae <_dtoa_r+0x826>
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	301c      	adds	r0, #28
 8003fa6:	e77d      	b.n	8003ea4 <_dtoa_r+0x81c>
 8003fa8:	40240000 	.word	0x40240000
 8003fac:	9b01      	ldr	r3, [sp, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	dc38      	bgt.n	8004024 <_dtoa_r+0x99c>
 8003fb2:	9b05      	ldr	r3, [sp, #20]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	dd35      	ble.n	8004024 <_dtoa_r+0x99c>
 8003fb8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003fbc:	f1b9 0f00 	cmp.w	r9, #0
 8003fc0:	d10d      	bne.n	8003fde <_dtoa_r+0x956>
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	2205      	movs	r2, #5
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f000 fc17 	bl	80047fc <__multadd>
 8003fce:	4601      	mov	r1, r0
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	4658      	mov	r0, fp
 8003fd4:	f000 fe2e 	bl	8004c34 <__mcmp>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	f73f adbd 	bgt.w	8003b58 <_dtoa_r+0x4d0>
 8003fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe0:	9d00      	ldr	r5, [sp, #0]
 8003fe2:	ea6f 0a03 	mvn.w	sl, r3
 8003fe6:	f04f 0800 	mov.w	r8, #0
 8003fea:	4631      	mov	r1, r6
 8003fec:	4620      	mov	r0, r4
 8003fee:	f000 fbe3 	bl	80047b8 <_Bfree>
 8003ff2:	2f00      	cmp	r7, #0
 8003ff4:	f43f aeb4 	beq.w	8003d60 <_dtoa_r+0x6d8>
 8003ff8:	f1b8 0f00 	cmp.w	r8, #0
 8003ffc:	d005      	beq.n	800400a <_dtoa_r+0x982>
 8003ffe:	45b8      	cmp	r8, r7
 8004000:	d003      	beq.n	800400a <_dtoa_r+0x982>
 8004002:	4641      	mov	r1, r8
 8004004:	4620      	mov	r0, r4
 8004006:	f000 fbd7 	bl	80047b8 <_Bfree>
 800400a:	4639      	mov	r1, r7
 800400c:	4620      	mov	r0, r4
 800400e:	f000 fbd3 	bl	80047b8 <_Bfree>
 8004012:	e6a5      	b.n	8003d60 <_dtoa_r+0x6d8>
 8004014:	2600      	movs	r6, #0
 8004016:	4637      	mov	r7, r6
 8004018:	e7e1      	b.n	8003fde <_dtoa_r+0x956>
 800401a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800401c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004020:	4637      	mov	r7, r6
 8004022:	e599      	b.n	8003b58 <_dtoa_r+0x4d0>
 8004024:	9b08      	ldr	r3, [sp, #32]
 8004026:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80fd 	beq.w	800422a <_dtoa_r+0xba2>
 8004030:	2d00      	cmp	r5, #0
 8004032:	dd05      	ble.n	8004040 <_dtoa_r+0x9b8>
 8004034:	4639      	mov	r1, r7
 8004036:	462a      	mov	r2, r5
 8004038:	4620      	mov	r0, r4
 800403a:	f000 fd8f 	bl	8004b5c <__lshift>
 800403e:	4607      	mov	r7, r0
 8004040:	9b06      	ldr	r3, [sp, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d05c      	beq.n	8004100 <_dtoa_r+0xa78>
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4620      	mov	r0, r4
 800404a:	f000 fb75 	bl	8004738 <_Balloc>
 800404e:	4605      	mov	r5, r0
 8004050:	b928      	cbnz	r0, 800405e <_dtoa_r+0x9d6>
 8004052:	4b80      	ldr	r3, [pc, #512]	; (8004254 <_dtoa_r+0xbcc>)
 8004054:	4602      	mov	r2, r0
 8004056:	f240 21ea 	movw	r1, #746	; 0x2ea
 800405a:	f7ff bb2e 	b.w	80036ba <_dtoa_r+0x32>
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	3202      	adds	r2, #2
 8004062:	0092      	lsls	r2, r2, #2
 8004064:	f107 010c 	add.w	r1, r7, #12
 8004068:	300c      	adds	r0, #12
 800406a:	f000 fb4b 	bl	8004704 <memcpy>
 800406e:	2201      	movs	r2, #1
 8004070:	4629      	mov	r1, r5
 8004072:	4620      	mov	r0, r4
 8004074:	f000 fd72 	bl	8004b5c <__lshift>
 8004078:	9b00      	ldr	r3, [sp, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	9b00      	ldr	r3, [sp, #0]
 8004080:	444b      	add	r3, r9
 8004082:	9307      	str	r3, [sp, #28]
 8004084:	9b02      	ldr	r3, [sp, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	46b8      	mov	r8, r7
 800408c:	9306      	str	r3, [sp, #24]
 800408e:	4607      	mov	r7, r0
 8004090:	9b01      	ldr	r3, [sp, #4]
 8004092:	4631      	mov	r1, r6
 8004094:	3b01      	subs	r3, #1
 8004096:	4658      	mov	r0, fp
 8004098:	9302      	str	r3, [sp, #8]
 800409a:	f7ff fa67 	bl	800356c <quorem>
 800409e:	4603      	mov	r3, r0
 80040a0:	3330      	adds	r3, #48	; 0x30
 80040a2:	9004      	str	r0, [sp, #16]
 80040a4:	4641      	mov	r1, r8
 80040a6:	4658      	mov	r0, fp
 80040a8:	9308      	str	r3, [sp, #32]
 80040aa:	f000 fdc3 	bl	8004c34 <__mcmp>
 80040ae:	463a      	mov	r2, r7
 80040b0:	4681      	mov	r9, r0
 80040b2:	4631      	mov	r1, r6
 80040b4:	4620      	mov	r0, r4
 80040b6:	f000 fdd9 	bl	8004c6c <__mdiff>
 80040ba:	68c2      	ldr	r2, [r0, #12]
 80040bc:	9b08      	ldr	r3, [sp, #32]
 80040be:	4605      	mov	r5, r0
 80040c0:	bb02      	cbnz	r2, 8004104 <_dtoa_r+0xa7c>
 80040c2:	4601      	mov	r1, r0
 80040c4:	4658      	mov	r0, fp
 80040c6:	f000 fdb5 	bl	8004c34 <__mcmp>
 80040ca:	9b08      	ldr	r3, [sp, #32]
 80040cc:	4602      	mov	r2, r0
 80040ce:	4629      	mov	r1, r5
 80040d0:	4620      	mov	r0, r4
 80040d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80040d6:	f000 fb6f 	bl	80047b8 <_Bfree>
 80040da:	9b05      	ldr	r3, [sp, #20]
 80040dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040de:	9d01      	ldr	r5, [sp, #4]
 80040e0:	ea43 0102 	orr.w	r1, r3, r2
 80040e4:	9b06      	ldr	r3, [sp, #24]
 80040e6:	430b      	orrs	r3, r1
 80040e8:	9b08      	ldr	r3, [sp, #32]
 80040ea:	d10d      	bne.n	8004108 <_dtoa_r+0xa80>
 80040ec:	2b39      	cmp	r3, #57	; 0x39
 80040ee:	d029      	beq.n	8004144 <_dtoa_r+0xabc>
 80040f0:	f1b9 0f00 	cmp.w	r9, #0
 80040f4:	dd01      	ble.n	80040fa <_dtoa_r+0xa72>
 80040f6:	9b04      	ldr	r3, [sp, #16]
 80040f8:	3331      	adds	r3, #49	; 0x31
 80040fa:	9a02      	ldr	r2, [sp, #8]
 80040fc:	7013      	strb	r3, [r2, #0]
 80040fe:	e774      	b.n	8003fea <_dtoa_r+0x962>
 8004100:	4638      	mov	r0, r7
 8004102:	e7b9      	b.n	8004078 <_dtoa_r+0x9f0>
 8004104:	2201      	movs	r2, #1
 8004106:	e7e2      	b.n	80040ce <_dtoa_r+0xa46>
 8004108:	f1b9 0f00 	cmp.w	r9, #0
 800410c:	db06      	blt.n	800411c <_dtoa_r+0xa94>
 800410e:	9905      	ldr	r1, [sp, #20]
 8004110:	ea41 0909 	orr.w	r9, r1, r9
 8004114:	9906      	ldr	r1, [sp, #24]
 8004116:	ea59 0101 	orrs.w	r1, r9, r1
 800411a:	d120      	bne.n	800415e <_dtoa_r+0xad6>
 800411c:	2a00      	cmp	r2, #0
 800411e:	ddec      	ble.n	80040fa <_dtoa_r+0xa72>
 8004120:	4659      	mov	r1, fp
 8004122:	2201      	movs	r2, #1
 8004124:	4620      	mov	r0, r4
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	f000 fd18 	bl	8004b5c <__lshift>
 800412c:	4631      	mov	r1, r6
 800412e:	4683      	mov	fp, r0
 8004130:	f000 fd80 	bl	8004c34 <__mcmp>
 8004134:	2800      	cmp	r0, #0
 8004136:	9b01      	ldr	r3, [sp, #4]
 8004138:	dc02      	bgt.n	8004140 <_dtoa_r+0xab8>
 800413a:	d1de      	bne.n	80040fa <_dtoa_r+0xa72>
 800413c:	07da      	lsls	r2, r3, #31
 800413e:	d5dc      	bpl.n	80040fa <_dtoa_r+0xa72>
 8004140:	2b39      	cmp	r3, #57	; 0x39
 8004142:	d1d8      	bne.n	80040f6 <_dtoa_r+0xa6e>
 8004144:	9a02      	ldr	r2, [sp, #8]
 8004146:	2339      	movs	r3, #57	; 0x39
 8004148:	7013      	strb	r3, [r2, #0]
 800414a:	462b      	mov	r3, r5
 800414c:	461d      	mov	r5, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004154:	2a39      	cmp	r2, #57	; 0x39
 8004156:	d050      	beq.n	80041fa <_dtoa_r+0xb72>
 8004158:	3201      	adds	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e745      	b.n	8003fea <_dtoa_r+0x962>
 800415e:	2a00      	cmp	r2, #0
 8004160:	dd03      	ble.n	800416a <_dtoa_r+0xae2>
 8004162:	2b39      	cmp	r3, #57	; 0x39
 8004164:	d0ee      	beq.n	8004144 <_dtoa_r+0xabc>
 8004166:	3301      	adds	r3, #1
 8004168:	e7c7      	b.n	80040fa <_dtoa_r+0xa72>
 800416a:	9a01      	ldr	r2, [sp, #4]
 800416c:	9907      	ldr	r1, [sp, #28]
 800416e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004172:	428a      	cmp	r2, r1
 8004174:	d02a      	beq.n	80041cc <_dtoa_r+0xb44>
 8004176:	4659      	mov	r1, fp
 8004178:	2300      	movs	r3, #0
 800417a:	220a      	movs	r2, #10
 800417c:	4620      	mov	r0, r4
 800417e:	f000 fb3d 	bl	80047fc <__multadd>
 8004182:	45b8      	cmp	r8, r7
 8004184:	4683      	mov	fp, r0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	f04f 020a 	mov.w	r2, #10
 800418e:	4641      	mov	r1, r8
 8004190:	4620      	mov	r0, r4
 8004192:	d107      	bne.n	80041a4 <_dtoa_r+0xb1c>
 8004194:	f000 fb32 	bl	80047fc <__multadd>
 8004198:	4680      	mov	r8, r0
 800419a:	4607      	mov	r7, r0
 800419c:	9b01      	ldr	r3, [sp, #4]
 800419e:	3301      	adds	r3, #1
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	e775      	b.n	8004090 <_dtoa_r+0xa08>
 80041a4:	f000 fb2a 	bl	80047fc <__multadd>
 80041a8:	4639      	mov	r1, r7
 80041aa:	4680      	mov	r8, r0
 80041ac:	2300      	movs	r3, #0
 80041ae:	220a      	movs	r2, #10
 80041b0:	4620      	mov	r0, r4
 80041b2:	f000 fb23 	bl	80047fc <__multadd>
 80041b6:	4607      	mov	r7, r0
 80041b8:	e7f0      	b.n	800419c <_dtoa_r+0xb14>
 80041ba:	f1b9 0f00 	cmp.w	r9, #0
 80041be:	9a00      	ldr	r2, [sp, #0]
 80041c0:	bfcc      	ite	gt
 80041c2:	464d      	movgt	r5, r9
 80041c4:	2501      	movle	r5, #1
 80041c6:	4415      	add	r5, r2
 80041c8:	f04f 0800 	mov.w	r8, #0
 80041cc:	4659      	mov	r1, fp
 80041ce:	2201      	movs	r2, #1
 80041d0:	4620      	mov	r0, r4
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	f000 fcc2 	bl	8004b5c <__lshift>
 80041d8:	4631      	mov	r1, r6
 80041da:	4683      	mov	fp, r0
 80041dc:	f000 fd2a 	bl	8004c34 <__mcmp>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	dcb2      	bgt.n	800414a <_dtoa_r+0xac2>
 80041e4:	d102      	bne.n	80041ec <_dtoa_r+0xb64>
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	07db      	lsls	r3, r3, #31
 80041ea:	d4ae      	bmi.n	800414a <_dtoa_r+0xac2>
 80041ec:	462b      	mov	r3, r5
 80041ee:	461d      	mov	r5, r3
 80041f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041f4:	2a30      	cmp	r2, #48	; 0x30
 80041f6:	d0fa      	beq.n	80041ee <_dtoa_r+0xb66>
 80041f8:	e6f7      	b.n	8003fea <_dtoa_r+0x962>
 80041fa:	9a00      	ldr	r2, [sp, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d1a5      	bne.n	800414c <_dtoa_r+0xac4>
 8004200:	f10a 0a01 	add.w	sl, sl, #1
 8004204:	2331      	movs	r3, #49	; 0x31
 8004206:	e779      	b.n	80040fc <_dtoa_r+0xa74>
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <_dtoa_r+0xbd0>)
 800420a:	f7ff baaf 	b.w	800376c <_dtoa_r+0xe4>
 800420e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f aa86 	bne.w	8003722 <_dtoa_r+0x9a>
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <_dtoa_r+0xbd4>)
 8004218:	f7ff baa8 	b.w	800376c <_dtoa_r+0xe4>
 800421c:	f1b9 0f00 	cmp.w	r9, #0
 8004220:	dc03      	bgt.n	800422a <_dtoa_r+0xba2>
 8004222:	9b05      	ldr	r3, [sp, #20]
 8004224:	2b02      	cmp	r3, #2
 8004226:	f73f aec9 	bgt.w	8003fbc <_dtoa_r+0x934>
 800422a:	9d00      	ldr	r5, [sp, #0]
 800422c:	4631      	mov	r1, r6
 800422e:	4658      	mov	r0, fp
 8004230:	f7ff f99c 	bl	800356c <quorem>
 8004234:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004238:	f805 3b01 	strb.w	r3, [r5], #1
 800423c:	9a00      	ldr	r2, [sp, #0]
 800423e:	1aaa      	subs	r2, r5, r2
 8004240:	4591      	cmp	r9, r2
 8004242:	ddba      	ble.n	80041ba <_dtoa_r+0xb32>
 8004244:	4659      	mov	r1, fp
 8004246:	2300      	movs	r3, #0
 8004248:	220a      	movs	r2, #10
 800424a:	4620      	mov	r0, r4
 800424c:	f000 fad6 	bl	80047fc <__multadd>
 8004250:	4683      	mov	fp, r0
 8004252:	e7eb      	b.n	800422c <_dtoa_r+0xba4>
 8004254:	08006695 	.word	0x08006695
 8004258:	08006879 	.word	0x08006879
 800425c:	08006612 	.word	0x08006612

08004260 <__sflush_r>:
 8004260:	898a      	ldrh	r2, [r1, #12]
 8004262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004266:	4605      	mov	r5, r0
 8004268:	0710      	lsls	r0, r2, #28
 800426a:	460c      	mov	r4, r1
 800426c:	d458      	bmi.n	8004320 <__sflush_r+0xc0>
 800426e:	684b      	ldr	r3, [r1, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	dc05      	bgt.n	8004280 <__sflush_r+0x20>
 8004274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	dc02      	bgt.n	8004280 <__sflush_r+0x20>
 800427a:	2000      	movs	r0, #0
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004282:	2e00      	cmp	r6, #0
 8004284:	d0f9      	beq.n	800427a <__sflush_r+0x1a>
 8004286:	2300      	movs	r3, #0
 8004288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800428c:	682f      	ldr	r7, [r5, #0]
 800428e:	602b      	str	r3, [r5, #0]
 8004290:	d032      	beq.n	80042f8 <__sflush_r+0x98>
 8004292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	075a      	lsls	r2, r3, #29
 8004298:	d505      	bpl.n	80042a6 <__sflush_r+0x46>
 800429a:	6863      	ldr	r3, [r4, #4]
 800429c:	1ac0      	subs	r0, r0, r3
 800429e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042a0:	b10b      	cbz	r3, 80042a6 <__sflush_r+0x46>
 80042a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042a4:	1ac0      	subs	r0, r0, r3
 80042a6:	2300      	movs	r3, #0
 80042a8:	4602      	mov	r2, r0
 80042aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042ac:	6a21      	ldr	r1, [r4, #32]
 80042ae:	4628      	mov	r0, r5
 80042b0:	47b0      	blx	r6
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	d106      	bne.n	80042c6 <__sflush_r+0x66>
 80042b8:	6829      	ldr	r1, [r5, #0]
 80042ba:	291d      	cmp	r1, #29
 80042bc:	d82c      	bhi.n	8004318 <__sflush_r+0xb8>
 80042be:	4a2a      	ldr	r2, [pc, #168]	; (8004368 <__sflush_r+0x108>)
 80042c0:	40ca      	lsrs	r2, r1
 80042c2:	07d6      	lsls	r6, r2, #31
 80042c4:	d528      	bpl.n	8004318 <__sflush_r+0xb8>
 80042c6:	2200      	movs	r2, #0
 80042c8:	6062      	str	r2, [r4, #4]
 80042ca:	04d9      	lsls	r1, r3, #19
 80042cc:	6922      	ldr	r2, [r4, #16]
 80042ce:	6022      	str	r2, [r4, #0]
 80042d0:	d504      	bpl.n	80042dc <__sflush_r+0x7c>
 80042d2:	1c42      	adds	r2, r0, #1
 80042d4:	d101      	bne.n	80042da <__sflush_r+0x7a>
 80042d6:	682b      	ldr	r3, [r5, #0]
 80042d8:	b903      	cbnz	r3, 80042dc <__sflush_r+0x7c>
 80042da:	6560      	str	r0, [r4, #84]	; 0x54
 80042dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042de:	602f      	str	r7, [r5, #0]
 80042e0:	2900      	cmp	r1, #0
 80042e2:	d0ca      	beq.n	800427a <__sflush_r+0x1a>
 80042e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042e8:	4299      	cmp	r1, r3
 80042ea:	d002      	beq.n	80042f2 <__sflush_r+0x92>
 80042ec:	4628      	mov	r0, r5
 80042ee:	f7fe f9e5 	bl	80026bc <_free_r>
 80042f2:	2000      	movs	r0, #0
 80042f4:	6360      	str	r0, [r4, #52]	; 0x34
 80042f6:	e7c1      	b.n	800427c <__sflush_r+0x1c>
 80042f8:	6a21      	ldr	r1, [r4, #32]
 80042fa:	2301      	movs	r3, #1
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b0      	blx	r6
 8004300:	1c41      	adds	r1, r0, #1
 8004302:	d1c7      	bne.n	8004294 <__sflush_r+0x34>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0c4      	beq.n	8004294 <__sflush_r+0x34>
 800430a:	2b1d      	cmp	r3, #29
 800430c:	d001      	beq.n	8004312 <__sflush_r+0xb2>
 800430e:	2b16      	cmp	r3, #22
 8004310:	d101      	bne.n	8004316 <__sflush_r+0xb6>
 8004312:	602f      	str	r7, [r5, #0]
 8004314:	e7b1      	b.n	800427a <__sflush_r+0x1a>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	e7ad      	b.n	800427c <__sflush_r+0x1c>
 8004320:	690f      	ldr	r7, [r1, #16]
 8004322:	2f00      	cmp	r7, #0
 8004324:	d0a9      	beq.n	800427a <__sflush_r+0x1a>
 8004326:	0793      	lsls	r3, r2, #30
 8004328:	680e      	ldr	r6, [r1, #0]
 800432a:	bf08      	it	eq
 800432c:	694b      	ldreq	r3, [r1, #20]
 800432e:	600f      	str	r7, [r1, #0]
 8004330:	bf18      	it	ne
 8004332:	2300      	movne	r3, #0
 8004334:	eba6 0807 	sub.w	r8, r6, r7
 8004338:	608b      	str	r3, [r1, #8]
 800433a:	f1b8 0f00 	cmp.w	r8, #0
 800433e:	dd9c      	ble.n	800427a <__sflush_r+0x1a>
 8004340:	6a21      	ldr	r1, [r4, #32]
 8004342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004344:	4643      	mov	r3, r8
 8004346:	463a      	mov	r2, r7
 8004348:	4628      	mov	r0, r5
 800434a:	47b0      	blx	r6
 800434c:	2800      	cmp	r0, #0
 800434e:	dc06      	bgt.n	800435e <__sflush_r+0xfe>
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004356:	81a3      	strh	r3, [r4, #12]
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	e78e      	b.n	800427c <__sflush_r+0x1c>
 800435e:	4407      	add	r7, r0
 8004360:	eba8 0800 	sub.w	r8, r8, r0
 8004364:	e7e9      	b.n	800433a <__sflush_r+0xda>
 8004366:	bf00      	nop
 8004368:	20400001 	.word	0x20400001

0800436c <_fflush_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	4605      	mov	r5, r0
 8004372:	460c      	mov	r4, r1
 8004374:	b913      	cbnz	r3, 800437c <_fflush_r+0x10>
 8004376:	2500      	movs	r5, #0
 8004378:	4628      	mov	r0, r5
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	b118      	cbz	r0, 8004386 <_fflush_r+0x1a>
 800437e:	6983      	ldr	r3, [r0, #24]
 8004380:	b90b      	cbnz	r3, 8004386 <_fflush_r+0x1a>
 8004382:	f000 f899 	bl	80044b8 <__sinit>
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <_fflush_r+0x6c>)
 8004388:	429c      	cmp	r4, r3
 800438a:	d11b      	bne.n	80043c4 <_fflush_r+0x58>
 800438c:	686c      	ldr	r4, [r5, #4]
 800438e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ef      	beq.n	8004376 <_fflush_r+0xa>
 8004396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004398:	07d0      	lsls	r0, r2, #31
 800439a:	d404      	bmi.n	80043a6 <_fflush_r+0x3a>
 800439c:	0599      	lsls	r1, r3, #22
 800439e:	d402      	bmi.n	80043a6 <_fflush_r+0x3a>
 80043a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043a2:	f000 f948 	bl	8004636 <__retarget_lock_acquire_recursive>
 80043a6:	4628      	mov	r0, r5
 80043a8:	4621      	mov	r1, r4
 80043aa:	f7ff ff59 	bl	8004260 <__sflush_r>
 80043ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043b0:	07da      	lsls	r2, r3, #31
 80043b2:	4605      	mov	r5, r0
 80043b4:	d4e0      	bmi.n	8004378 <_fflush_r+0xc>
 80043b6:	89a3      	ldrh	r3, [r4, #12]
 80043b8:	059b      	lsls	r3, r3, #22
 80043ba:	d4dd      	bmi.n	8004378 <_fflush_r+0xc>
 80043bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043be:	f000 f93b 	bl	8004638 <__retarget_lock_release_recursive>
 80043c2:	e7d9      	b.n	8004378 <_fflush_r+0xc>
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <_fflush_r+0x70>)
 80043c6:	429c      	cmp	r4, r3
 80043c8:	d101      	bne.n	80043ce <_fflush_r+0x62>
 80043ca:	68ac      	ldr	r4, [r5, #8]
 80043cc:	e7df      	b.n	800438e <_fflush_r+0x22>
 80043ce:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <_fflush_r+0x74>)
 80043d0:	429c      	cmp	r4, r3
 80043d2:	bf08      	it	eq
 80043d4:	68ec      	ldreq	r4, [r5, #12]
 80043d6:	e7da      	b.n	800438e <_fflush_r+0x22>
 80043d8:	080066c8 	.word	0x080066c8
 80043dc:	080066e8 	.word	0x080066e8
 80043e0:	080066a8 	.word	0x080066a8

080043e4 <fflush>:
 80043e4:	4601      	mov	r1, r0
 80043e6:	b920      	cbnz	r0, 80043f2 <fflush+0xe>
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <fflush+0x18>)
 80043ea:	4905      	ldr	r1, [pc, #20]	; (8004400 <fflush+0x1c>)
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	f000 b8fe 	b.w	80045ee <_fwalk_reent>
 80043f2:	4b04      	ldr	r3, [pc, #16]	; (8004404 <fflush+0x20>)
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	f7ff bfb9 	b.w	800436c <_fflush_r>
 80043fa:	bf00      	nop
 80043fc:	080065dc 	.word	0x080065dc
 8004400:	0800436d 	.word	0x0800436d
 8004404:	2000000c 	.word	0x2000000c

08004408 <std>:
 8004408:	2300      	movs	r3, #0
 800440a:	b510      	push	{r4, lr}
 800440c:	4604      	mov	r4, r0
 800440e:	e9c0 3300 	strd	r3, r3, [r0]
 8004412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004416:	6083      	str	r3, [r0, #8]
 8004418:	8181      	strh	r1, [r0, #12]
 800441a:	6643      	str	r3, [r0, #100]	; 0x64
 800441c:	81c2      	strh	r2, [r0, #14]
 800441e:	6183      	str	r3, [r0, #24]
 8004420:	4619      	mov	r1, r3
 8004422:	2208      	movs	r2, #8
 8004424:	305c      	adds	r0, #92	; 0x5c
 8004426:	f7fe f941 	bl	80026ac <memset>
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <std+0x38>)
 800442c:	6263      	str	r3, [r4, #36]	; 0x24
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <std+0x3c>)
 8004430:	62a3      	str	r3, [r4, #40]	; 0x28
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <std+0x40>)
 8004434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <std+0x44>)
 8004438:	6224      	str	r4, [r4, #32]
 800443a:	6323      	str	r3, [r4, #48]	; 0x30
 800443c:	bd10      	pop	{r4, pc}
 800443e:	bf00      	nop
 8004440:	080058d1 	.word	0x080058d1
 8004444:	080058f3 	.word	0x080058f3
 8004448:	0800592b 	.word	0x0800592b
 800444c:	0800594f 	.word	0x0800594f

08004450 <_cleanup_r>:
 8004450:	4901      	ldr	r1, [pc, #4]	; (8004458 <_cleanup_r+0x8>)
 8004452:	f000 b8cc 	b.w	80045ee <_fwalk_reent>
 8004456:	bf00      	nop
 8004458:	0800436d 	.word	0x0800436d

0800445c <__sfmoreglue>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	1e4a      	subs	r2, r1, #1
 8004460:	2568      	movs	r5, #104	; 0x68
 8004462:	4355      	muls	r5, r2
 8004464:	460e      	mov	r6, r1
 8004466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800446a:	f7fe f977 	bl	800275c <_malloc_r>
 800446e:	4604      	mov	r4, r0
 8004470:	b140      	cbz	r0, 8004484 <__sfmoreglue+0x28>
 8004472:	2100      	movs	r1, #0
 8004474:	e9c0 1600 	strd	r1, r6, [r0]
 8004478:	300c      	adds	r0, #12
 800447a:	60a0      	str	r0, [r4, #8]
 800447c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004480:	f7fe f914 	bl	80026ac <memset>
 8004484:	4620      	mov	r0, r4
 8004486:	bd70      	pop	{r4, r5, r6, pc}

08004488 <__sfp_lock_acquire>:
 8004488:	4801      	ldr	r0, [pc, #4]	; (8004490 <__sfp_lock_acquire+0x8>)
 800448a:	f000 b8d4 	b.w	8004636 <__retarget_lock_acquire_recursive>
 800448e:	bf00      	nop
 8004490:	20002a5c 	.word	0x20002a5c

08004494 <__sfp_lock_release>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__sfp_lock_release+0x8>)
 8004496:	f000 b8cf 	b.w	8004638 <__retarget_lock_release_recursive>
 800449a:	bf00      	nop
 800449c:	20002a5c 	.word	0x20002a5c

080044a0 <__sinit_lock_acquire>:
 80044a0:	4801      	ldr	r0, [pc, #4]	; (80044a8 <__sinit_lock_acquire+0x8>)
 80044a2:	f000 b8c8 	b.w	8004636 <__retarget_lock_acquire_recursive>
 80044a6:	bf00      	nop
 80044a8:	20002a57 	.word	0x20002a57

080044ac <__sinit_lock_release>:
 80044ac:	4801      	ldr	r0, [pc, #4]	; (80044b4 <__sinit_lock_release+0x8>)
 80044ae:	f000 b8c3 	b.w	8004638 <__retarget_lock_release_recursive>
 80044b2:	bf00      	nop
 80044b4:	20002a57 	.word	0x20002a57

080044b8 <__sinit>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
 80044bc:	f7ff fff0 	bl	80044a0 <__sinit_lock_acquire>
 80044c0:	69a3      	ldr	r3, [r4, #24]
 80044c2:	b11b      	cbz	r3, 80044cc <__sinit+0x14>
 80044c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c8:	f7ff bff0 	b.w	80044ac <__sinit_lock_release>
 80044cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044d0:	6523      	str	r3, [r4, #80]	; 0x50
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <__sinit+0x68>)
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <__sinit+0x6c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80044da:	42a3      	cmp	r3, r4
 80044dc:	bf04      	itt	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	61a3      	streq	r3, [r4, #24]
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 f820 	bl	8004528 <__sfp>
 80044e8:	6060      	str	r0, [r4, #4]
 80044ea:	4620      	mov	r0, r4
 80044ec:	f000 f81c 	bl	8004528 <__sfp>
 80044f0:	60a0      	str	r0, [r4, #8]
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 f818 	bl	8004528 <__sfp>
 80044f8:	2200      	movs	r2, #0
 80044fa:	60e0      	str	r0, [r4, #12]
 80044fc:	2104      	movs	r1, #4
 80044fe:	6860      	ldr	r0, [r4, #4]
 8004500:	f7ff ff82 	bl	8004408 <std>
 8004504:	68a0      	ldr	r0, [r4, #8]
 8004506:	2201      	movs	r2, #1
 8004508:	2109      	movs	r1, #9
 800450a:	f7ff ff7d 	bl	8004408 <std>
 800450e:	68e0      	ldr	r0, [r4, #12]
 8004510:	2202      	movs	r2, #2
 8004512:	2112      	movs	r1, #18
 8004514:	f7ff ff78 	bl	8004408 <std>
 8004518:	2301      	movs	r3, #1
 800451a:	61a3      	str	r3, [r4, #24]
 800451c:	e7d2      	b.n	80044c4 <__sinit+0xc>
 800451e:	bf00      	nop
 8004520:	080065dc 	.word	0x080065dc
 8004524:	08004451 	.word	0x08004451

08004528 <__sfp>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	4607      	mov	r7, r0
 800452c:	f7ff ffac 	bl	8004488 <__sfp_lock_acquire>
 8004530:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <__sfp+0x84>)
 8004532:	681e      	ldr	r6, [r3, #0]
 8004534:	69b3      	ldr	r3, [r6, #24]
 8004536:	b913      	cbnz	r3, 800453e <__sfp+0x16>
 8004538:	4630      	mov	r0, r6
 800453a:	f7ff ffbd 	bl	80044b8 <__sinit>
 800453e:	3648      	adds	r6, #72	; 0x48
 8004540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004544:	3b01      	subs	r3, #1
 8004546:	d503      	bpl.n	8004550 <__sfp+0x28>
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	b30b      	cbz	r3, 8004590 <__sfp+0x68>
 800454c:	6836      	ldr	r6, [r6, #0]
 800454e:	e7f7      	b.n	8004540 <__sfp+0x18>
 8004550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004554:	b9d5      	cbnz	r5, 800458c <__sfp+0x64>
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <__sfp+0x88>)
 8004558:	60e3      	str	r3, [r4, #12]
 800455a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800455e:	6665      	str	r5, [r4, #100]	; 0x64
 8004560:	f000 f868 	bl	8004634 <__retarget_lock_init_recursive>
 8004564:	f7ff ff96 	bl	8004494 <__sfp_lock_release>
 8004568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800456c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004570:	6025      	str	r5, [r4, #0]
 8004572:	61a5      	str	r5, [r4, #24]
 8004574:	2208      	movs	r2, #8
 8004576:	4629      	mov	r1, r5
 8004578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800457c:	f7fe f896 	bl	80026ac <memset>
 8004580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004588:	4620      	mov	r0, r4
 800458a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800458c:	3468      	adds	r4, #104	; 0x68
 800458e:	e7d9      	b.n	8004544 <__sfp+0x1c>
 8004590:	2104      	movs	r1, #4
 8004592:	4638      	mov	r0, r7
 8004594:	f7ff ff62 	bl	800445c <__sfmoreglue>
 8004598:	4604      	mov	r4, r0
 800459a:	6030      	str	r0, [r6, #0]
 800459c:	2800      	cmp	r0, #0
 800459e:	d1d5      	bne.n	800454c <__sfp+0x24>
 80045a0:	f7ff ff78 	bl	8004494 <__sfp_lock_release>
 80045a4:	230c      	movs	r3, #12
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	e7ee      	b.n	8004588 <__sfp+0x60>
 80045aa:	bf00      	nop
 80045ac:	080065dc 	.word	0x080065dc
 80045b0:	ffff0001 	.word	0xffff0001

080045b4 <_fwalk>:
 80045b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	460f      	mov	r7, r1
 80045ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045be:	2600      	movs	r6, #0
 80045c0:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80045c4:	f1b8 0801 	subs.w	r8, r8, #1
 80045c8:	d505      	bpl.n	80045d6 <_fwalk+0x22>
 80045ca:	6824      	ldr	r4, [r4, #0]
 80045cc:	2c00      	cmp	r4, #0
 80045ce:	d1f7      	bne.n	80045c0 <_fwalk+0xc>
 80045d0:	4630      	mov	r0, r6
 80045d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d6:	89ab      	ldrh	r3, [r5, #12]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d906      	bls.n	80045ea <_fwalk+0x36>
 80045dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045e0:	3301      	adds	r3, #1
 80045e2:	d002      	beq.n	80045ea <_fwalk+0x36>
 80045e4:	4628      	mov	r0, r5
 80045e6:	47b8      	blx	r7
 80045e8:	4306      	orrs	r6, r0
 80045ea:	3568      	adds	r5, #104	; 0x68
 80045ec:	e7ea      	b.n	80045c4 <_fwalk+0x10>

080045ee <_fwalk_reent>:
 80045ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045f2:	4606      	mov	r6, r0
 80045f4:	4688      	mov	r8, r1
 80045f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045fa:	2700      	movs	r7, #0
 80045fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004600:	f1b9 0901 	subs.w	r9, r9, #1
 8004604:	d505      	bpl.n	8004612 <_fwalk_reent+0x24>
 8004606:	6824      	ldr	r4, [r4, #0]
 8004608:	2c00      	cmp	r4, #0
 800460a:	d1f7      	bne.n	80045fc <_fwalk_reent+0xe>
 800460c:	4638      	mov	r0, r7
 800460e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004612:	89ab      	ldrh	r3, [r5, #12]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d907      	bls.n	8004628 <_fwalk_reent+0x3a>
 8004618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800461c:	3301      	adds	r3, #1
 800461e:	d003      	beq.n	8004628 <_fwalk_reent+0x3a>
 8004620:	4629      	mov	r1, r5
 8004622:	4630      	mov	r0, r6
 8004624:	47c0      	blx	r8
 8004626:	4307      	orrs	r7, r0
 8004628:	3568      	adds	r5, #104	; 0x68
 800462a:	e7e9      	b.n	8004600 <_fwalk_reent+0x12>

0800462c <_localeconv_r>:
 800462c:	4800      	ldr	r0, [pc, #0]	; (8004630 <_localeconv_r+0x4>)
 800462e:	4770      	bx	lr
 8004630:	20000160 	.word	0x20000160

08004634 <__retarget_lock_init_recursive>:
 8004634:	4770      	bx	lr

08004636 <__retarget_lock_acquire_recursive>:
 8004636:	4770      	bx	lr

08004638 <__retarget_lock_release_recursive>:
 8004638:	4770      	bx	lr

0800463a <__swhatbuf_r>:
 800463a:	b570      	push	{r4, r5, r6, lr}
 800463c:	460e      	mov	r6, r1
 800463e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004642:	2900      	cmp	r1, #0
 8004644:	b096      	sub	sp, #88	; 0x58
 8004646:	4614      	mov	r4, r2
 8004648:	461d      	mov	r5, r3
 800464a:	da07      	bge.n	800465c <__swhatbuf_r+0x22>
 800464c:	2300      	movs	r3, #0
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	89b3      	ldrh	r3, [r6, #12]
 8004652:	061a      	lsls	r2, r3, #24
 8004654:	d410      	bmi.n	8004678 <__swhatbuf_r+0x3e>
 8004656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465a:	e00e      	b.n	800467a <__swhatbuf_r+0x40>
 800465c:	466a      	mov	r2, sp
 800465e:	f001 fba3 	bl	8005da8 <_fstat_r>
 8004662:	2800      	cmp	r0, #0
 8004664:	dbf2      	blt.n	800464c <__swhatbuf_r+0x12>
 8004666:	9a01      	ldr	r2, [sp, #4]
 8004668:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800466c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004670:	425a      	negs	r2, r3
 8004672:	415a      	adcs	r2, r3
 8004674:	602a      	str	r2, [r5, #0]
 8004676:	e7ee      	b.n	8004656 <__swhatbuf_r+0x1c>
 8004678:	2340      	movs	r3, #64	; 0x40
 800467a:	2000      	movs	r0, #0
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	b016      	add	sp, #88	; 0x58
 8004680:	bd70      	pop	{r4, r5, r6, pc}
	...

08004684 <__smakebuf_r>:
 8004684:	898b      	ldrh	r3, [r1, #12]
 8004686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004688:	079d      	lsls	r5, r3, #30
 800468a:	4606      	mov	r6, r0
 800468c:	460c      	mov	r4, r1
 800468e:	d507      	bpl.n	80046a0 <__smakebuf_r+0x1c>
 8004690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	6123      	str	r3, [r4, #16]
 8004698:	2301      	movs	r3, #1
 800469a:	6163      	str	r3, [r4, #20]
 800469c:	b002      	add	sp, #8
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	ab01      	add	r3, sp, #4
 80046a2:	466a      	mov	r2, sp
 80046a4:	f7ff ffc9 	bl	800463a <__swhatbuf_r>
 80046a8:	9900      	ldr	r1, [sp, #0]
 80046aa:	4605      	mov	r5, r0
 80046ac:	4630      	mov	r0, r6
 80046ae:	f7fe f855 	bl	800275c <_malloc_r>
 80046b2:	b948      	cbnz	r0, 80046c8 <__smakebuf_r+0x44>
 80046b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b8:	059a      	lsls	r2, r3, #22
 80046ba:	d4ef      	bmi.n	800469c <__smakebuf_r+0x18>
 80046bc:	f023 0303 	bic.w	r3, r3, #3
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	e7e3      	b.n	8004690 <__smakebuf_r+0xc>
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <__smakebuf_r+0x7c>)
 80046ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80046cc:	89a3      	ldrh	r3, [r4, #12]
 80046ce:	6020      	str	r0, [r4, #0]
 80046d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	9b00      	ldr	r3, [sp, #0]
 80046d8:	6163      	str	r3, [r4, #20]
 80046da:	9b01      	ldr	r3, [sp, #4]
 80046dc:	6120      	str	r0, [r4, #16]
 80046de:	b15b      	cbz	r3, 80046f8 <__smakebuf_r+0x74>
 80046e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046e4:	4630      	mov	r0, r6
 80046e6:	f001 fb71 	bl	8005dcc <_isatty_r>
 80046ea:	b128      	cbz	r0, 80046f8 <__smakebuf_r+0x74>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	81a3      	strh	r3, [r4, #12]
 80046f8:	89a0      	ldrh	r0, [r4, #12]
 80046fa:	4305      	orrs	r5, r0
 80046fc:	81a5      	strh	r5, [r4, #12]
 80046fe:	e7cd      	b.n	800469c <__smakebuf_r+0x18>
 8004700:	08004451 	.word	0x08004451

08004704 <memcpy>:
 8004704:	440a      	add	r2, r1
 8004706:	4291      	cmp	r1, r2
 8004708:	f100 33ff 	add.w	r3, r0, #4294967295
 800470c:	d100      	bne.n	8004710 <memcpy+0xc>
 800470e:	4770      	bx	lr
 8004710:	b510      	push	{r4, lr}
 8004712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800471a:	4291      	cmp	r1, r2
 800471c:	d1f9      	bne.n	8004712 <memcpy+0xe>
 800471e:	bd10      	pop	{r4, pc}

08004720 <__malloc_lock>:
 8004720:	4801      	ldr	r0, [pc, #4]	; (8004728 <__malloc_lock+0x8>)
 8004722:	f7ff bf88 	b.w	8004636 <__retarget_lock_acquire_recursive>
 8004726:	bf00      	nop
 8004728:	20002a58 	.word	0x20002a58

0800472c <__malloc_unlock>:
 800472c:	4801      	ldr	r0, [pc, #4]	; (8004734 <__malloc_unlock+0x8>)
 800472e:	f7ff bf83 	b.w	8004638 <__retarget_lock_release_recursive>
 8004732:	bf00      	nop
 8004734:	20002a58 	.word	0x20002a58

08004738 <_Balloc>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800473c:	4604      	mov	r4, r0
 800473e:	460d      	mov	r5, r1
 8004740:	b976      	cbnz	r6, 8004760 <_Balloc+0x28>
 8004742:	2010      	movs	r0, #16
 8004744:	f7fd ffaa 	bl	800269c <malloc>
 8004748:	4602      	mov	r2, r0
 800474a:	6260      	str	r0, [r4, #36]	; 0x24
 800474c:	b920      	cbnz	r0, 8004758 <_Balloc+0x20>
 800474e:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <_Balloc+0x78>)
 8004750:	4818      	ldr	r0, [pc, #96]	; (80047b4 <_Balloc+0x7c>)
 8004752:	2166      	movs	r1, #102	; 0x66
 8004754:	f001 fae8 	bl	8005d28 <__assert_func>
 8004758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800475c:	6006      	str	r6, [r0, #0]
 800475e:	60c6      	str	r6, [r0, #12]
 8004760:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004762:	68f3      	ldr	r3, [r6, #12]
 8004764:	b183      	cbz	r3, 8004788 <_Balloc+0x50>
 8004766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800476e:	b9b8      	cbnz	r0, 80047a0 <_Balloc+0x68>
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f605 	lsl.w	r6, r1, r5
 8004776:	1d72      	adds	r2, r6, #5
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	4620      	mov	r0, r4
 800477c:	f000 fb5a 	bl	8004e34 <_calloc_r>
 8004780:	b160      	cbz	r0, 800479c <_Balloc+0x64>
 8004782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004786:	e00e      	b.n	80047a6 <_Balloc+0x6e>
 8004788:	2221      	movs	r2, #33	; 0x21
 800478a:	2104      	movs	r1, #4
 800478c:	4620      	mov	r0, r4
 800478e:	f000 fb51 	bl	8004e34 <_calloc_r>
 8004792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004794:	60f0      	str	r0, [r6, #12]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e4      	bne.n	8004766 <_Balloc+0x2e>
 800479c:	2000      	movs	r0, #0
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	6802      	ldr	r2, [r0, #0]
 80047a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80047a6:	2300      	movs	r3, #0
 80047a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80047ac:	e7f7      	b.n	800479e <_Balloc+0x66>
 80047ae:	bf00      	nop
 80047b0:	0800661f 	.word	0x0800661f
 80047b4:	08006708 	.word	0x08006708

080047b8 <_Bfree>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80047bc:	4605      	mov	r5, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	b976      	cbnz	r6, 80047e0 <_Bfree+0x28>
 80047c2:	2010      	movs	r0, #16
 80047c4:	f7fd ff6a 	bl	800269c <malloc>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6268      	str	r0, [r5, #36]	; 0x24
 80047cc:	b920      	cbnz	r0, 80047d8 <_Bfree+0x20>
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <_Bfree+0x3c>)
 80047d0:	4809      	ldr	r0, [pc, #36]	; (80047f8 <_Bfree+0x40>)
 80047d2:	218a      	movs	r1, #138	; 0x8a
 80047d4:	f001 faa8 	bl	8005d28 <__assert_func>
 80047d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047dc:	6006      	str	r6, [r0, #0]
 80047de:	60c6      	str	r6, [r0, #12]
 80047e0:	b13c      	cbz	r4, 80047f2 <_Bfree+0x3a>
 80047e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047e4:	6862      	ldr	r2, [r4, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047ec:	6021      	str	r1, [r4, #0]
 80047ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80047f2:	bd70      	pop	{r4, r5, r6, pc}
 80047f4:	0800661f 	.word	0x0800661f
 80047f8:	08006708 	.word	0x08006708

080047fc <__multadd>:
 80047fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004800:	690e      	ldr	r6, [r1, #16]
 8004802:	4607      	mov	r7, r0
 8004804:	4698      	mov	r8, r3
 8004806:	460c      	mov	r4, r1
 8004808:	f101 0014 	add.w	r0, r1, #20
 800480c:	2300      	movs	r3, #0
 800480e:	6805      	ldr	r5, [r0, #0]
 8004810:	b2a9      	uxth	r1, r5
 8004812:	fb02 8101 	mla	r1, r2, r1, r8
 8004816:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800481a:	0c2d      	lsrs	r5, r5, #16
 800481c:	fb02 c505 	mla	r5, r2, r5, ip
 8004820:	b289      	uxth	r1, r1
 8004822:	3301      	adds	r3, #1
 8004824:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004828:	429e      	cmp	r6, r3
 800482a:	f840 1b04 	str.w	r1, [r0], #4
 800482e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004832:	dcec      	bgt.n	800480e <__multadd+0x12>
 8004834:	f1b8 0f00 	cmp.w	r8, #0
 8004838:	d022      	beq.n	8004880 <__multadd+0x84>
 800483a:	68a3      	ldr	r3, [r4, #8]
 800483c:	42b3      	cmp	r3, r6
 800483e:	dc19      	bgt.n	8004874 <__multadd+0x78>
 8004840:	6861      	ldr	r1, [r4, #4]
 8004842:	4638      	mov	r0, r7
 8004844:	3101      	adds	r1, #1
 8004846:	f7ff ff77 	bl	8004738 <_Balloc>
 800484a:	4605      	mov	r5, r0
 800484c:	b928      	cbnz	r0, 800485a <__multadd+0x5e>
 800484e:	4602      	mov	r2, r0
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <__multadd+0x8c>)
 8004852:	480e      	ldr	r0, [pc, #56]	; (800488c <__multadd+0x90>)
 8004854:	21b5      	movs	r1, #181	; 0xb5
 8004856:	f001 fa67 	bl	8005d28 <__assert_func>
 800485a:	6922      	ldr	r2, [r4, #16]
 800485c:	3202      	adds	r2, #2
 800485e:	f104 010c 	add.w	r1, r4, #12
 8004862:	0092      	lsls	r2, r2, #2
 8004864:	300c      	adds	r0, #12
 8004866:	f7ff ff4d 	bl	8004704 <memcpy>
 800486a:	4621      	mov	r1, r4
 800486c:	4638      	mov	r0, r7
 800486e:	f7ff ffa3 	bl	80047b8 <_Bfree>
 8004872:	462c      	mov	r4, r5
 8004874:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004878:	3601      	adds	r6, #1
 800487a:	f8c3 8014 	str.w	r8, [r3, #20]
 800487e:	6126      	str	r6, [r4, #16]
 8004880:	4620      	mov	r0, r4
 8004882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004886:	bf00      	nop
 8004888:	08006695 	.word	0x08006695
 800488c:	08006708 	.word	0x08006708

08004890 <__hi0bits>:
 8004890:	0c03      	lsrs	r3, r0, #16
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	b9d3      	cbnz	r3, 80048cc <__hi0bits+0x3c>
 8004896:	0400      	lsls	r0, r0, #16
 8004898:	2310      	movs	r3, #16
 800489a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800489e:	bf04      	itt	eq
 80048a0:	0200      	lsleq	r0, r0, #8
 80048a2:	3308      	addeq	r3, #8
 80048a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80048a8:	bf04      	itt	eq
 80048aa:	0100      	lsleq	r0, r0, #4
 80048ac:	3304      	addeq	r3, #4
 80048ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80048b2:	bf04      	itt	eq
 80048b4:	0080      	lsleq	r0, r0, #2
 80048b6:	3302      	addeq	r3, #2
 80048b8:	2800      	cmp	r0, #0
 80048ba:	db05      	blt.n	80048c8 <__hi0bits+0x38>
 80048bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80048c0:	f103 0301 	add.w	r3, r3, #1
 80048c4:	bf08      	it	eq
 80048c6:	2320      	moveq	r3, #32
 80048c8:	4618      	mov	r0, r3
 80048ca:	4770      	bx	lr
 80048cc:	2300      	movs	r3, #0
 80048ce:	e7e4      	b.n	800489a <__hi0bits+0xa>

080048d0 <__lo0bits>:
 80048d0:	6803      	ldr	r3, [r0, #0]
 80048d2:	f013 0207 	ands.w	r2, r3, #7
 80048d6:	4601      	mov	r1, r0
 80048d8:	d00b      	beq.n	80048f2 <__lo0bits+0x22>
 80048da:	07da      	lsls	r2, r3, #31
 80048dc:	d424      	bmi.n	8004928 <__lo0bits+0x58>
 80048de:	0798      	lsls	r0, r3, #30
 80048e0:	bf49      	itett	mi
 80048e2:	085b      	lsrmi	r3, r3, #1
 80048e4:	089b      	lsrpl	r3, r3, #2
 80048e6:	2001      	movmi	r0, #1
 80048e8:	600b      	strmi	r3, [r1, #0]
 80048ea:	bf5c      	itt	pl
 80048ec:	600b      	strpl	r3, [r1, #0]
 80048ee:	2002      	movpl	r0, #2
 80048f0:	4770      	bx	lr
 80048f2:	b298      	uxth	r0, r3
 80048f4:	b9b0      	cbnz	r0, 8004924 <__lo0bits+0x54>
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	2010      	movs	r0, #16
 80048fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80048fe:	bf04      	itt	eq
 8004900:	0a1b      	lsreq	r3, r3, #8
 8004902:	3008      	addeq	r0, #8
 8004904:	071a      	lsls	r2, r3, #28
 8004906:	bf04      	itt	eq
 8004908:	091b      	lsreq	r3, r3, #4
 800490a:	3004      	addeq	r0, #4
 800490c:	079a      	lsls	r2, r3, #30
 800490e:	bf04      	itt	eq
 8004910:	089b      	lsreq	r3, r3, #2
 8004912:	3002      	addeq	r0, #2
 8004914:	07da      	lsls	r2, r3, #31
 8004916:	d403      	bmi.n	8004920 <__lo0bits+0x50>
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	f100 0001 	add.w	r0, r0, #1
 800491e:	d005      	beq.n	800492c <__lo0bits+0x5c>
 8004920:	600b      	str	r3, [r1, #0]
 8004922:	4770      	bx	lr
 8004924:	4610      	mov	r0, r2
 8004926:	e7e8      	b.n	80048fa <__lo0bits+0x2a>
 8004928:	2000      	movs	r0, #0
 800492a:	4770      	bx	lr
 800492c:	2020      	movs	r0, #32
 800492e:	4770      	bx	lr

08004930 <__i2b>:
 8004930:	b510      	push	{r4, lr}
 8004932:	460c      	mov	r4, r1
 8004934:	2101      	movs	r1, #1
 8004936:	f7ff feff 	bl	8004738 <_Balloc>
 800493a:	4602      	mov	r2, r0
 800493c:	b928      	cbnz	r0, 800494a <__i2b+0x1a>
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <__i2b+0x24>)
 8004940:	4805      	ldr	r0, [pc, #20]	; (8004958 <__i2b+0x28>)
 8004942:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004946:	f001 f9ef 	bl	8005d28 <__assert_func>
 800494a:	2301      	movs	r3, #1
 800494c:	6144      	str	r4, [r0, #20]
 800494e:	6103      	str	r3, [r0, #16]
 8004950:	bd10      	pop	{r4, pc}
 8004952:	bf00      	nop
 8004954:	08006695 	.word	0x08006695
 8004958:	08006708 	.word	0x08006708

0800495c <__multiply>:
 800495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004960:	4614      	mov	r4, r2
 8004962:	690a      	ldr	r2, [r1, #16]
 8004964:	6923      	ldr	r3, [r4, #16]
 8004966:	429a      	cmp	r2, r3
 8004968:	bfb8      	it	lt
 800496a:	460b      	movlt	r3, r1
 800496c:	460d      	mov	r5, r1
 800496e:	bfbc      	itt	lt
 8004970:	4625      	movlt	r5, r4
 8004972:	461c      	movlt	r4, r3
 8004974:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004978:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800497c:	68ab      	ldr	r3, [r5, #8]
 800497e:	6869      	ldr	r1, [r5, #4]
 8004980:	eb0a 0709 	add.w	r7, sl, r9
 8004984:	42bb      	cmp	r3, r7
 8004986:	b085      	sub	sp, #20
 8004988:	bfb8      	it	lt
 800498a:	3101      	addlt	r1, #1
 800498c:	f7ff fed4 	bl	8004738 <_Balloc>
 8004990:	b930      	cbnz	r0, 80049a0 <__multiply+0x44>
 8004992:	4602      	mov	r2, r0
 8004994:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <__multiply+0x144>)
 8004996:	4843      	ldr	r0, [pc, #268]	; (8004aa4 <__multiply+0x148>)
 8004998:	f240 115d 	movw	r1, #349	; 0x15d
 800499c:	f001 f9c4 	bl	8005d28 <__assert_func>
 80049a0:	f100 0614 	add.w	r6, r0, #20
 80049a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80049a8:	4633      	mov	r3, r6
 80049aa:	2200      	movs	r2, #0
 80049ac:	4543      	cmp	r3, r8
 80049ae:	d31e      	bcc.n	80049ee <__multiply+0x92>
 80049b0:	f105 0c14 	add.w	ip, r5, #20
 80049b4:	f104 0314 	add.w	r3, r4, #20
 80049b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80049bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80049c0:	9202      	str	r2, [sp, #8]
 80049c2:	ebac 0205 	sub.w	r2, ip, r5
 80049c6:	3a15      	subs	r2, #21
 80049c8:	f022 0203 	bic.w	r2, r2, #3
 80049cc:	3204      	adds	r2, #4
 80049ce:	f105 0115 	add.w	r1, r5, #21
 80049d2:	458c      	cmp	ip, r1
 80049d4:	bf38      	it	cc
 80049d6:	2204      	movcc	r2, #4
 80049d8:	9201      	str	r2, [sp, #4]
 80049da:	9a02      	ldr	r2, [sp, #8]
 80049dc:	9303      	str	r3, [sp, #12]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d808      	bhi.n	80049f4 <__multiply+0x98>
 80049e2:	2f00      	cmp	r7, #0
 80049e4:	dc55      	bgt.n	8004a92 <__multiply+0x136>
 80049e6:	6107      	str	r7, [r0, #16]
 80049e8:	b005      	add	sp, #20
 80049ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ee:	f843 2b04 	str.w	r2, [r3], #4
 80049f2:	e7db      	b.n	80049ac <__multiply+0x50>
 80049f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80049f8:	f1ba 0f00 	cmp.w	sl, #0
 80049fc:	d020      	beq.n	8004a40 <__multiply+0xe4>
 80049fe:	f105 0e14 	add.w	lr, r5, #20
 8004a02:	46b1      	mov	r9, r6
 8004a04:	2200      	movs	r2, #0
 8004a06:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004a0a:	f8d9 b000 	ldr.w	fp, [r9]
 8004a0e:	b2a1      	uxth	r1, r4
 8004a10:	fa1f fb8b 	uxth.w	fp, fp
 8004a14:	fb0a b101 	mla	r1, sl, r1, fp
 8004a18:	4411      	add	r1, r2
 8004a1a:	f8d9 2000 	ldr.w	r2, [r9]
 8004a1e:	0c24      	lsrs	r4, r4, #16
 8004a20:	0c12      	lsrs	r2, r2, #16
 8004a22:	fb0a 2404 	mla	r4, sl, r4, r2
 8004a26:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004a2a:	b289      	uxth	r1, r1
 8004a2c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004a30:	45f4      	cmp	ip, lr
 8004a32:	f849 1b04 	str.w	r1, [r9], #4
 8004a36:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004a3a:	d8e4      	bhi.n	8004a06 <__multiply+0xaa>
 8004a3c:	9901      	ldr	r1, [sp, #4]
 8004a3e:	5072      	str	r2, [r6, r1]
 8004a40:	9a03      	ldr	r2, [sp, #12]
 8004a42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004a46:	3304      	adds	r3, #4
 8004a48:	f1b9 0f00 	cmp.w	r9, #0
 8004a4c:	d01f      	beq.n	8004a8e <__multiply+0x132>
 8004a4e:	6834      	ldr	r4, [r6, #0]
 8004a50:	f105 0114 	add.w	r1, r5, #20
 8004a54:	46b6      	mov	lr, r6
 8004a56:	f04f 0a00 	mov.w	sl, #0
 8004a5a:	880a      	ldrh	r2, [r1, #0]
 8004a5c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004a60:	fb09 b202 	mla	r2, r9, r2, fp
 8004a64:	4492      	add	sl, r2
 8004a66:	b2a4      	uxth	r4, r4
 8004a68:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004a6c:	f84e 4b04 	str.w	r4, [lr], #4
 8004a70:	f851 4b04 	ldr.w	r4, [r1], #4
 8004a74:	f8be 2000 	ldrh.w	r2, [lr]
 8004a78:	0c24      	lsrs	r4, r4, #16
 8004a7a:	fb09 2404 	mla	r4, r9, r4, r2
 8004a7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004a82:	458c      	cmp	ip, r1
 8004a84:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004a88:	d8e7      	bhi.n	8004a5a <__multiply+0xfe>
 8004a8a:	9a01      	ldr	r2, [sp, #4]
 8004a8c:	50b4      	str	r4, [r6, r2]
 8004a8e:	3604      	adds	r6, #4
 8004a90:	e7a3      	b.n	80049da <__multiply+0x7e>
 8004a92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1a5      	bne.n	80049e6 <__multiply+0x8a>
 8004a9a:	3f01      	subs	r7, #1
 8004a9c:	e7a1      	b.n	80049e2 <__multiply+0x86>
 8004a9e:	bf00      	nop
 8004aa0:	08006695 	.word	0x08006695
 8004aa4:	08006708 	.word	0x08006708

08004aa8 <__pow5mult>:
 8004aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aac:	4615      	mov	r5, r2
 8004aae:	f012 0203 	ands.w	r2, r2, #3
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	460f      	mov	r7, r1
 8004ab6:	d007      	beq.n	8004ac8 <__pow5mult+0x20>
 8004ab8:	4c25      	ldr	r4, [pc, #148]	; (8004b50 <__pow5mult+0xa8>)
 8004aba:	3a01      	subs	r2, #1
 8004abc:	2300      	movs	r3, #0
 8004abe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004ac2:	f7ff fe9b 	bl	80047fc <__multadd>
 8004ac6:	4607      	mov	r7, r0
 8004ac8:	10ad      	asrs	r5, r5, #2
 8004aca:	d03d      	beq.n	8004b48 <__pow5mult+0xa0>
 8004acc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004ace:	b97c      	cbnz	r4, 8004af0 <__pow5mult+0x48>
 8004ad0:	2010      	movs	r0, #16
 8004ad2:	f7fd fde3 	bl	800269c <malloc>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6270      	str	r0, [r6, #36]	; 0x24
 8004ada:	b928      	cbnz	r0, 8004ae8 <__pow5mult+0x40>
 8004adc:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <__pow5mult+0xac>)
 8004ade:	481e      	ldr	r0, [pc, #120]	; (8004b58 <__pow5mult+0xb0>)
 8004ae0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004ae4:	f001 f920 	bl	8005d28 <__assert_func>
 8004ae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004aec:	6004      	str	r4, [r0, #0]
 8004aee:	60c4      	str	r4, [r0, #12]
 8004af0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004af4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004af8:	b94c      	cbnz	r4, 8004b0e <__pow5mult+0x66>
 8004afa:	f240 2171 	movw	r1, #625	; 0x271
 8004afe:	4630      	mov	r0, r6
 8004b00:	f7ff ff16 	bl	8004930 <__i2b>
 8004b04:	2300      	movs	r3, #0
 8004b06:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	6003      	str	r3, [r0, #0]
 8004b0e:	f04f 0900 	mov.w	r9, #0
 8004b12:	07eb      	lsls	r3, r5, #31
 8004b14:	d50a      	bpl.n	8004b2c <__pow5mult+0x84>
 8004b16:	4639      	mov	r1, r7
 8004b18:	4622      	mov	r2, r4
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f7ff ff1e 	bl	800495c <__multiply>
 8004b20:	4639      	mov	r1, r7
 8004b22:	4680      	mov	r8, r0
 8004b24:	4630      	mov	r0, r6
 8004b26:	f7ff fe47 	bl	80047b8 <_Bfree>
 8004b2a:	4647      	mov	r7, r8
 8004b2c:	106d      	asrs	r5, r5, #1
 8004b2e:	d00b      	beq.n	8004b48 <__pow5mult+0xa0>
 8004b30:	6820      	ldr	r0, [r4, #0]
 8004b32:	b938      	cbnz	r0, 8004b44 <__pow5mult+0x9c>
 8004b34:	4622      	mov	r2, r4
 8004b36:	4621      	mov	r1, r4
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f7ff ff0f 	bl	800495c <__multiply>
 8004b3e:	6020      	str	r0, [r4, #0]
 8004b40:	f8c0 9000 	str.w	r9, [r0]
 8004b44:	4604      	mov	r4, r0
 8004b46:	e7e4      	b.n	8004b12 <__pow5mult+0x6a>
 8004b48:	4638      	mov	r0, r7
 8004b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4e:	bf00      	nop
 8004b50:	08006858 	.word	0x08006858
 8004b54:	0800661f 	.word	0x0800661f
 8004b58:	08006708 	.word	0x08006708

08004b5c <__lshift>:
 8004b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	460c      	mov	r4, r1
 8004b62:	6849      	ldr	r1, [r1, #4]
 8004b64:	6923      	ldr	r3, [r4, #16]
 8004b66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b6a:	68a3      	ldr	r3, [r4, #8]
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	4691      	mov	r9, r2
 8004b70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b74:	f108 0601 	add.w	r6, r8, #1
 8004b78:	42b3      	cmp	r3, r6
 8004b7a:	db0b      	blt.n	8004b94 <__lshift+0x38>
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f7ff fddb 	bl	8004738 <_Balloc>
 8004b82:	4605      	mov	r5, r0
 8004b84:	b948      	cbnz	r0, 8004b9a <__lshift+0x3e>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <__lshift+0xd0>)
 8004b8a:	4829      	ldr	r0, [pc, #164]	; (8004c30 <__lshift+0xd4>)
 8004b8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b90:	f001 f8ca 	bl	8005d28 <__assert_func>
 8004b94:	3101      	adds	r1, #1
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	e7ee      	b.n	8004b78 <__lshift+0x1c>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f100 0114 	add.w	r1, r0, #20
 8004ba0:	f100 0210 	add.w	r2, r0, #16
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	4553      	cmp	r3, sl
 8004ba8:	db33      	blt.n	8004c12 <__lshift+0xb6>
 8004baa:	6920      	ldr	r0, [r4, #16]
 8004bac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004bb0:	f104 0314 	add.w	r3, r4, #20
 8004bb4:	f019 091f 	ands.w	r9, r9, #31
 8004bb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004bbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004bc0:	d02b      	beq.n	8004c1a <__lshift+0xbe>
 8004bc2:	f1c9 0e20 	rsb	lr, r9, #32
 8004bc6:	468a      	mov	sl, r1
 8004bc8:	2200      	movs	r2, #0
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	fa00 f009 	lsl.w	r0, r0, r9
 8004bd0:	4302      	orrs	r2, r0
 8004bd2:	f84a 2b04 	str.w	r2, [sl], #4
 8004bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bda:	459c      	cmp	ip, r3
 8004bdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004be0:	d8f3      	bhi.n	8004bca <__lshift+0x6e>
 8004be2:	ebac 0304 	sub.w	r3, ip, r4
 8004be6:	3b15      	subs	r3, #21
 8004be8:	f023 0303 	bic.w	r3, r3, #3
 8004bec:	3304      	adds	r3, #4
 8004bee:	f104 0015 	add.w	r0, r4, #21
 8004bf2:	4584      	cmp	ip, r0
 8004bf4:	bf38      	it	cc
 8004bf6:	2304      	movcc	r3, #4
 8004bf8:	50ca      	str	r2, [r1, r3]
 8004bfa:	b10a      	cbz	r2, 8004c00 <__lshift+0xa4>
 8004bfc:	f108 0602 	add.w	r6, r8, #2
 8004c00:	3e01      	subs	r6, #1
 8004c02:	4638      	mov	r0, r7
 8004c04:	612e      	str	r6, [r5, #16]
 8004c06:	4621      	mov	r1, r4
 8004c08:	f7ff fdd6 	bl	80047b8 <_Bfree>
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c12:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c16:	3301      	adds	r3, #1
 8004c18:	e7c5      	b.n	8004ba6 <__lshift+0x4a>
 8004c1a:	3904      	subs	r1, #4
 8004c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c20:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c24:	459c      	cmp	ip, r3
 8004c26:	d8f9      	bhi.n	8004c1c <__lshift+0xc0>
 8004c28:	e7ea      	b.n	8004c00 <__lshift+0xa4>
 8004c2a:	bf00      	nop
 8004c2c:	08006695 	.word	0x08006695
 8004c30:	08006708 	.word	0x08006708

08004c34 <__mcmp>:
 8004c34:	b530      	push	{r4, r5, lr}
 8004c36:	6902      	ldr	r2, [r0, #16]
 8004c38:	690c      	ldr	r4, [r1, #16]
 8004c3a:	1b12      	subs	r2, r2, r4
 8004c3c:	d10e      	bne.n	8004c5c <__mcmp+0x28>
 8004c3e:	f100 0314 	add.w	r3, r0, #20
 8004c42:	3114      	adds	r1, #20
 8004c44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004c48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004c4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004c50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004c54:	42a5      	cmp	r5, r4
 8004c56:	d003      	beq.n	8004c60 <__mcmp+0x2c>
 8004c58:	d305      	bcc.n	8004c66 <__mcmp+0x32>
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	bd30      	pop	{r4, r5, pc}
 8004c60:	4283      	cmp	r3, r0
 8004c62:	d3f3      	bcc.n	8004c4c <__mcmp+0x18>
 8004c64:	e7fa      	b.n	8004c5c <__mcmp+0x28>
 8004c66:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6a:	e7f7      	b.n	8004c5c <__mcmp+0x28>

08004c6c <__mdiff>:
 8004c6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c70:	460c      	mov	r4, r1
 8004c72:	4606      	mov	r6, r0
 8004c74:	4611      	mov	r1, r2
 8004c76:	4620      	mov	r0, r4
 8004c78:	4617      	mov	r7, r2
 8004c7a:	f7ff ffdb 	bl	8004c34 <__mcmp>
 8004c7e:	1e05      	subs	r5, r0, #0
 8004c80:	d110      	bne.n	8004ca4 <__mdiff+0x38>
 8004c82:	4629      	mov	r1, r5
 8004c84:	4630      	mov	r0, r6
 8004c86:	f7ff fd57 	bl	8004738 <_Balloc>
 8004c8a:	b930      	cbnz	r0, 8004c9a <__mdiff+0x2e>
 8004c8c:	4b39      	ldr	r3, [pc, #228]	; (8004d74 <__mdiff+0x108>)
 8004c8e:	4602      	mov	r2, r0
 8004c90:	f240 2132 	movw	r1, #562	; 0x232
 8004c94:	4838      	ldr	r0, [pc, #224]	; (8004d78 <__mdiff+0x10c>)
 8004c96:	f001 f847 	bl	8005d28 <__assert_func>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004ca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca4:	bfa4      	itt	ge
 8004ca6:	463b      	movge	r3, r7
 8004ca8:	4627      	movge	r7, r4
 8004caa:	4630      	mov	r0, r6
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	bfa6      	itte	ge
 8004cb0:	461c      	movge	r4, r3
 8004cb2:	2500      	movge	r5, #0
 8004cb4:	2501      	movlt	r5, #1
 8004cb6:	f7ff fd3f 	bl	8004738 <_Balloc>
 8004cba:	b920      	cbnz	r0, 8004cc6 <__mdiff+0x5a>
 8004cbc:	4b2d      	ldr	r3, [pc, #180]	; (8004d74 <__mdiff+0x108>)
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004cc4:	e7e6      	b.n	8004c94 <__mdiff+0x28>
 8004cc6:	693e      	ldr	r6, [r7, #16]
 8004cc8:	60c5      	str	r5, [r0, #12]
 8004cca:	6925      	ldr	r5, [r4, #16]
 8004ccc:	f107 0114 	add.w	r1, r7, #20
 8004cd0:	f104 0914 	add.w	r9, r4, #20
 8004cd4:	f100 0e14 	add.w	lr, r0, #20
 8004cd8:	f107 0210 	add.w	r2, r7, #16
 8004cdc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004ce0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004ce4:	46f2      	mov	sl, lr
 8004ce6:	2700      	movs	r7, #0
 8004ce8:	f859 3b04 	ldr.w	r3, [r9], #4
 8004cec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004cf0:	fa1f f883 	uxth.w	r8, r3
 8004cf4:	fa17 f78b 	uxtah	r7, r7, fp
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	eba7 0808 	sub.w	r8, r7, r8
 8004cfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004d02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004d06:	fa1f f888 	uxth.w	r8, r8
 8004d0a:	141f      	asrs	r7, r3, #16
 8004d0c:	454d      	cmp	r5, r9
 8004d0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004d12:	f84a 3b04 	str.w	r3, [sl], #4
 8004d16:	d8e7      	bhi.n	8004ce8 <__mdiff+0x7c>
 8004d18:	1b2b      	subs	r3, r5, r4
 8004d1a:	3b15      	subs	r3, #21
 8004d1c:	f023 0303 	bic.w	r3, r3, #3
 8004d20:	3304      	adds	r3, #4
 8004d22:	3415      	adds	r4, #21
 8004d24:	42a5      	cmp	r5, r4
 8004d26:	bf38      	it	cc
 8004d28:	2304      	movcc	r3, #4
 8004d2a:	4419      	add	r1, r3
 8004d2c:	4473      	add	r3, lr
 8004d2e:	469e      	mov	lr, r3
 8004d30:	460d      	mov	r5, r1
 8004d32:	4565      	cmp	r5, ip
 8004d34:	d30e      	bcc.n	8004d54 <__mdiff+0xe8>
 8004d36:	f10c 0203 	add.w	r2, ip, #3
 8004d3a:	1a52      	subs	r2, r2, r1
 8004d3c:	f022 0203 	bic.w	r2, r2, #3
 8004d40:	3903      	subs	r1, #3
 8004d42:	458c      	cmp	ip, r1
 8004d44:	bf38      	it	cc
 8004d46:	2200      	movcc	r2, #0
 8004d48:	441a      	add	r2, r3
 8004d4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004d4e:	b17b      	cbz	r3, 8004d70 <__mdiff+0x104>
 8004d50:	6106      	str	r6, [r0, #16]
 8004d52:	e7a5      	b.n	8004ca0 <__mdiff+0x34>
 8004d54:	f855 8b04 	ldr.w	r8, [r5], #4
 8004d58:	fa17 f488 	uxtah	r4, r7, r8
 8004d5c:	1422      	asrs	r2, r4, #16
 8004d5e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004d62:	b2a4      	uxth	r4, r4
 8004d64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004d68:	f84e 4b04 	str.w	r4, [lr], #4
 8004d6c:	1417      	asrs	r7, r2, #16
 8004d6e:	e7e0      	b.n	8004d32 <__mdiff+0xc6>
 8004d70:	3e01      	subs	r6, #1
 8004d72:	e7ea      	b.n	8004d4a <__mdiff+0xde>
 8004d74:	08006695 	.word	0x08006695
 8004d78:	08006708 	.word	0x08006708

08004d7c <__d2b>:
 8004d7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d80:	4689      	mov	r9, r1
 8004d82:	2101      	movs	r1, #1
 8004d84:	ec57 6b10 	vmov	r6, r7, d0
 8004d88:	4690      	mov	r8, r2
 8004d8a:	f7ff fcd5 	bl	8004738 <_Balloc>
 8004d8e:	4604      	mov	r4, r0
 8004d90:	b930      	cbnz	r0, 8004da0 <__d2b+0x24>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <__d2b+0xb0>)
 8004d96:	4826      	ldr	r0, [pc, #152]	; (8004e30 <__d2b+0xb4>)
 8004d98:	f240 310a 	movw	r1, #778	; 0x30a
 8004d9c:	f000 ffc4 	bl	8005d28 <__assert_func>
 8004da0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004da4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004da8:	bb35      	cbnz	r5, 8004df8 <__d2b+0x7c>
 8004daa:	2e00      	cmp	r6, #0
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	d028      	beq.n	8004e02 <__d2b+0x86>
 8004db0:	4668      	mov	r0, sp
 8004db2:	9600      	str	r6, [sp, #0]
 8004db4:	f7ff fd8c 	bl	80048d0 <__lo0bits>
 8004db8:	9900      	ldr	r1, [sp, #0]
 8004dba:	b300      	cbz	r0, 8004dfe <__d2b+0x82>
 8004dbc:	9a01      	ldr	r2, [sp, #4]
 8004dbe:	f1c0 0320 	rsb	r3, r0, #32
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	40c2      	lsrs	r2, r0
 8004dca:	6163      	str	r3, [r4, #20]
 8004dcc:	9201      	str	r2, [sp, #4]
 8004dce:	9b01      	ldr	r3, [sp, #4]
 8004dd0:	61a3      	str	r3, [r4, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf14      	ite	ne
 8004dd6:	2202      	movne	r2, #2
 8004dd8:	2201      	moveq	r2, #1
 8004dda:	6122      	str	r2, [r4, #16]
 8004ddc:	b1d5      	cbz	r5, 8004e14 <__d2b+0x98>
 8004dde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004de2:	4405      	add	r5, r0
 8004de4:	f8c9 5000 	str.w	r5, [r9]
 8004de8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004dec:	f8c8 0000 	str.w	r0, [r8]
 8004df0:	4620      	mov	r0, r4
 8004df2:	b003      	add	sp, #12
 8004df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dfc:	e7d5      	b.n	8004daa <__d2b+0x2e>
 8004dfe:	6161      	str	r1, [r4, #20]
 8004e00:	e7e5      	b.n	8004dce <__d2b+0x52>
 8004e02:	a801      	add	r0, sp, #4
 8004e04:	f7ff fd64 	bl	80048d0 <__lo0bits>
 8004e08:	9b01      	ldr	r3, [sp, #4]
 8004e0a:	6163      	str	r3, [r4, #20]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	6122      	str	r2, [r4, #16]
 8004e10:	3020      	adds	r0, #32
 8004e12:	e7e3      	b.n	8004ddc <__d2b+0x60>
 8004e14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e1c:	f8c9 0000 	str.w	r0, [r9]
 8004e20:	6918      	ldr	r0, [r3, #16]
 8004e22:	f7ff fd35 	bl	8004890 <__hi0bits>
 8004e26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004e2a:	e7df      	b.n	8004dec <__d2b+0x70>
 8004e2c:	08006695 	.word	0x08006695
 8004e30:	08006708 	.word	0x08006708

08004e34 <_calloc_r>:
 8004e34:	b513      	push	{r0, r1, r4, lr}
 8004e36:	434a      	muls	r2, r1
 8004e38:	4611      	mov	r1, r2
 8004e3a:	9201      	str	r2, [sp, #4]
 8004e3c:	f7fd fc8e 	bl	800275c <_malloc_r>
 8004e40:	4604      	mov	r4, r0
 8004e42:	b118      	cbz	r0, 8004e4c <_calloc_r+0x18>
 8004e44:	9a01      	ldr	r2, [sp, #4]
 8004e46:	2100      	movs	r1, #0
 8004e48:	f7fd fc30 	bl	80026ac <memset>
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	b002      	add	sp, #8
 8004e50:	bd10      	pop	{r4, pc}

08004e52 <__sfputc_r>:
 8004e52:	6893      	ldr	r3, [r2, #8]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	b410      	push	{r4}
 8004e5a:	6093      	str	r3, [r2, #8]
 8004e5c:	da08      	bge.n	8004e70 <__sfputc_r+0x1e>
 8004e5e:	6994      	ldr	r4, [r2, #24]
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	db01      	blt.n	8004e68 <__sfputc_r+0x16>
 8004e64:	290a      	cmp	r1, #10
 8004e66:	d103      	bne.n	8004e70 <__sfputc_r+0x1e>
 8004e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e6c:	f7fe babe 	b.w	80033ec <__swbuf_r>
 8004e70:	6813      	ldr	r3, [r2, #0]
 8004e72:	1c58      	adds	r0, r3, #1
 8004e74:	6010      	str	r0, [r2, #0]
 8004e76:	7019      	strb	r1, [r3, #0]
 8004e78:	4608      	mov	r0, r1
 8004e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <__sfputs_r>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	4606      	mov	r6, r0
 8004e84:	460f      	mov	r7, r1
 8004e86:	4614      	mov	r4, r2
 8004e88:	18d5      	adds	r5, r2, r3
 8004e8a:	42ac      	cmp	r4, r5
 8004e8c:	d101      	bne.n	8004e92 <__sfputs_r+0x12>
 8004e8e:	2000      	movs	r0, #0
 8004e90:	e007      	b.n	8004ea2 <__sfputs_r+0x22>
 8004e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e96:	463a      	mov	r2, r7
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f7ff ffda 	bl	8004e52 <__sfputc_r>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	d1f3      	bne.n	8004e8a <__sfputs_r+0xa>
 8004ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ea4 <_vfiprintf_r>:
 8004ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea8:	460d      	mov	r5, r1
 8004eaa:	b09d      	sub	sp, #116	; 0x74
 8004eac:	4614      	mov	r4, r2
 8004eae:	4698      	mov	r8, r3
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	b118      	cbz	r0, 8004ebc <_vfiprintf_r+0x18>
 8004eb4:	6983      	ldr	r3, [r0, #24]
 8004eb6:	b90b      	cbnz	r3, 8004ebc <_vfiprintf_r+0x18>
 8004eb8:	f7ff fafe 	bl	80044b8 <__sinit>
 8004ebc:	4b89      	ldr	r3, [pc, #548]	; (80050e4 <_vfiprintf_r+0x240>)
 8004ebe:	429d      	cmp	r5, r3
 8004ec0:	d11b      	bne.n	8004efa <_vfiprintf_r+0x56>
 8004ec2:	6875      	ldr	r5, [r6, #4]
 8004ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ec6:	07d9      	lsls	r1, r3, #31
 8004ec8:	d405      	bmi.n	8004ed6 <_vfiprintf_r+0x32>
 8004eca:	89ab      	ldrh	r3, [r5, #12]
 8004ecc:	059a      	lsls	r2, r3, #22
 8004ece:	d402      	bmi.n	8004ed6 <_vfiprintf_r+0x32>
 8004ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ed2:	f7ff fbb0 	bl	8004636 <__retarget_lock_acquire_recursive>
 8004ed6:	89ab      	ldrh	r3, [r5, #12]
 8004ed8:	071b      	lsls	r3, r3, #28
 8004eda:	d501      	bpl.n	8004ee0 <_vfiprintf_r+0x3c>
 8004edc:	692b      	ldr	r3, [r5, #16]
 8004ede:	b9eb      	cbnz	r3, 8004f1c <_vfiprintf_r+0x78>
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7fe fad4 	bl	8003490 <__swsetup_r>
 8004ee8:	b1c0      	cbz	r0, 8004f1c <_vfiprintf_r+0x78>
 8004eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eec:	07dc      	lsls	r4, r3, #31
 8004eee:	d50e      	bpl.n	8004f0e <_vfiprintf_r+0x6a>
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	b01d      	add	sp, #116	; 0x74
 8004ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efa:	4b7b      	ldr	r3, [pc, #492]	; (80050e8 <_vfiprintf_r+0x244>)
 8004efc:	429d      	cmp	r5, r3
 8004efe:	d101      	bne.n	8004f04 <_vfiprintf_r+0x60>
 8004f00:	68b5      	ldr	r5, [r6, #8]
 8004f02:	e7df      	b.n	8004ec4 <_vfiprintf_r+0x20>
 8004f04:	4b79      	ldr	r3, [pc, #484]	; (80050ec <_vfiprintf_r+0x248>)
 8004f06:	429d      	cmp	r5, r3
 8004f08:	bf08      	it	eq
 8004f0a:	68f5      	ldreq	r5, [r6, #12]
 8004f0c:	e7da      	b.n	8004ec4 <_vfiprintf_r+0x20>
 8004f0e:	89ab      	ldrh	r3, [r5, #12]
 8004f10:	0598      	lsls	r0, r3, #22
 8004f12:	d4ed      	bmi.n	8004ef0 <_vfiprintf_r+0x4c>
 8004f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f16:	f7ff fb8f 	bl	8004638 <__retarget_lock_release_recursive>
 8004f1a:	e7e9      	b.n	8004ef0 <_vfiprintf_r+0x4c>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f20:	2320      	movs	r3, #32
 8004f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f2a:	2330      	movs	r3, #48	; 0x30
 8004f2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050f0 <_vfiprintf_r+0x24c>
 8004f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f34:	f04f 0901 	mov.w	r9, #1
 8004f38:	4623      	mov	r3, r4
 8004f3a:	469a      	mov	sl, r3
 8004f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f40:	b10a      	cbz	r2, 8004f46 <_vfiprintf_r+0xa2>
 8004f42:	2a25      	cmp	r2, #37	; 0x25
 8004f44:	d1f9      	bne.n	8004f3a <_vfiprintf_r+0x96>
 8004f46:	ebba 0b04 	subs.w	fp, sl, r4
 8004f4a:	d00b      	beq.n	8004f64 <_vfiprintf_r+0xc0>
 8004f4c:	465b      	mov	r3, fp
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4629      	mov	r1, r5
 8004f52:	4630      	mov	r0, r6
 8004f54:	f7ff ff94 	bl	8004e80 <__sfputs_r>
 8004f58:	3001      	adds	r0, #1
 8004f5a:	f000 80aa 	beq.w	80050b2 <_vfiprintf_r+0x20e>
 8004f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f60:	445a      	add	r2, fp
 8004f62:	9209      	str	r2, [sp, #36]	; 0x24
 8004f64:	f89a 3000 	ldrb.w	r3, [sl]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80a2 	beq.w	80050b2 <_vfiprintf_r+0x20e>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295
 8004f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f78:	f10a 0a01 	add.w	sl, sl, #1
 8004f7c:	9304      	str	r3, [sp, #16]
 8004f7e:	9307      	str	r3, [sp, #28]
 8004f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f84:	931a      	str	r3, [sp, #104]	; 0x68
 8004f86:	4654      	mov	r4, sl
 8004f88:	2205      	movs	r2, #5
 8004f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f8e:	4858      	ldr	r0, [pc, #352]	; (80050f0 <_vfiprintf_r+0x24c>)
 8004f90:	f7fb f93e 	bl	8000210 <memchr>
 8004f94:	9a04      	ldr	r2, [sp, #16]
 8004f96:	b9d8      	cbnz	r0, 8004fd0 <_vfiprintf_r+0x12c>
 8004f98:	06d1      	lsls	r1, r2, #27
 8004f9a:	bf44      	itt	mi
 8004f9c:	2320      	movmi	r3, #32
 8004f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fa2:	0713      	lsls	r3, r2, #28
 8004fa4:	bf44      	itt	mi
 8004fa6:	232b      	movmi	r3, #43	; 0x2b
 8004fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fac:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb2:	d015      	beq.n	8004fe0 <_vfiprintf_r+0x13c>
 8004fb4:	9a07      	ldr	r2, [sp, #28]
 8004fb6:	4654      	mov	r4, sl
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f04f 0c0a 	mov.w	ip, #10
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fc4:	3b30      	subs	r3, #48	; 0x30
 8004fc6:	2b09      	cmp	r3, #9
 8004fc8:	d94e      	bls.n	8005068 <_vfiprintf_r+0x1c4>
 8004fca:	b1b0      	cbz	r0, 8004ffa <_vfiprintf_r+0x156>
 8004fcc:	9207      	str	r2, [sp, #28]
 8004fce:	e014      	b.n	8004ffa <_vfiprintf_r+0x156>
 8004fd0:	eba0 0308 	sub.w	r3, r0, r8
 8004fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	9304      	str	r3, [sp, #16]
 8004fdc:	46a2      	mov	sl, r4
 8004fde:	e7d2      	b.n	8004f86 <_vfiprintf_r+0xe2>
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	1d19      	adds	r1, r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	9103      	str	r1, [sp, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bfbb      	ittet	lt
 8004fec:	425b      	neglt	r3, r3
 8004fee:	f042 0202 	orrlt.w	r2, r2, #2
 8004ff2:	9307      	strge	r3, [sp, #28]
 8004ff4:	9307      	strlt	r3, [sp, #28]
 8004ff6:	bfb8      	it	lt
 8004ff8:	9204      	strlt	r2, [sp, #16]
 8004ffa:	7823      	ldrb	r3, [r4, #0]
 8004ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8004ffe:	d10c      	bne.n	800501a <_vfiprintf_r+0x176>
 8005000:	7863      	ldrb	r3, [r4, #1]
 8005002:	2b2a      	cmp	r3, #42	; 0x2a
 8005004:	d135      	bne.n	8005072 <_vfiprintf_r+0x1ce>
 8005006:	9b03      	ldr	r3, [sp, #12]
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	9203      	str	r2, [sp, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	bfb8      	it	lt
 8005012:	f04f 33ff 	movlt.w	r3, #4294967295
 8005016:	3402      	adds	r4, #2
 8005018:	9305      	str	r3, [sp, #20]
 800501a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005100 <_vfiprintf_r+0x25c>
 800501e:	7821      	ldrb	r1, [r4, #0]
 8005020:	2203      	movs	r2, #3
 8005022:	4650      	mov	r0, sl
 8005024:	f7fb f8f4 	bl	8000210 <memchr>
 8005028:	b140      	cbz	r0, 800503c <_vfiprintf_r+0x198>
 800502a:	2340      	movs	r3, #64	; 0x40
 800502c:	eba0 000a 	sub.w	r0, r0, sl
 8005030:	fa03 f000 	lsl.w	r0, r3, r0
 8005034:	9b04      	ldr	r3, [sp, #16]
 8005036:	4303      	orrs	r3, r0
 8005038:	3401      	adds	r4, #1
 800503a:	9304      	str	r3, [sp, #16]
 800503c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005040:	482c      	ldr	r0, [pc, #176]	; (80050f4 <_vfiprintf_r+0x250>)
 8005042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005046:	2206      	movs	r2, #6
 8005048:	f7fb f8e2 	bl	8000210 <memchr>
 800504c:	2800      	cmp	r0, #0
 800504e:	d03f      	beq.n	80050d0 <_vfiprintf_r+0x22c>
 8005050:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <_vfiprintf_r+0x254>)
 8005052:	bb1b      	cbnz	r3, 800509c <_vfiprintf_r+0x1f8>
 8005054:	9b03      	ldr	r3, [sp, #12]
 8005056:	3307      	adds	r3, #7
 8005058:	f023 0307 	bic.w	r3, r3, #7
 800505c:	3308      	adds	r3, #8
 800505e:	9303      	str	r3, [sp, #12]
 8005060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005062:	443b      	add	r3, r7
 8005064:	9309      	str	r3, [sp, #36]	; 0x24
 8005066:	e767      	b.n	8004f38 <_vfiprintf_r+0x94>
 8005068:	fb0c 3202 	mla	r2, ip, r2, r3
 800506c:	460c      	mov	r4, r1
 800506e:	2001      	movs	r0, #1
 8005070:	e7a5      	b.n	8004fbe <_vfiprintf_r+0x11a>
 8005072:	2300      	movs	r3, #0
 8005074:	3401      	adds	r4, #1
 8005076:	9305      	str	r3, [sp, #20]
 8005078:	4619      	mov	r1, r3
 800507a:	f04f 0c0a 	mov.w	ip, #10
 800507e:	4620      	mov	r0, r4
 8005080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005084:	3a30      	subs	r2, #48	; 0x30
 8005086:	2a09      	cmp	r2, #9
 8005088:	d903      	bls.n	8005092 <_vfiprintf_r+0x1ee>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0c5      	beq.n	800501a <_vfiprintf_r+0x176>
 800508e:	9105      	str	r1, [sp, #20]
 8005090:	e7c3      	b.n	800501a <_vfiprintf_r+0x176>
 8005092:	fb0c 2101 	mla	r1, ip, r1, r2
 8005096:	4604      	mov	r4, r0
 8005098:	2301      	movs	r3, #1
 800509a:	e7f0      	b.n	800507e <_vfiprintf_r+0x1da>
 800509c:	ab03      	add	r3, sp, #12
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	462a      	mov	r2, r5
 80050a2:	4b16      	ldr	r3, [pc, #88]	; (80050fc <_vfiprintf_r+0x258>)
 80050a4:	a904      	add	r1, sp, #16
 80050a6:	4630      	mov	r0, r6
 80050a8:	f7fd fc52 	bl	8002950 <_printf_float>
 80050ac:	4607      	mov	r7, r0
 80050ae:	1c78      	adds	r0, r7, #1
 80050b0:	d1d6      	bne.n	8005060 <_vfiprintf_r+0x1bc>
 80050b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050b4:	07d9      	lsls	r1, r3, #31
 80050b6:	d405      	bmi.n	80050c4 <_vfiprintf_r+0x220>
 80050b8:	89ab      	ldrh	r3, [r5, #12]
 80050ba:	059a      	lsls	r2, r3, #22
 80050bc:	d402      	bmi.n	80050c4 <_vfiprintf_r+0x220>
 80050be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050c0:	f7ff faba 	bl	8004638 <__retarget_lock_release_recursive>
 80050c4:	89ab      	ldrh	r3, [r5, #12]
 80050c6:	065b      	lsls	r3, r3, #25
 80050c8:	f53f af12 	bmi.w	8004ef0 <_vfiprintf_r+0x4c>
 80050cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ce:	e711      	b.n	8004ef4 <_vfiprintf_r+0x50>
 80050d0:	ab03      	add	r3, sp, #12
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	462a      	mov	r2, r5
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <_vfiprintf_r+0x258>)
 80050d8:	a904      	add	r1, sp, #16
 80050da:	4630      	mov	r0, r6
 80050dc:	f7fd fedc 	bl	8002e98 <_printf_i>
 80050e0:	e7e4      	b.n	80050ac <_vfiprintf_r+0x208>
 80050e2:	bf00      	nop
 80050e4:	080066c8 	.word	0x080066c8
 80050e8:	080066e8 	.word	0x080066e8
 80050ec:	080066a8 	.word	0x080066a8
 80050f0:	08006864 	.word	0x08006864
 80050f4:	0800686e 	.word	0x0800686e
 80050f8:	08002951 	.word	0x08002951
 80050fc:	08004e81 	.word	0x08004e81
 8005100:	0800686a 	.word	0x0800686a

08005104 <__svfiscanf_r>:
 8005104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005108:	461d      	mov	r5, r3
 800510a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800510c:	07df      	lsls	r7, r3, #31
 800510e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005112:	4606      	mov	r6, r0
 8005114:	460c      	mov	r4, r1
 8005116:	4692      	mov	sl, r2
 8005118:	d405      	bmi.n	8005126 <__svfiscanf_r+0x22>
 800511a:	898b      	ldrh	r3, [r1, #12]
 800511c:	0598      	lsls	r0, r3, #22
 800511e:	d402      	bmi.n	8005126 <__svfiscanf_r+0x22>
 8005120:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8005122:	f7ff fa88 	bl	8004636 <__retarget_lock_acquire_recursive>
 8005126:	2300      	movs	r3, #0
 8005128:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800512c:	4bae      	ldr	r3, [pc, #696]	; (80053e8 <__svfiscanf_r+0x2e4>)
 800512e:	93a0      	str	r3, [sp, #640]	; 0x280
 8005130:	f10d 0804 	add.w	r8, sp, #4
 8005134:	4bad      	ldr	r3, [pc, #692]	; (80053ec <__svfiscanf_r+0x2e8>)
 8005136:	4fae      	ldr	r7, [pc, #696]	; (80053f0 <__svfiscanf_r+0x2ec>)
 8005138:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 80053f4 <__svfiscanf_r+0x2f0>
 800513c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005140:	93a1      	str	r3, [sp, #644]	; 0x284
 8005142:	9500      	str	r5, [sp, #0]
 8005144:	f89a b000 	ldrb.w	fp, [sl]
 8005148:	f1bb 0f00 	cmp.w	fp, #0
 800514c:	f000 8170 	beq.w	8005430 <__svfiscanf_r+0x32c>
 8005150:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8005154:	f013 0308 	ands.w	r3, r3, #8
 8005158:	f10a 0501 	add.w	r5, sl, #1
 800515c:	d019      	beq.n	8005192 <__svfiscanf_r+0x8e>
 800515e:	6863      	ldr	r3, [r4, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	dd0f      	ble.n	8005184 <__svfiscanf_r+0x80>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	5cba      	ldrb	r2, [r7, r2]
 800516a:	0711      	lsls	r1, r2, #28
 800516c:	d401      	bmi.n	8005172 <__svfiscanf_r+0x6e>
 800516e:	46aa      	mov	sl, r5
 8005170:	e7e8      	b.n	8005144 <__svfiscanf_r+0x40>
 8005172:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005174:	3201      	adds	r2, #1
 8005176:	9245      	str	r2, [sp, #276]	; 0x114
 8005178:	6862      	ldr	r2, [r4, #4]
 800517a:	3301      	adds	r3, #1
 800517c:	3a01      	subs	r2, #1
 800517e:	6062      	str	r2, [r4, #4]
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	e7ec      	b.n	800515e <__svfiscanf_r+0x5a>
 8005184:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005186:	4621      	mov	r1, r4
 8005188:	4630      	mov	r0, r6
 800518a:	4798      	blx	r3
 800518c:	2800      	cmp	r0, #0
 800518e:	d0e9      	beq.n	8005164 <__svfiscanf_r+0x60>
 8005190:	e7ed      	b.n	800516e <__svfiscanf_r+0x6a>
 8005192:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8005196:	f040 8086 	bne.w	80052a6 <__svfiscanf_r+0x1a2>
 800519a:	9341      	str	r3, [sp, #260]	; 0x104
 800519c:	9343      	str	r3, [sp, #268]	; 0x10c
 800519e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80051a2:	2b2a      	cmp	r3, #42	; 0x2a
 80051a4:	bf02      	ittt	eq
 80051a6:	2310      	moveq	r3, #16
 80051a8:	9341      	streq	r3, [sp, #260]	; 0x104
 80051aa:	f10a 0502 	addeq.w	r5, sl, #2
 80051ae:	220a      	movs	r2, #10
 80051b0:	46aa      	mov	sl, r5
 80051b2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80051b6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80051ba:	2b09      	cmp	r3, #9
 80051bc:	d91e      	bls.n	80051fc <__svfiscanf_r+0xf8>
 80051be:	488d      	ldr	r0, [pc, #564]	; (80053f4 <__svfiscanf_r+0x2f0>)
 80051c0:	2203      	movs	r2, #3
 80051c2:	f7fb f825 	bl	8000210 <memchr>
 80051c6:	b140      	cbz	r0, 80051da <__svfiscanf_r+0xd6>
 80051c8:	2301      	movs	r3, #1
 80051ca:	eba0 0009 	sub.w	r0, r0, r9
 80051ce:	fa03 f000 	lsl.w	r0, r3, r0
 80051d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80051d4:	4318      	orrs	r0, r3
 80051d6:	9041      	str	r0, [sp, #260]	; 0x104
 80051d8:	4655      	mov	r5, sl
 80051da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80051de:	2b78      	cmp	r3, #120	; 0x78
 80051e0:	d807      	bhi.n	80051f2 <__svfiscanf_r+0xee>
 80051e2:	2b57      	cmp	r3, #87	; 0x57
 80051e4:	d811      	bhi.n	800520a <__svfiscanf_r+0x106>
 80051e6:	2b25      	cmp	r3, #37	; 0x25
 80051e8:	d05d      	beq.n	80052a6 <__svfiscanf_r+0x1a2>
 80051ea:	d857      	bhi.n	800529c <__svfiscanf_r+0x198>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80d6 	beq.w	800539e <__svfiscanf_r+0x29a>
 80051f2:	2303      	movs	r3, #3
 80051f4:	9347      	str	r3, [sp, #284]	; 0x11c
 80051f6:	230a      	movs	r3, #10
 80051f8:	9342      	str	r3, [sp, #264]	; 0x108
 80051fa:	e08b      	b.n	8005314 <__svfiscanf_r+0x210>
 80051fc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80051fe:	fb02 1303 	mla	r3, r2, r3, r1
 8005202:	3b30      	subs	r3, #48	; 0x30
 8005204:	9343      	str	r3, [sp, #268]	; 0x10c
 8005206:	4655      	mov	r5, sl
 8005208:	e7d2      	b.n	80051b0 <__svfiscanf_r+0xac>
 800520a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800520e:	2a20      	cmp	r2, #32
 8005210:	d8ef      	bhi.n	80051f2 <__svfiscanf_r+0xee>
 8005212:	a101      	add	r1, pc, #4	; (adr r1, 8005218 <__svfiscanf_r+0x114>)
 8005214:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005218:	080052ff 	.word	0x080052ff
 800521c:	080051f3 	.word	0x080051f3
 8005220:	080051f3 	.word	0x080051f3
 8005224:	0800535d 	.word	0x0800535d
 8005228:	080051f3 	.word	0x080051f3
 800522c:	080051f3 	.word	0x080051f3
 8005230:	080051f3 	.word	0x080051f3
 8005234:	080051f3 	.word	0x080051f3
 8005238:	080051f3 	.word	0x080051f3
 800523c:	080051f3 	.word	0x080051f3
 8005240:	080051f3 	.word	0x080051f3
 8005244:	08005373 	.word	0x08005373
 8005248:	08005349 	.word	0x08005349
 800524c:	080052a3 	.word	0x080052a3
 8005250:	080052a3 	.word	0x080052a3
 8005254:	080052a3 	.word	0x080052a3
 8005258:	080051f3 	.word	0x080051f3
 800525c:	0800534d 	.word	0x0800534d
 8005260:	080051f3 	.word	0x080051f3
 8005264:	080051f3 	.word	0x080051f3
 8005268:	080051f3 	.word	0x080051f3
 800526c:	080051f3 	.word	0x080051f3
 8005270:	08005383 	.word	0x08005383
 8005274:	08005355 	.word	0x08005355
 8005278:	080052f7 	.word	0x080052f7
 800527c:	080051f3 	.word	0x080051f3
 8005280:	080051f3 	.word	0x080051f3
 8005284:	0800537f 	.word	0x0800537f
 8005288:	080051f3 	.word	0x080051f3
 800528c:	08005349 	.word	0x08005349
 8005290:	080051f3 	.word	0x080051f3
 8005294:	080051f3 	.word	0x080051f3
 8005298:	080052ff 	.word	0x080052ff
 800529c:	3b45      	subs	r3, #69	; 0x45
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d8a7      	bhi.n	80051f2 <__svfiscanf_r+0xee>
 80052a2:	2305      	movs	r3, #5
 80052a4:	e035      	b.n	8005312 <__svfiscanf_r+0x20e>
 80052a6:	6863      	ldr	r3, [r4, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dd0d      	ble.n	80052c8 <__svfiscanf_r+0x1c4>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	781a      	ldrb	r2, [r3, #0]
 80052b0:	455a      	cmp	r2, fp
 80052b2:	f040 80bd 	bne.w	8005430 <__svfiscanf_r+0x32c>
 80052b6:	3301      	adds	r3, #1
 80052b8:	6862      	ldr	r2, [r4, #4]
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80052be:	3a01      	subs	r2, #1
 80052c0:	3301      	adds	r3, #1
 80052c2:	6062      	str	r2, [r4, #4]
 80052c4:	9345      	str	r3, [sp, #276]	; 0x114
 80052c6:	e752      	b.n	800516e <__svfiscanf_r+0x6a>
 80052c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052ca:	4621      	mov	r1, r4
 80052cc:	4630      	mov	r0, r6
 80052ce:	4798      	blx	r3
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d0eb      	beq.n	80052ac <__svfiscanf_r+0x1a8>
 80052d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052d6:	07da      	lsls	r2, r3, #31
 80052d8:	f140 80a2 	bpl.w	8005420 <__svfiscanf_r+0x31c>
 80052dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80052de:	2800      	cmp	r0, #0
 80052e0:	d066      	beq.n	80053b0 <__svfiscanf_r+0x2ac>
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052e8:	bf18      	it	ne
 80052ea:	f04f 30ff 	movne.w	r0, #4294967295
 80052ee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80052f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80052f8:	f042 0220 	orr.w	r2, r2, #32
 80052fc:	9241      	str	r2, [sp, #260]	; 0x104
 80052fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005304:	9241      	str	r2, [sp, #260]	; 0x104
 8005306:	2210      	movs	r2, #16
 8005308:	2b6f      	cmp	r3, #111	; 0x6f
 800530a:	9242      	str	r2, [sp, #264]	; 0x108
 800530c:	bf34      	ite	cc
 800530e:	2303      	movcc	r3, #3
 8005310:	2304      	movcs	r3, #4
 8005312:	9347      	str	r3, [sp, #284]	; 0x11c
 8005314:	6863      	ldr	r3, [r4, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	dd4d      	ble.n	80053b6 <__svfiscanf_r+0x2b2>
 800531a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800531c:	065b      	lsls	r3, r3, #25
 800531e:	d404      	bmi.n	800532a <__svfiscanf_r+0x226>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	5cba      	ldrb	r2, [r7, r2]
 8005326:	0710      	lsls	r0, r2, #28
 8005328:	d44c      	bmi.n	80053c4 <__svfiscanf_r+0x2c0>
 800532a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800532c:	2b02      	cmp	r3, #2
 800532e:	dc63      	bgt.n	80053f8 <__svfiscanf_r+0x2f4>
 8005330:	466b      	mov	r3, sp
 8005332:	4622      	mov	r2, r4
 8005334:	a941      	add	r1, sp, #260	; 0x104
 8005336:	4630      	mov	r0, r6
 8005338:	f000 f8b0 	bl	800549c <_scanf_chars>
 800533c:	2801      	cmp	r0, #1
 800533e:	d077      	beq.n	8005430 <__svfiscanf_r+0x32c>
 8005340:	2802      	cmp	r0, #2
 8005342:	f47f af14 	bne.w	800516e <__svfiscanf_r+0x6a>
 8005346:	e7c5      	b.n	80052d4 <__svfiscanf_r+0x1d0>
 8005348:	220a      	movs	r2, #10
 800534a:	e7dd      	b.n	8005308 <__svfiscanf_r+0x204>
 800534c:	2300      	movs	r3, #0
 800534e:	9342      	str	r3, [sp, #264]	; 0x108
 8005350:	2303      	movs	r3, #3
 8005352:	e7de      	b.n	8005312 <__svfiscanf_r+0x20e>
 8005354:	2308      	movs	r3, #8
 8005356:	9342      	str	r3, [sp, #264]	; 0x108
 8005358:	2304      	movs	r3, #4
 800535a:	e7da      	b.n	8005312 <__svfiscanf_r+0x20e>
 800535c:	4629      	mov	r1, r5
 800535e:	4640      	mov	r0, r8
 8005360:	f000 fa7c 	bl	800585c <__sccl>
 8005364:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800536a:	9341      	str	r3, [sp, #260]	; 0x104
 800536c:	4605      	mov	r5, r0
 800536e:	2301      	movs	r3, #1
 8005370:	e7cf      	b.n	8005312 <__svfiscanf_r+0x20e>
 8005372:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005378:	9341      	str	r3, [sp, #260]	; 0x104
 800537a:	2300      	movs	r3, #0
 800537c:	e7c9      	b.n	8005312 <__svfiscanf_r+0x20e>
 800537e:	2302      	movs	r3, #2
 8005380:	e7c7      	b.n	8005312 <__svfiscanf_r+0x20e>
 8005382:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005384:	06c3      	lsls	r3, r0, #27
 8005386:	f53f aef2 	bmi.w	800516e <__svfiscanf_r+0x6a>
 800538a:	9b00      	ldr	r3, [sp, #0]
 800538c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800538e:	1d19      	adds	r1, r3, #4
 8005390:	9100      	str	r1, [sp, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	07c0      	lsls	r0, r0, #31
 8005396:	bf4c      	ite	mi
 8005398:	801a      	strhmi	r2, [r3, #0]
 800539a:	601a      	strpl	r2, [r3, #0]
 800539c:	e6e7      	b.n	800516e <__svfiscanf_r+0x6a>
 800539e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053a0:	07d8      	lsls	r0, r3, #31
 80053a2:	d405      	bmi.n	80053b0 <__svfiscanf_r+0x2ac>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	0599      	lsls	r1, r3, #22
 80053a8:	d402      	bmi.n	80053b0 <__svfiscanf_r+0x2ac>
 80053aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ac:	f7ff f944 	bl	8004638 <__retarget_lock_release_recursive>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	e79b      	b.n	80052ee <__svfiscanf_r+0x1ea>
 80053b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80053b8:	4621      	mov	r1, r4
 80053ba:	4630      	mov	r0, r6
 80053bc:	4798      	blx	r3
 80053be:	2800      	cmp	r0, #0
 80053c0:	d0ab      	beq.n	800531a <__svfiscanf_r+0x216>
 80053c2:	e787      	b.n	80052d4 <__svfiscanf_r+0x1d0>
 80053c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80053c6:	3201      	adds	r2, #1
 80053c8:	9245      	str	r2, [sp, #276]	; 0x114
 80053ca:	6862      	ldr	r2, [r4, #4]
 80053cc:	3a01      	subs	r2, #1
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	6062      	str	r2, [r4, #4]
 80053d2:	dd02      	ble.n	80053da <__svfiscanf_r+0x2d6>
 80053d4:	3301      	adds	r3, #1
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	e7a2      	b.n	8005320 <__svfiscanf_r+0x21c>
 80053da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80053dc:	4621      	mov	r1, r4
 80053de:	4630      	mov	r0, r6
 80053e0:	4798      	blx	r3
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d09c      	beq.n	8005320 <__svfiscanf_r+0x21c>
 80053e6:	e775      	b.n	80052d4 <__svfiscanf_r+0x1d0>
 80053e8:	08005bd5 	.word	0x08005bd5
 80053ec:	08005749 	.word	0x08005749
 80053f0:	080068cd 	.word	0x080068cd
 80053f4:	0800686a 	.word	0x0800686a
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	dc06      	bgt.n	800540a <__svfiscanf_r+0x306>
 80053fc:	466b      	mov	r3, sp
 80053fe:	4622      	mov	r2, r4
 8005400:	a941      	add	r1, sp, #260	; 0x104
 8005402:	4630      	mov	r0, r6
 8005404:	f000 f8a2 	bl	800554c <_scanf_i>
 8005408:	e798      	b.n	800533c <__svfiscanf_r+0x238>
 800540a:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <__svfiscanf_r+0x344>)
 800540c:	2b00      	cmp	r3, #0
 800540e:	f43f aeae 	beq.w	800516e <__svfiscanf_r+0x6a>
 8005412:	466b      	mov	r3, sp
 8005414:	4622      	mov	r2, r4
 8005416:	a941      	add	r1, sp, #260	; 0x104
 8005418:	4630      	mov	r0, r6
 800541a:	f3af 8000 	nop.w
 800541e:	e78d      	b.n	800533c <__svfiscanf_r+0x238>
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	0599      	lsls	r1, r3, #22
 8005424:	f53f af5a 	bmi.w	80052dc <__svfiscanf_r+0x1d8>
 8005428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800542a:	f7ff f905 	bl	8004638 <__retarget_lock_release_recursive>
 800542e:	e755      	b.n	80052dc <__svfiscanf_r+0x1d8>
 8005430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005432:	07da      	lsls	r2, r3, #31
 8005434:	d405      	bmi.n	8005442 <__svfiscanf_r+0x33e>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	059b      	lsls	r3, r3, #22
 800543a:	d402      	bmi.n	8005442 <__svfiscanf_r+0x33e>
 800543c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800543e:	f7ff f8fb 	bl	8004638 <__retarget_lock_release_recursive>
 8005442:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005444:	e753      	b.n	80052ee <__svfiscanf_r+0x1ea>
 8005446:	bf00      	nop
 8005448:	00000000 	.word	0x00000000

0800544c <_vfiscanf_r>:
 800544c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800544e:	460c      	mov	r4, r1
 8005450:	4605      	mov	r5, r0
 8005452:	b138      	cbz	r0, 8005464 <_vfiscanf_r+0x18>
 8005454:	6981      	ldr	r1, [r0, #24]
 8005456:	b929      	cbnz	r1, 8005464 <_vfiscanf_r+0x18>
 8005458:	e9cd 2300 	strd	r2, r3, [sp]
 800545c:	f7ff f82c 	bl	80044b8 <__sinit>
 8005460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005464:	490a      	ldr	r1, [pc, #40]	; (8005490 <_vfiscanf_r+0x44>)
 8005466:	428c      	cmp	r4, r1
 8005468:	d107      	bne.n	800547a <_vfiscanf_r+0x2e>
 800546a:	686c      	ldr	r4, [r5, #4]
 800546c:	4621      	mov	r1, r4
 800546e:	4628      	mov	r0, r5
 8005470:	b003      	add	sp, #12
 8005472:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005476:	f7ff be45 	b.w	8005104 <__svfiscanf_r>
 800547a:	4906      	ldr	r1, [pc, #24]	; (8005494 <_vfiscanf_r+0x48>)
 800547c:	428c      	cmp	r4, r1
 800547e:	d101      	bne.n	8005484 <_vfiscanf_r+0x38>
 8005480:	68ac      	ldr	r4, [r5, #8]
 8005482:	e7f3      	b.n	800546c <_vfiscanf_r+0x20>
 8005484:	4904      	ldr	r1, [pc, #16]	; (8005498 <_vfiscanf_r+0x4c>)
 8005486:	428c      	cmp	r4, r1
 8005488:	bf08      	it	eq
 800548a:	68ec      	ldreq	r4, [r5, #12]
 800548c:	e7ee      	b.n	800546c <_vfiscanf_r+0x20>
 800548e:	bf00      	nop
 8005490:	080066c8 	.word	0x080066c8
 8005494:	080066e8 	.word	0x080066e8
 8005498:	080066a8 	.word	0x080066a8

0800549c <_scanf_chars>:
 800549c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a0:	4615      	mov	r5, r2
 80054a2:	688a      	ldr	r2, [r1, #8]
 80054a4:	4680      	mov	r8, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	b932      	cbnz	r2, 80054b8 <_scanf_chars+0x1c>
 80054aa:	698a      	ldr	r2, [r1, #24]
 80054ac:	2a00      	cmp	r2, #0
 80054ae:	bf0c      	ite	eq
 80054b0:	2201      	moveq	r2, #1
 80054b2:	f04f 32ff 	movne.w	r2, #4294967295
 80054b6:	608a      	str	r2, [r1, #8]
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005548 <_scanf_chars+0xac>
 80054be:	06d1      	lsls	r1, r2, #27
 80054c0:	bf5f      	itttt	pl
 80054c2:	681a      	ldrpl	r2, [r3, #0]
 80054c4:	1d11      	addpl	r1, r2, #4
 80054c6:	6019      	strpl	r1, [r3, #0]
 80054c8:	6816      	ldrpl	r6, [r2, #0]
 80054ca:	2700      	movs	r7, #0
 80054cc:	69a0      	ldr	r0, [r4, #24]
 80054ce:	b188      	cbz	r0, 80054f4 <_scanf_chars+0x58>
 80054d0:	2801      	cmp	r0, #1
 80054d2:	d107      	bne.n	80054e4 <_scanf_chars+0x48>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	781a      	ldrb	r2, [r3, #0]
 80054d8:	6963      	ldr	r3, [r4, #20]
 80054da:	5c9b      	ldrb	r3, [r3, r2]
 80054dc:	b953      	cbnz	r3, 80054f4 <_scanf_chars+0x58>
 80054de:	bb27      	cbnz	r7, 800552a <_scanf_chars+0x8e>
 80054e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054e4:	2802      	cmp	r0, #2
 80054e6:	d120      	bne.n	800552a <_scanf_chars+0x8e>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	f813 3009 	ldrb.w	r3, [r3, r9]
 80054f0:	071b      	lsls	r3, r3, #28
 80054f2:	d41a      	bmi.n	800552a <_scanf_chars+0x8e>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	06da      	lsls	r2, r3, #27
 80054f8:	bf5e      	ittt	pl
 80054fa:	682b      	ldrpl	r3, [r5, #0]
 80054fc:	781b      	ldrbpl	r3, [r3, #0]
 80054fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005502:	682a      	ldr	r2, [r5, #0]
 8005504:	686b      	ldr	r3, [r5, #4]
 8005506:	3201      	adds	r2, #1
 8005508:	602a      	str	r2, [r5, #0]
 800550a:	68a2      	ldr	r2, [r4, #8]
 800550c:	3b01      	subs	r3, #1
 800550e:	3a01      	subs	r2, #1
 8005510:	606b      	str	r3, [r5, #4]
 8005512:	3701      	adds	r7, #1
 8005514:	60a2      	str	r2, [r4, #8]
 8005516:	b142      	cbz	r2, 800552a <_scanf_chars+0x8e>
 8005518:	2b00      	cmp	r3, #0
 800551a:	dcd7      	bgt.n	80054cc <_scanf_chars+0x30>
 800551c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005520:	4629      	mov	r1, r5
 8005522:	4640      	mov	r0, r8
 8005524:	4798      	blx	r3
 8005526:	2800      	cmp	r0, #0
 8005528:	d0d0      	beq.n	80054cc <_scanf_chars+0x30>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	f013 0310 	ands.w	r3, r3, #16
 8005530:	d105      	bne.n	800553e <_scanf_chars+0xa2>
 8005532:	68e2      	ldr	r2, [r4, #12]
 8005534:	3201      	adds	r2, #1
 8005536:	60e2      	str	r2, [r4, #12]
 8005538:	69a2      	ldr	r2, [r4, #24]
 800553a:	b102      	cbz	r2, 800553e <_scanf_chars+0xa2>
 800553c:	7033      	strb	r3, [r6, #0]
 800553e:	6923      	ldr	r3, [r4, #16]
 8005540:	441f      	add	r7, r3
 8005542:	6127      	str	r7, [r4, #16]
 8005544:	2000      	movs	r0, #0
 8005546:	e7cb      	b.n	80054e0 <_scanf_chars+0x44>
 8005548:	080068cd 	.word	0x080068cd

0800554c <_scanf_i>:
 800554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	4698      	mov	r8, r3
 8005552:	4b74      	ldr	r3, [pc, #464]	; (8005724 <_scanf_i+0x1d8>)
 8005554:	460c      	mov	r4, r1
 8005556:	4682      	mov	sl, r0
 8005558:	4616      	mov	r6, r2
 800555a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800555e:	b087      	sub	sp, #28
 8005560:	ab03      	add	r3, sp, #12
 8005562:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005566:	4b70      	ldr	r3, [pc, #448]	; (8005728 <_scanf_i+0x1dc>)
 8005568:	69a1      	ldr	r1, [r4, #24]
 800556a:	4a70      	ldr	r2, [pc, #448]	; (800572c <_scanf_i+0x1e0>)
 800556c:	2903      	cmp	r1, #3
 800556e:	bf18      	it	ne
 8005570:	461a      	movne	r2, r3
 8005572:	68a3      	ldr	r3, [r4, #8]
 8005574:	9201      	str	r2, [sp, #4]
 8005576:	1e5a      	subs	r2, r3, #1
 8005578:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800557c:	bf88      	it	hi
 800557e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005582:	4627      	mov	r7, r4
 8005584:	bf82      	ittt	hi
 8005586:	eb03 0905 	addhi.w	r9, r3, r5
 800558a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800558e:	60a3      	strhi	r3, [r4, #8]
 8005590:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005594:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005598:	bf98      	it	ls
 800559a:	f04f 0900 	movls.w	r9, #0
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	463d      	mov	r5, r7
 80055a2:	f04f 0b00 	mov.w	fp, #0
 80055a6:	6831      	ldr	r1, [r6, #0]
 80055a8:	ab03      	add	r3, sp, #12
 80055aa:	7809      	ldrb	r1, [r1, #0]
 80055ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80055b0:	2202      	movs	r2, #2
 80055b2:	f7fa fe2d 	bl	8000210 <memchr>
 80055b6:	b328      	cbz	r0, 8005604 <_scanf_i+0xb8>
 80055b8:	f1bb 0f01 	cmp.w	fp, #1
 80055bc:	d159      	bne.n	8005672 <_scanf_i+0x126>
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	b92a      	cbnz	r2, 80055ce <_scanf_i+0x82>
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	2308      	movs	r3, #8
 80055c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ca:	6063      	str	r3, [r4, #4]
 80055cc:	6022      	str	r2, [r4, #0]
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80055d4:	6022      	str	r2, [r4, #0]
 80055d6:	68a2      	ldr	r2, [r4, #8]
 80055d8:	1e51      	subs	r1, r2, #1
 80055da:	60a1      	str	r1, [r4, #8]
 80055dc:	b192      	cbz	r2, 8005604 <_scanf_i+0xb8>
 80055de:	6832      	ldr	r2, [r6, #0]
 80055e0:	1c51      	adds	r1, r2, #1
 80055e2:	6031      	str	r1, [r6, #0]
 80055e4:	7812      	ldrb	r2, [r2, #0]
 80055e6:	f805 2b01 	strb.w	r2, [r5], #1
 80055ea:	6872      	ldr	r2, [r6, #4]
 80055ec:	3a01      	subs	r2, #1
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	6072      	str	r2, [r6, #4]
 80055f2:	dc07      	bgt.n	8005604 <_scanf_i+0xb8>
 80055f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80055f8:	4631      	mov	r1, r6
 80055fa:	4650      	mov	r0, sl
 80055fc:	4790      	blx	r2
 80055fe:	2800      	cmp	r0, #0
 8005600:	f040 8085 	bne.w	800570e <_scanf_i+0x1c2>
 8005604:	f10b 0b01 	add.w	fp, fp, #1
 8005608:	f1bb 0f03 	cmp.w	fp, #3
 800560c:	d1cb      	bne.n	80055a6 <_scanf_i+0x5a>
 800560e:	6863      	ldr	r3, [r4, #4]
 8005610:	b90b      	cbnz	r3, 8005616 <_scanf_i+0xca>
 8005612:	230a      	movs	r3, #10
 8005614:	6063      	str	r3, [r4, #4]
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	4945      	ldr	r1, [pc, #276]	; (8005730 <_scanf_i+0x1e4>)
 800561a:	6960      	ldr	r0, [r4, #20]
 800561c:	1ac9      	subs	r1, r1, r3
 800561e:	f000 f91d 	bl	800585c <__sccl>
 8005622:	f04f 0b00 	mov.w	fp, #0
 8005626:	68a3      	ldr	r3, [r4, #8]
 8005628:	6822      	ldr	r2, [r4, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d03d      	beq.n	80056aa <_scanf_i+0x15e>
 800562e:	6831      	ldr	r1, [r6, #0]
 8005630:	6960      	ldr	r0, [r4, #20]
 8005632:	f891 c000 	ldrb.w	ip, [r1]
 8005636:	f810 000c 	ldrb.w	r0, [r0, ip]
 800563a:	2800      	cmp	r0, #0
 800563c:	d035      	beq.n	80056aa <_scanf_i+0x15e>
 800563e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005642:	d124      	bne.n	800568e <_scanf_i+0x142>
 8005644:	0510      	lsls	r0, r2, #20
 8005646:	d522      	bpl.n	800568e <_scanf_i+0x142>
 8005648:	f10b 0b01 	add.w	fp, fp, #1
 800564c:	f1b9 0f00 	cmp.w	r9, #0
 8005650:	d003      	beq.n	800565a <_scanf_i+0x10e>
 8005652:	3301      	adds	r3, #1
 8005654:	f109 39ff 	add.w	r9, r9, #4294967295
 8005658:	60a3      	str	r3, [r4, #8]
 800565a:	6873      	ldr	r3, [r6, #4]
 800565c:	3b01      	subs	r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	6073      	str	r3, [r6, #4]
 8005662:	dd1b      	ble.n	800569c <_scanf_i+0x150>
 8005664:	6833      	ldr	r3, [r6, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	6033      	str	r3, [r6, #0]
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	3b01      	subs	r3, #1
 800566e:	60a3      	str	r3, [r4, #8]
 8005670:	e7d9      	b.n	8005626 <_scanf_i+0xda>
 8005672:	f1bb 0f02 	cmp.w	fp, #2
 8005676:	d1ae      	bne.n	80055d6 <_scanf_i+0x8a>
 8005678:	6822      	ldr	r2, [r4, #0]
 800567a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800567e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005682:	d1bf      	bne.n	8005604 <_scanf_i+0xb8>
 8005684:	2310      	movs	r3, #16
 8005686:	6063      	str	r3, [r4, #4]
 8005688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568c:	e7a2      	b.n	80055d4 <_scanf_i+0x88>
 800568e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005692:	6022      	str	r2, [r4, #0]
 8005694:	780b      	ldrb	r3, [r1, #0]
 8005696:	f805 3b01 	strb.w	r3, [r5], #1
 800569a:	e7de      	b.n	800565a <_scanf_i+0x10e>
 800569c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056a0:	4631      	mov	r1, r6
 80056a2:	4650      	mov	r0, sl
 80056a4:	4798      	blx	r3
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d0df      	beq.n	800566a <_scanf_i+0x11e>
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	05d9      	lsls	r1, r3, #23
 80056ae:	d50d      	bpl.n	80056cc <_scanf_i+0x180>
 80056b0:	42bd      	cmp	r5, r7
 80056b2:	d909      	bls.n	80056c8 <_scanf_i+0x17c>
 80056b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80056b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056bc:	4632      	mov	r2, r6
 80056be:	4650      	mov	r0, sl
 80056c0:	4798      	blx	r3
 80056c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80056c6:	464d      	mov	r5, r9
 80056c8:	42bd      	cmp	r5, r7
 80056ca:	d028      	beq.n	800571e <_scanf_i+0x1d2>
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	f012 0210 	ands.w	r2, r2, #16
 80056d2:	d113      	bne.n	80056fc <_scanf_i+0x1b0>
 80056d4:	702a      	strb	r2, [r5, #0]
 80056d6:	6863      	ldr	r3, [r4, #4]
 80056d8:	9e01      	ldr	r6, [sp, #4]
 80056da:	4639      	mov	r1, r7
 80056dc:	4650      	mov	r0, sl
 80056de:	47b0      	blx	r6
 80056e0:	f8d8 3000 	ldr.w	r3, [r8]
 80056e4:	6821      	ldr	r1, [r4, #0]
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	f8c8 2000 	str.w	r2, [r8]
 80056ec:	f011 0f20 	tst.w	r1, #32
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	d00f      	beq.n	8005714 <_scanf_i+0x1c8>
 80056f4:	6018      	str	r0, [r3, #0]
 80056f6:	68e3      	ldr	r3, [r4, #12]
 80056f8:	3301      	adds	r3, #1
 80056fa:	60e3      	str	r3, [r4, #12]
 80056fc:	1bed      	subs	r5, r5, r7
 80056fe:	44ab      	add	fp, r5
 8005700:	6925      	ldr	r5, [r4, #16]
 8005702:	445d      	add	r5, fp
 8005704:	6125      	str	r5, [r4, #16]
 8005706:	2000      	movs	r0, #0
 8005708:	b007      	add	sp, #28
 800570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570e:	f04f 0b00 	mov.w	fp, #0
 8005712:	e7ca      	b.n	80056aa <_scanf_i+0x15e>
 8005714:	07ca      	lsls	r2, r1, #31
 8005716:	bf4c      	ite	mi
 8005718:	8018      	strhmi	r0, [r3, #0]
 800571a:	6018      	strpl	r0, [r3, #0]
 800571c:	e7eb      	b.n	80056f6 <_scanf_i+0x1aa>
 800571e:	2001      	movs	r0, #1
 8005720:	e7f2      	b.n	8005708 <_scanf_i+0x1bc>
 8005722:	bf00      	nop
 8005724:	08005f80 	.word	0x08005f80
 8005728:	08005b5d 	.word	0x08005b5d
 800572c:	08005a61 	.word	0x08005a61
 8005730:	0800688e 	.word	0x0800688e

08005734 <lflush>:
 8005734:	8983      	ldrh	r3, [r0, #12]
 8005736:	f003 0309 	and.w	r3, r3, #9
 800573a:	2b09      	cmp	r3, #9
 800573c:	d101      	bne.n	8005742 <lflush+0xe>
 800573e:	f7fe be51 	b.w	80043e4 <fflush>
 8005742:	2000      	movs	r0, #0
 8005744:	4770      	bx	lr
	...

08005748 <__srefill_r>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	460c      	mov	r4, r1
 800574c:	4605      	mov	r5, r0
 800574e:	b118      	cbz	r0, 8005758 <__srefill_r+0x10>
 8005750:	6983      	ldr	r3, [r0, #24]
 8005752:	b90b      	cbnz	r3, 8005758 <__srefill_r+0x10>
 8005754:	f7fe feb0 	bl	80044b8 <__sinit>
 8005758:	4b3b      	ldr	r3, [pc, #236]	; (8005848 <__srefill_r+0x100>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d10a      	bne.n	8005774 <__srefill_r+0x2c>
 800575e:	686c      	ldr	r4, [r5, #4]
 8005760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005764:	2300      	movs	r3, #0
 8005766:	6063      	str	r3, [r4, #4]
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	069e      	lsls	r6, r3, #26
 800576c:	d50c      	bpl.n	8005788 <__srefill_r+0x40>
 800576e:	f04f 30ff 	mov.w	r0, #4294967295
 8005772:	e066      	b.n	8005842 <__srefill_r+0xfa>
 8005774:	4b35      	ldr	r3, [pc, #212]	; (800584c <__srefill_r+0x104>)
 8005776:	429c      	cmp	r4, r3
 8005778:	d101      	bne.n	800577e <__srefill_r+0x36>
 800577a:	68ac      	ldr	r4, [r5, #8]
 800577c:	e7f0      	b.n	8005760 <__srefill_r+0x18>
 800577e:	4b34      	ldr	r3, [pc, #208]	; (8005850 <__srefill_r+0x108>)
 8005780:	429c      	cmp	r4, r3
 8005782:	bf08      	it	eq
 8005784:	68ec      	ldreq	r4, [r5, #12]
 8005786:	e7eb      	b.n	8005760 <__srefill_r+0x18>
 8005788:	0758      	lsls	r0, r3, #29
 800578a:	d448      	bmi.n	800581e <__srefill_r+0xd6>
 800578c:	06d9      	lsls	r1, r3, #27
 800578e:	d405      	bmi.n	800579c <__srefill_r+0x54>
 8005790:	2309      	movs	r3, #9
 8005792:	602b      	str	r3, [r5, #0]
 8005794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	e7e8      	b.n	800576e <__srefill_r+0x26>
 800579c:	071a      	lsls	r2, r3, #28
 800579e:	d50b      	bpl.n	80057b8 <__srefill_r+0x70>
 80057a0:	4621      	mov	r1, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7fe fde2 	bl	800436c <_fflush_r>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d1e0      	bne.n	800576e <__srefill_r+0x26>
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	60a0      	str	r0, [r4, #8]
 80057b0:	f023 0308 	bic.w	r3, r3, #8
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	61a0      	str	r0, [r4, #24]
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	f043 0304 	orr.w	r3, r3, #4
 80057be:	81a3      	strh	r3, [r4, #12]
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	b91b      	cbnz	r3, 80057cc <__srefill_r+0x84>
 80057c4:	4621      	mov	r1, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	f7fe ff5c 	bl	8004684 <__smakebuf_r>
 80057cc:	89a6      	ldrh	r6, [r4, #12]
 80057ce:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80057d2:	07b3      	lsls	r3, r6, #30
 80057d4:	d00f      	beq.n	80057f6 <__srefill_r+0xae>
 80057d6:	2301      	movs	r3, #1
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <__srefill_r+0x10c>)
 80057dc:	491e      	ldr	r1, [pc, #120]	; (8005858 <__srefill_r+0x110>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	f006 0609 	and.w	r6, r6, #9
 80057e4:	f7fe fee6 	bl	80045b4 <_fwalk>
 80057e8:	2e09      	cmp	r6, #9
 80057ea:	81a7      	strh	r7, [r4, #12]
 80057ec:	d103      	bne.n	80057f6 <__srefill_r+0xae>
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	f7fe fd35 	bl	8004260 <__sflush_r>
 80057f6:	6922      	ldr	r2, [r4, #16]
 80057f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057fa:	6963      	ldr	r3, [r4, #20]
 80057fc:	6a21      	ldr	r1, [r4, #32]
 80057fe:	6022      	str	r2, [r4, #0]
 8005800:	4628      	mov	r0, r5
 8005802:	47b0      	blx	r6
 8005804:	2800      	cmp	r0, #0
 8005806:	6060      	str	r0, [r4, #4]
 8005808:	dc1c      	bgt.n	8005844 <__srefill_r+0xfc>
 800580a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800580e:	bf17      	itett	ne
 8005810:	2200      	movne	r2, #0
 8005812:	f043 0320 	orreq.w	r3, r3, #32
 8005816:	6062      	strne	r2, [r4, #4]
 8005818:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800581c:	e7bc      	b.n	8005798 <__srefill_r+0x50>
 800581e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005820:	2900      	cmp	r1, #0
 8005822:	d0cd      	beq.n	80057c0 <__srefill_r+0x78>
 8005824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005828:	4299      	cmp	r1, r3
 800582a:	d002      	beq.n	8005832 <__srefill_r+0xea>
 800582c:	4628      	mov	r0, r5
 800582e:	f7fc ff45 	bl	80026bc <_free_r>
 8005832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005834:	6063      	str	r3, [r4, #4]
 8005836:	2000      	movs	r0, #0
 8005838:	6360      	str	r0, [r4, #52]	; 0x34
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0c0      	beq.n	80057c0 <__srefill_r+0x78>
 800583e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005844:	2000      	movs	r0, #0
 8005846:	e7fc      	b.n	8005842 <__srefill_r+0xfa>
 8005848:	080066c8 	.word	0x080066c8
 800584c:	080066e8 	.word	0x080066e8
 8005850:	080066a8 	.word	0x080066a8
 8005854:	080065dc 	.word	0x080065dc
 8005858:	08005735 	.word	0x08005735

0800585c <__sccl>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	780b      	ldrb	r3, [r1, #0]
 8005860:	4604      	mov	r4, r0
 8005862:	2b5e      	cmp	r3, #94	; 0x5e
 8005864:	bf0b      	itete	eq
 8005866:	784b      	ldrbeq	r3, [r1, #1]
 8005868:	1c48      	addne	r0, r1, #1
 800586a:	1c88      	addeq	r0, r1, #2
 800586c:	2200      	movne	r2, #0
 800586e:	bf08      	it	eq
 8005870:	2201      	moveq	r2, #1
 8005872:	1e61      	subs	r1, r4, #1
 8005874:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005878:	f801 2f01 	strb.w	r2, [r1, #1]!
 800587c:	42a9      	cmp	r1, r5
 800587e:	d1fb      	bne.n	8005878 <__sccl+0x1c>
 8005880:	b90b      	cbnz	r3, 8005886 <__sccl+0x2a>
 8005882:	3801      	subs	r0, #1
 8005884:	bd70      	pop	{r4, r5, r6, pc}
 8005886:	f082 0101 	eor.w	r1, r2, #1
 800588a:	54e1      	strb	r1, [r4, r3]
 800588c:	1c42      	adds	r2, r0, #1
 800588e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8005892:	2d2d      	cmp	r5, #45	; 0x2d
 8005894:	f102 36ff 	add.w	r6, r2, #4294967295
 8005898:	4610      	mov	r0, r2
 800589a:	d006      	beq.n	80058aa <__sccl+0x4e>
 800589c:	2d5d      	cmp	r5, #93	; 0x5d
 800589e:	d0f1      	beq.n	8005884 <__sccl+0x28>
 80058a0:	b90d      	cbnz	r5, 80058a6 <__sccl+0x4a>
 80058a2:	4630      	mov	r0, r6
 80058a4:	e7ee      	b.n	8005884 <__sccl+0x28>
 80058a6:	462b      	mov	r3, r5
 80058a8:	e7ef      	b.n	800588a <__sccl+0x2e>
 80058aa:	7816      	ldrb	r6, [r2, #0]
 80058ac:	2e5d      	cmp	r6, #93	; 0x5d
 80058ae:	d0fa      	beq.n	80058a6 <__sccl+0x4a>
 80058b0:	42b3      	cmp	r3, r6
 80058b2:	dcf8      	bgt.n	80058a6 <__sccl+0x4a>
 80058b4:	4618      	mov	r0, r3
 80058b6:	3001      	adds	r0, #1
 80058b8:	4286      	cmp	r6, r0
 80058ba:	5421      	strb	r1, [r4, r0]
 80058bc:	dcfb      	bgt.n	80058b6 <__sccl+0x5a>
 80058be:	43d8      	mvns	r0, r3
 80058c0:	4430      	add	r0, r6
 80058c2:	1c5d      	adds	r5, r3, #1
 80058c4:	42b3      	cmp	r3, r6
 80058c6:	bfa8      	it	ge
 80058c8:	2000      	movge	r0, #0
 80058ca:	182b      	adds	r3, r5, r0
 80058cc:	3202      	adds	r2, #2
 80058ce:	e7de      	b.n	800588e <__sccl+0x32>

080058d0 <__sread>:
 80058d0:	b510      	push	{r4, lr}
 80058d2:	460c      	mov	r4, r1
 80058d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d8:	f000 fad2 	bl	8005e80 <_read_r>
 80058dc:	2800      	cmp	r0, #0
 80058de:	bfab      	itete	ge
 80058e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058e2:	89a3      	ldrhlt	r3, [r4, #12]
 80058e4:	181b      	addge	r3, r3, r0
 80058e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058ea:	bfac      	ite	ge
 80058ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80058ee:	81a3      	strhlt	r3, [r4, #12]
 80058f0:	bd10      	pop	{r4, pc}

080058f2 <__swrite>:
 80058f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f6:	461f      	mov	r7, r3
 80058f8:	898b      	ldrh	r3, [r1, #12]
 80058fa:	05db      	lsls	r3, r3, #23
 80058fc:	4605      	mov	r5, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	4616      	mov	r6, r2
 8005902:	d505      	bpl.n	8005910 <__swrite+0x1e>
 8005904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005908:	2302      	movs	r3, #2
 800590a:	2200      	movs	r2, #0
 800590c:	f000 fa6e 	bl	8005dec <_lseek_r>
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	4632      	mov	r2, r6
 800591e:	463b      	mov	r3, r7
 8005920:	4628      	mov	r0, r5
 8005922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005926:	f000 b9ed 	b.w	8005d04 <_write_r>

0800592a <__sseek>:
 800592a:	b510      	push	{r4, lr}
 800592c:	460c      	mov	r4, r1
 800592e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005932:	f000 fa5b 	bl	8005dec <_lseek_r>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	bf15      	itete	ne
 800593c:	6560      	strne	r0, [r4, #84]	; 0x54
 800593e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005946:	81a3      	strheq	r3, [r4, #12]
 8005948:	bf18      	it	ne
 800594a:	81a3      	strhne	r3, [r4, #12]
 800594c:	bd10      	pop	{r4, pc}

0800594e <__sclose>:
 800594e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005952:	f000 ba07 	b.w	8005d64 <_close_r>
	...

08005958 <_strtol_l.isra.0>:
 8005958:	2b01      	cmp	r3, #1
 800595a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800595e:	d001      	beq.n	8005964 <_strtol_l.isra.0+0xc>
 8005960:	2b24      	cmp	r3, #36	; 0x24
 8005962:	d906      	bls.n	8005972 <_strtol_l.isra.0+0x1a>
 8005964:	f7fc fe70 	bl	8002648 <__errno>
 8005968:	2316      	movs	r3, #22
 800596a:	6003      	str	r3, [r0, #0]
 800596c:	2000      	movs	r0, #0
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	4f3a      	ldr	r7, [pc, #232]	; (8005a5c <_strtol_l.isra.0+0x104>)
 8005974:	468e      	mov	lr, r1
 8005976:	4676      	mov	r6, lr
 8005978:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800597c:	5de5      	ldrb	r5, [r4, r7]
 800597e:	f015 0508 	ands.w	r5, r5, #8
 8005982:	d1f8      	bne.n	8005976 <_strtol_l.isra.0+0x1e>
 8005984:	2c2d      	cmp	r4, #45	; 0x2d
 8005986:	d134      	bne.n	80059f2 <_strtol_l.isra.0+0x9a>
 8005988:	f89e 4000 	ldrb.w	r4, [lr]
 800598c:	f04f 0801 	mov.w	r8, #1
 8005990:	f106 0e02 	add.w	lr, r6, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d05c      	beq.n	8005a52 <_strtol_l.isra.0+0xfa>
 8005998:	2b10      	cmp	r3, #16
 800599a:	d10c      	bne.n	80059b6 <_strtol_l.isra.0+0x5e>
 800599c:	2c30      	cmp	r4, #48	; 0x30
 800599e:	d10a      	bne.n	80059b6 <_strtol_l.isra.0+0x5e>
 80059a0:	f89e 4000 	ldrb.w	r4, [lr]
 80059a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80059a8:	2c58      	cmp	r4, #88	; 0x58
 80059aa:	d14d      	bne.n	8005a48 <_strtol_l.isra.0+0xf0>
 80059ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80059b0:	2310      	movs	r3, #16
 80059b2:	f10e 0e02 	add.w	lr, lr, #2
 80059b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80059ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80059be:	2600      	movs	r6, #0
 80059c0:	fbbc f9f3 	udiv	r9, ip, r3
 80059c4:	4635      	mov	r5, r6
 80059c6:	fb03 ca19 	mls	sl, r3, r9, ip
 80059ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80059ce:	2f09      	cmp	r7, #9
 80059d0:	d818      	bhi.n	8005a04 <_strtol_l.isra.0+0xac>
 80059d2:	463c      	mov	r4, r7
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	dd24      	ble.n	8005a22 <_strtol_l.isra.0+0xca>
 80059d8:	2e00      	cmp	r6, #0
 80059da:	db1f      	blt.n	8005a1c <_strtol_l.isra.0+0xc4>
 80059dc:	45a9      	cmp	r9, r5
 80059de:	d31d      	bcc.n	8005a1c <_strtol_l.isra.0+0xc4>
 80059e0:	d101      	bne.n	80059e6 <_strtol_l.isra.0+0x8e>
 80059e2:	45a2      	cmp	sl, r4
 80059e4:	db1a      	blt.n	8005a1c <_strtol_l.isra.0+0xc4>
 80059e6:	fb05 4503 	mla	r5, r5, r3, r4
 80059ea:	2601      	movs	r6, #1
 80059ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80059f0:	e7eb      	b.n	80059ca <_strtol_l.isra.0+0x72>
 80059f2:	2c2b      	cmp	r4, #43	; 0x2b
 80059f4:	bf08      	it	eq
 80059f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80059fa:	46a8      	mov	r8, r5
 80059fc:	bf08      	it	eq
 80059fe:	f106 0e02 	addeq.w	lr, r6, #2
 8005a02:	e7c7      	b.n	8005994 <_strtol_l.isra.0+0x3c>
 8005a04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005a08:	2f19      	cmp	r7, #25
 8005a0a:	d801      	bhi.n	8005a10 <_strtol_l.isra.0+0xb8>
 8005a0c:	3c37      	subs	r4, #55	; 0x37
 8005a0e:	e7e1      	b.n	80059d4 <_strtol_l.isra.0+0x7c>
 8005a10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005a14:	2f19      	cmp	r7, #25
 8005a16:	d804      	bhi.n	8005a22 <_strtol_l.isra.0+0xca>
 8005a18:	3c57      	subs	r4, #87	; 0x57
 8005a1a:	e7db      	b.n	80059d4 <_strtol_l.isra.0+0x7c>
 8005a1c:	f04f 36ff 	mov.w	r6, #4294967295
 8005a20:	e7e4      	b.n	80059ec <_strtol_l.isra.0+0x94>
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	da05      	bge.n	8005a32 <_strtol_l.isra.0+0xda>
 8005a26:	2322      	movs	r3, #34	; 0x22
 8005a28:	6003      	str	r3, [r0, #0]
 8005a2a:	4665      	mov	r5, ip
 8005a2c:	b942      	cbnz	r2, 8005a40 <_strtol_l.isra.0+0xe8>
 8005a2e:	4628      	mov	r0, r5
 8005a30:	e79d      	b.n	800596e <_strtol_l.isra.0+0x16>
 8005a32:	f1b8 0f00 	cmp.w	r8, #0
 8005a36:	d000      	beq.n	8005a3a <_strtol_l.isra.0+0xe2>
 8005a38:	426d      	negs	r5, r5
 8005a3a:	2a00      	cmp	r2, #0
 8005a3c:	d0f7      	beq.n	8005a2e <_strtol_l.isra.0+0xd6>
 8005a3e:	b10e      	cbz	r6, 8005a44 <_strtol_l.isra.0+0xec>
 8005a40:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005a44:	6011      	str	r1, [r2, #0]
 8005a46:	e7f2      	b.n	8005a2e <_strtol_l.isra.0+0xd6>
 8005a48:	2430      	movs	r4, #48	; 0x30
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1b3      	bne.n	80059b6 <_strtol_l.isra.0+0x5e>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	e7b1      	b.n	80059b6 <_strtol_l.isra.0+0x5e>
 8005a52:	2c30      	cmp	r4, #48	; 0x30
 8005a54:	d0a4      	beq.n	80059a0 <_strtol_l.isra.0+0x48>
 8005a56:	230a      	movs	r3, #10
 8005a58:	e7ad      	b.n	80059b6 <_strtol_l.isra.0+0x5e>
 8005a5a:	bf00      	nop
 8005a5c:	080068cd 	.word	0x080068cd

08005a60 <_strtol_r>:
 8005a60:	f7ff bf7a 	b.w	8005958 <_strtol_l.isra.0>

08005a64 <_strtoul_l.isra.0>:
 8005a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a68:	4e3b      	ldr	r6, [pc, #236]	; (8005b58 <_strtoul_l.isra.0+0xf4>)
 8005a6a:	4686      	mov	lr, r0
 8005a6c:	468c      	mov	ip, r1
 8005a6e:	4660      	mov	r0, ip
 8005a70:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005a74:	5da5      	ldrb	r5, [r4, r6]
 8005a76:	f015 0508 	ands.w	r5, r5, #8
 8005a7a:	d1f8      	bne.n	8005a6e <_strtoul_l.isra.0+0xa>
 8005a7c:	2c2d      	cmp	r4, #45	; 0x2d
 8005a7e:	d134      	bne.n	8005aea <_strtoul_l.isra.0+0x86>
 8005a80:	f89c 4000 	ldrb.w	r4, [ip]
 8005a84:	f04f 0801 	mov.w	r8, #1
 8005a88:	f100 0c02 	add.w	ip, r0, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d05e      	beq.n	8005b4e <_strtoul_l.isra.0+0xea>
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d10c      	bne.n	8005aae <_strtoul_l.isra.0+0x4a>
 8005a94:	2c30      	cmp	r4, #48	; 0x30
 8005a96:	d10a      	bne.n	8005aae <_strtoul_l.isra.0+0x4a>
 8005a98:	f89c 0000 	ldrb.w	r0, [ip]
 8005a9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005aa0:	2858      	cmp	r0, #88	; 0x58
 8005aa2:	d14f      	bne.n	8005b44 <_strtoul_l.isra.0+0xe0>
 8005aa4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	f10c 0c02 	add.w	ip, ip, #2
 8005aae:	f04f 37ff 	mov.w	r7, #4294967295
 8005ab2:	2500      	movs	r5, #0
 8005ab4:	fbb7 f7f3 	udiv	r7, r7, r3
 8005ab8:	fb03 f907 	mul.w	r9, r3, r7
 8005abc:	ea6f 0909 	mvn.w	r9, r9
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005ac6:	2e09      	cmp	r6, #9
 8005ac8:	d818      	bhi.n	8005afc <_strtoul_l.isra.0+0x98>
 8005aca:	4634      	mov	r4, r6
 8005acc:	42a3      	cmp	r3, r4
 8005ace:	dd24      	ble.n	8005b1a <_strtoul_l.isra.0+0xb6>
 8005ad0:	2d00      	cmp	r5, #0
 8005ad2:	db1f      	blt.n	8005b14 <_strtoul_l.isra.0+0xb0>
 8005ad4:	4287      	cmp	r7, r0
 8005ad6:	d31d      	bcc.n	8005b14 <_strtoul_l.isra.0+0xb0>
 8005ad8:	d101      	bne.n	8005ade <_strtoul_l.isra.0+0x7a>
 8005ada:	45a1      	cmp	r9, r4
 8005adc:	db1a      	blt.n	8005b14 <_strtoul_l.isra.0+0xb0>
 8005ade:	fb00 4003 	mla	r0, r0, r3, r4
 8005ae2:	2501      	movs	r5, #1
 8005ae4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005ae8:	e7eb      	b.n	8005ac2 <_strtoul_l.isra.0+0x5e>
 8005aea:	2c2b      	cmp	r4, #43	; 0x2b
 8005aec:	bf08      	it	eq
 8005aee:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005af2:	46a8      	mov	r8, r5
 8005af4:	bf08      	it	eq
 8005af6:	f100 0c02 	addeq.w	ip, r0, #2
 8005afa:	e7c7      	b.n	8005a8c <_strtoul_l.isra.0+0x28>
 8005afc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005b00:	2e19      	cmp	r6, #25
 8005b02:	d801      	bhi.n	8005b08 <_strtoul_l.isra.0+0xa4>
 8005b04:	3c37      	subs	r4, #55	; 0x37
 8005b06:	e7e1      	b.n	8005acc <_strtoul_l.isra.0+0x68>
 8005b08:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005b0c:	2e19      	cmp	r6, #25
 8005b0e:	d804      	bhi.n	8005b1a <_strtoul_l.isra.0+0xb6>
 8005b10:	3c57      	subs	r4, #87	; 0x57
 8005b12:	e7db      	b.n	8005acc <_strtoul_l.isra.0+0x68>
 8005b14:	f04f 35ff 	mov.w	r5, #4294967295
 8005b18:	e7e4      	b.n	8005ae4 <_strtoul_l.isra.0+0x80>
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	da07      	bge.n	8005b2e <_strtoul_l.isra.0+0xca>
 8005b1e:	2322      	movs	r3, #34	; 0x22
 8005b20:	f8ce 3000 	str.w	r3, [lr]
 8005b24:	f04f 30ff 	mov.w	r0, #4294967295
 8005b28:	b942      	cbnz	r2, 8005b3c <_strtoul_l.isra.0+0xd8>
 8005b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b2e:	f1b8 0f00 	cmp.w	r8, #0
 8005b32:	d000      	beq.n	8005b36 <_strtoul_l.isra.0+0xd2>
 8005b34:	4240      	negs	r0, r0
 8005b36:	2a00      	cmp	r2, #0
 8005b38:	d0f7      	beq.n	8005b2a <_strtoul_l.isra.0+0xc6>
 8005b3a:	b10d      	cbz	r5, 8005b40 <_strtoul_l.isra.0+0xdc>
 8005b3c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005b40:	6011      	str	r1, [r2, #0]
 8005b42:	e7f2      	b.n	8005b2a <_strtoul_l.isra.0+0xc6>
 8005b44:	2430      	movs	r4, #48	; 0x30
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1b1      	bne.n	8005aae <_strtoul_l.isra.0+0x4a>
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	e7af      	b.n	8005aae <_strtoul_l.isra.0+0x4a>
 8005b4e:	2c30      	cmp	r4, #48	; 0x30
 8005b50:	d0a2      	beq.n	8005a98 <_strtoul_l.isra.0+0x34>
 8005b52:	230a      	movs	r3, #10
 8005b54:	e7ab      	b.n	8005aae <_strtoul_l.isra.0+0x4a>
 8005b56:	bf00      	nop
 8005b58:	080068cd 	.word	0x080068cd

08005b5c <_strtoul_r>:
 8005b5c:	f7ff bf82 	b.w	8005a64 <_strtoul_l.isra.0>

08005b60 <__submore>:
 8005b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b64:	460c      	mov	r4, r1
 8005b66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b6c:	4299      	cmp	r1, r3
 8005b6e:	d11d      	bne.n	8005bac <__submore+0x4c>
 8005b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b74:	f7fc fdf2 	bl	800275c <_malloc_r>
 8005b78:	b918      	cbnz	r0, 8005b82 <__submore+0x22>
 8005b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b86:	63a3      	str	r3, [r4, #56]	; 0x38
 8005b88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8005b8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005b92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005b96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005b9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005b9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005ba2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005ba6:	6020      	str	r0, [r4, #0]
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e7e8      	b.n	8005b7e <__submore+0x1e>
 8005bac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005bae:	0077      	lsls	r7, r6, #1
 8005bb0:	463a      	mov	r2, r7
 8005bb2:	f000 f93f 	bl	8005e34 <_realloc_r>
 8005bb6:	4605      	mov	r5, r0
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d0de      	beq.n	8005b7a <__submore+0x1a>
 8005bbc:	eb00 0806 	add.w	r8, r0, r6
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	4632      	mov	r2, r6
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	f7fe fd9d 	bl	8004704 <memcpy>
 8005bca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005bce:	f8c4 8000 	str.w	r8, [r4]
 8005bd2:	e7e9      	b.n	8005ba8 <__submore+0x48>

08005bd4 <_ungetc_r>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4614      	mov	r4, r2
 8005bd8:	1c4a      	adds	r2, r1, #1
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460d      	mov	r5, r1
 8005bde:	d103      	bne.n	8005be8 <_ungetc_r+0x14>
 8005be0:	f04f 35ff 	mov.w	r5, #4294967295
 8005be4:	4628      	mov	r0, r5
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
 8005be8:	b118      	cbz	r0, 8005bf2 <_ungetc_r+0x1e>
 8005bea:	6983      	ldr	r3, [r0, #24]
 8005bec:	b90b      	cbnz	r3, 8005bf2 <_ungetc_r+0x1e>
 8005bee:	f7fe fc63 	bl	80044b8 <__sinit>
 8005bf2:	4b41      	ldr	r3, [pc, #260]	; (8005cf8 <_ungetc_r+0x124>)
 8005bf4:	429c      	cmp	r4, r3
 8005bf6:	d11d      	bne.n	8005c34 <_ungetc_r+0x60>
 8005bf8:	6874      	ldr	r4, [r6, #4]
 8005bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bfc:	07db      	lsls	r3, r3, #31
 8005bfe:	d405      	bmi.n	8005c0c <_ungetc_r+0x38>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	0598      	lsls	r0, r3, #22
 8005c04:	d402      	bmi.n	8005c0c <_ungetc_r+0x38>
 8005c06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c08:	f7fe fd15 	bl	8004636 <__retarget_lock_acquire_recursive>
 8005c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c10:	f023 0320 	bic.w	r3, r3, #32
 8005c14:	0759      	lsls	r1, r3, #29
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	d42d      	bmi.n	8005c78 <_ungetc_r+0xa4>
 8005c1c:	06d3      	lsls	r3, r2, #27
 8005c1e:	d413      	bmi.n	8005c48 <_ungetc_r+0x74>
 8005c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c22:	07dd      	lsls	r5, r3, #31
 8005c24:	d4dc      	bmi.n	8005be0 <_ungetc_r+0xc>
 8005c26:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005c2a:	d1d9      	bne.n	8005be0 <_ungetc_r+0xc>
 8005c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c2e:	f7fe fd03 	bl	8004638 <__retarget_lock_release_recursive>
 8005c32:	e7d5      	b.n	8005be0 <_ungetc_r+0xc>
 8005c34:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <_ungetc_r+0x128>)
 8005c36:	429c      	cmp	r4, r3
 8005c38:	d101      	bne.n	8005c3e <_ungetc_r+0x6a>
 8005c3a:	68b4      	ldr	r4, [r6, #8]
 8005c3c:	e7dd      	b.n	8005bfa <_ungetc_r+0x26>
 8005c3e:	4b30      	ldr	r3, [pc, #192]	; (8005d00 <_ungetc_r+0x12c>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	bf08      	it	eq
 8005c44:	68f4      	ldreq	r4, [r6, #12]
 8005c46:	e7d8      	b.n	8005bfa <_ungetc_r+0x26>
 8005c48:	0710      	lsls	r0, r2, #28
 8005c4a:	d511      	bpl.n	8005c70 <_ungetc_r+0x9c>
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7fe fb8c 	bl	800436c <_fflush_r>
 8005c54:	b130      	cbz	r0, 8005c64 <_ungetc_r+0x90>
 8005c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c58:	07d9      	lsls	r1, r3, #31
 8005c5a:	d4c1      	bmi.n	8005be0 <_ungetc_r+0xc>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005c62:	e7e2      	b.n	8005c2a <_ungetc_r+0x56>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	60a0      	str	r0, [r4, #8]
 8005c68:	f023 0308 	bic.w	r3, r3, #8
 8005c6c:	81a3      	strh	r3, [r4, #12]
 8005c6e:	61a0      	str	r0, [r4, #24]
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	f043 0304 	orr.w	r3, r3, #4
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	b2ed      	uxtb	r5, r5
 8005c7e:	b1d3      	cbz	r3, 8005cb6 <_ungetc_r+0xe2>
 8005c80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c82:	4293      	cmp	r3, r2
 8005c84:	dc05      	bgt.n	8005c92 <_ungetc_r+0xbe>
 8005c86:	4621      	mov	r1, r4
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ff69 	bl	8005b60 <__submore>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d1e1      	bne.n	8005c56 <_ungetc_r+0x82>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	1e5a      	subs	r2, r3, #1
 8005c96:	6022      	str	r2, [r4, #0]
 8005c98:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005c9c:	6863      	ldr	r3, [r4, #4]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6063      	str	r3, [r4, #4]
 8005ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ca4:	07da      	lsls	r2, r3, #31
 8005ca6:	d49d      	bmi.n	8005be4 <_ungetc_r+0x10>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	059b      	lsls	r3, r3, #22
 8005cac:	d49a      	bmi.n	8005be4 <_ungetc_r+0x10>
 8005cae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cb0:	f7fe fcc2 	bl	8004638 <__retarget_lock_release_recursive>
 8005cb4:	e796      	b.n	8005be4 <_ungetc_r+0x10>
 8005cb6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005cb8:	6920      	ldr	r0, [r4, #16]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	f001 0101 	and.w	r1, r1, #1
 8005cc0:	b160      	cbz	r0, 8005cdc <_ungetc_r+0x108>
 8005cc2:	4298      	cmp	r0, r3
 8005cc4:	d20a      	bcs.n	8005cdc <_ungetc_r+0x108>
 8005cc6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8005cca:	42a8      	cmp	r0, r5
 8005ccc:	d106      	bne.n	8005cdc <_ungetc_r+0x108>
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	3201      	adds	r2, #1
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	6062      	str	r2, [r4, #4]
 8005cd6:	2900      	cmp	r1, #0
 8005cd8:	d184      	bne.n	8005be4 <_ungetc_r+0x10>
 8005cda:	e7e5      	b.n	8005ca8 <_ungetc_r+0xd4>
 8005cdc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	63a3      	str	r3, [r4, #56]	; 0x38
 8005cea:	4623      	mov	r3, r4
 8005cec:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	6063      	str	r3, [r4, #4]
 8005cf6:	e7ee      	b.n	8005cd6 <_ungetc_r+0x102>
 8005cf8:	080066c8 	.word	0x080066c8
 8005cfc:	080066e8 	.word	0x080066e8
 8005d00:	080066a8 	.word	0x080066a8

08005d04 <_write_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d07      	ldr	r5, [pc, #28]	; (8005d24 <_write_r+0x20>)
 8005d08:	4604      	mov	r4, r0
 8005d0a:	4608      	mov	r0, r1
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	602a      	str	r2, [r5, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7fb fd7a 	bl	800180c <_write>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_write_r+0x1e>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_write_r+0x1e>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20002a60 	.word	0x20002a60

08005d28 <__assert_func>:
 8005d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d2a:	4614      	mov	r4, r2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <__assert_func+0x2c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4605      	mov	r5, r0
 8005d34:	68d8      	ldr	r0, [r3, #12]
 8005d36:	b14c      	cbz	r4, 8005d4c <__assert_func+0x24>
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <__assert_func+0x30>)
 8005d3a:	9100      	str	r1, [sp, #0]
 8005d3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d40:	4906      	ldr	r1, [pc, #24]	; (8005d5c <__assert_func+0x34>)
 8005d42:	462b      	mov	r3, r5
 8005d44:	f000 f81e 	bl	8005d84 <fiprintf>
 8005d48:	f000 f8b9 	bl	8005ebe <abort>
 8005d4c:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <__assert_func+0x38>)
 8005d4e:	461c      	mov	r4, r3
 8005d50:	e7f3      	b.n	8005d3a <__assert_func+0x12>
 8005d52:	bf00      	nop
 8005d54:	2000000c 	.word	0x2000000c
 8005d58:	08006890 	.word	0x08006890
 8005d5c:	0800689d 	.word	0x0800689d
 8005d60:	080068cb 	.word	0x080068cb

08005d64 <_close_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4d06      	ldr	r5, [pc, #24]	; (8005d80 <_close_r+0x1c>)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	602b      	str	r3, [r5, #0]
 8005d70:	f7fb fde0 	bl	8001934 <_close>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d102      	bne.n	8005d7e <_close_r+0x1a>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	b103      	cbz	r3, 8005d7e <_close_r+0x1a>
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	20002a60 	.word	0x20002a60

08005d84 <fiprintf>:
 8005d84:	b40e      	push	{r1, r2, r3}
 8005d86:	b503      	push	{r0, r1, lr}
 8005d88:	4601      	mov	r1, r0
 8005d8a:	ab03      	add	r3, sp, #12
 8005d8c:	4805      	ldr	r0, [pc, #20]	; (8005da4 <fiprintf+0x20>)
 8005d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d92:	6800      	ldr	r0, [r0, #0]
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	f7ff f885 	bl	8004ea4 <_vfiprintf_r>
 8005d9a:	b002      	add	sp, #8
 8005d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da0:	b003      	add	sp, #12
 8005da2:	4770      	bx	lr
 8005da4:	2000000c 	.word	0x2000000c

08005da8 <_fstat_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4d07      	ldr	r5, [pc, #28]	; (8005dc8 <_fstat_r+0x20>)
 8005dac:	2300      	movs	r3, #0
 8005dae:	4604      	mov	r4, r0
 8005db0:	4608      	mov	r0, r1
 8005db2:	4611      	mov	r1, r2
 8005db4:	602b      	str	r3, [r5, #0]
 8005db6:	f7fb fdc1 	bl	800193c <_fstat>
 8005dba:	1c43      	adds	r3, r0, #1
 8005dbc:	d102      	bne.n	8005dc4 <_fstat_r+0x1c>
 8005dbe:	682b      	ldr	r3, [r5, #0]
 8005dc0:	b103      	cbz	r3, 8005dc4 <_fstat_r+0x1c>
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	bd38      	pop	{r3, r4, r5, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20002a60 	.word	0x20002a60

08005dcc <_isatty_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d06      	ldr	r5, [pc, #24]	; (8005de8 <_isatty_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	f7fb fdb6 	bl	8001948 <_isatty>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_isatty_r+0x1a>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_isatty_r+0x1a>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20002a60 	.word	0x20002a60

08005dec <_lseek_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d07      	ldr	r5, [pc, #28]	; (8005e0c <_lseek_r+0x20>)
 8005df0:	4604      	mov	r4, r0
 8005df2:	4608      	mov	r0, r1
 8005df4:	4611      	mov	r1, r2
 8005df6:	2200      	movs	r2, #0
 8005df8:	602a      	str	r2, [r5, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f7fb fda6 	bl	800194c <_lseek>
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	d102      	bne.n	8005e0a <_lseek_r+0x1e>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	b103      	cbz	r3, 8005e0a <_lseek_r+0x1e>
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
 8005e0c:	20002a60 	.word	0x20002a60

08005e10 <__ascii_mbtowc>:
 8005e10:	b082      	sub	sp, #8
 8005e12:	b901      	cbnz	r1, 8005e16 <__ascii_mbtowc+0x6>
 8005e14:	a901      	add	r1, sp, #4
 8005e16:	b142      	cbz	r2, 8005e2a <__ascii_mbtowc+0x1a>
 8005e18:	b14b      	cbz	r3, 8005e2e <__ascii_mbtowc+0x1e>
 8005e1a:	7813      	ldrb	r3, [r2, #0]
 8005e1c:	600b      	str	r3, [r1, #0]
 8005e1e:	7812      	ldrb	r2, [r2, #0]
 8005e20:	1e10      	subs	r0, r2, #0
 8005e22:	bf18      	it	ne
 8005e24:	2001      	movne	r0, #1
 8005e26:	b002      	add	sp, #8
 8005e28:	4770      	bx	lr
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	e7fb      	b.n	8005e26 <__ascii_mbtowc+0x16>
 8005e2e:	f06f 0001 	mvn.w	r0, #1
 8005e32:	e7f8      	b.n	8005e26 <__ascii_mbtowc+0x16>

08005e34 <_realloc_r>:
 8005e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e36:	4607      	mov	r7, r0
 8005e38:	4614      	mov	r4, r2
 8005e3a:	460e      	mov	r6, r1
 8005e3c:	b921      	cbnz	r1, 8005e48 <_realloc_r+0x14>
 8005e3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e42:	4611      	mov	r1, r2
 8005e44:	f7fc bc8a 	b.w	800275c <_malloc_r>
 8005e48:	b922      	cbnz	r2, 8005e54 <_realloc_r+0x20>
 8005e4a:	f7fc fc37 	bl	80026bc <_free_r>
 8005e4e:	4625      	mov	r5, r4
 8005e50:	4628      	mov	r0, r5
 8005e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e54:	f000 f83a 	bl	8005ecc <_malloc_usable_size_r>
 8005e58:	42a0      	cmp	r0, r4
 8005e5a:	d20f      	bcs.n	8005e7c <_realloc_r+0x48>
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4638      	mov	r0, r7
 8005e60:	f7fc fc7c 	bl	800275c <_malloc_r>
 8005e64:	4605      	mov	r5, r0
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d0f2      	beq.n	8005e50 <_realloc_r+0x1c>
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	f7fe fc49 	bl	8004704 <memcpy>
 8005e72:	4631      	mov	r1, r6
 8005e74:	4638      	mov	r0, r7
 8005e76:	f7fc fc21 	bl	80026bc <_free_r>
 8005e7a:	e7e9      	b.n	8005e50 <_realloc_r+0x1c>
 8005e7c:	4635      	mov	r5, r6
 8005e7e:	e7e7      	b.n	8005e50 <_realloc_r+0x1c>

08005e80 <_read_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4d07      	ldr	r5, [pc, #28]	; (8005ea0 <_read_r+0x20>)
 8005e84:	4604      	mov	r4, r0
 8005e86:	4608      	mov	r0, r1
 8005e88:	4611      	mov	r1, r2
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	602a      	str	r2, [r5, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f7fb fcc8 	bl	8001824 <_read>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_read_r+0x1e>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_read_r+0x1e>
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	20002a60 	.word	0x20002a60

08005ea4 <__ascii_wctomb>:
 8005ea4:	b149      	cbz	r1, 8005eba <__ascii_wctomb+0x16>
 8005ea6:	2aff      	cmp	r2, #255	; 0xff
 8005ea8:	bf85      	ittet	hi
 8005eaa:	238a      	movhi	r3, #138	; 0x8a
 8005eac:	6003      	strhi	r3, [r0, #0]
 8005eae:	700a      	strbls	r2, [r1, #0]
 8005eb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8005eb4:	bf98      	it	ls
 8005eb6:	2001      	movls	r0, #1
 8005eb8:	4770      	bx	lr
 8005eba:	4608      	mov	r0, r1
 8005ebc:	4770      	bx	lr

08005ebe <abort>:
 8005ebe:	b508      	push	{r3, lr}
 8005ec0:	2006      	movs	r0, #6
 8005ec2:	f000 f833 	bl	8005f2c <raise>
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	f7fb fd2e 	bl	8001928 <_exit>

08005ecc <_malloc_usable_size_r>:
 8005ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed0:	1f18      	subs	r0, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bfbc      	itt	lt
 8005ed6:	580b      	ldrlt	r3, [r1, r0]
 8005ed8:	18c0      	addlt	r0, r0, r3
 8005eda:	4770      	bx	lr

08005edc <_raise_r>:
 8005edc:	291f      	cmp	r1, #31
 8005ede:	b538      	push	{r3, r4, r5, lr}
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	d904      	bls.n	8005ef0 <_raise_r+0x14>
 8005ee6:	2316      	movs	r3, #22
 8005ee8:	6003      	str	r3, [r0, #0]
 8005eea:	f04f 30ff 	mov.w	r0, #4294967295
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ef2:	b112      	cbz	r2, 8005efa <_raise_r+0x1e>
 8005ef4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ef8:	b94b      	cbnz	r3, 8005f0e <_raise_r+0x32>
 8005efa:	4620      	mov	r0, r4
 8005efc:	f000 f830 	bl	8005f60 <_getpid_r>
 8005f00:	462a      	mov	r2, r5
 8005f02:	4601      	mov	r1, r0
 8005f04:	4620      	mov	r0, r4
 8005f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f0a:	f000 b817 	b.w	8005f3c <_kill_r>
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d00a      	beq.n	8005f28 <_raise_r+0x4c>
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	d103      	bne.n	8005f1e <_raise_r+0x42>
 8005f16:	2316      	movs	r3, #22
 8005f18:	6003      	str	r3, [r0, #0]
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	e7e7      	b.n	8005eee <_raise_r+0x12>
 8005f1e:	2400      	movs	r4, #0
 8005f20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f24:	4628      	mov	r0, r5
 8005f26:	4798      	blx	r3
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e7e0      	b.n	8005eee <_raise_r+0x12>

08005f2c <raise>:
 8005f2c:	4b02      	ldr	r3, [pc, #8]	; (8005f38 <raise+0xc>)
 8005f2e:	4601      	mov	r1, r0
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	f7ff bfd3 	b.w	8005edc <_raise_r>
 8005f36:	bf00      	nop
 8005f38:	2000000c 	.word	0x2000000c

08005f3c <_kill_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	; (8005f5c <_kill_r+0x20>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	f7fb fce5 	bl	8001918 <_kill>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d102      	bne.n	8005f58 <_kill_r+0x1c>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	b103      	cbz	r3, 8005f58 <_kill_r+0x1c>
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20002a60 	.word	0x20002a60

08005f60 <_getpid_r>:
 8005f60:	f7fb bcd8 	b.w	8001914 <_getpid>

08005f64 <_init>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr

08005f70 <_fini>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr
